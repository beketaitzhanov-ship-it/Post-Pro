from flask import Flask, render_template, request, jsonify, session
import os
import re
from datetime import datetime
import google.generativeai as genai
from google.generativeai.types import GenerationConfig
from dotenv import load_dotenv
import socket

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

GEMINI_API_KEY = os.getenv("GOOGLE_API_KEY")

app = Flask(__name__)
app.secret_key = 'postpro-secret-key-2024'

# --- –ë–ê–ó–ê –î–ê–ù–ù–´–• –ò –ö–û–ù–°–¢–ê–ù–¢–´ ---
DESTINATION_ZONES = {
    "—Ç–∞–ª–¥—ã–∫–æ—Ä–≥–∞–Ω": 1, "–∫–æ–Ω–∞–µ–≤": 1, "—Ç–µ–∫–µ–ª–∏": 1, "–∫–∞–ø—á–∞–≥–∞–π": 1, "–µ—Å–∏–∫": 1, "—Ç–∞–ª–≥–∞—Ä": 1, "–∫–∞—Å–∫–µ–ª–µ–Ω": 1, "–∂–∞—Ä–∫–µ–Ω—Ç": 1, "—Å–∞—Ä–∫–∞–Ω–¥": 1, "–∞–∫—Å—É": 1,
    "—Ç–∞—Ä–∞–∑": 2, "—à—ã–º–∫–µ–Ω—Ç": 2, "—Ç—É—Ä–∫–µ—Å—Ç–∞–Ω": 2, "–∞—É–ª–∏–µ–∞—Ç–∞": 2, "–∫–æ—Ä–¥–∞–π": 2, "–º–µ—Ä–∫–µ": 2, "–º–æ–π—ã–Ω–∫—É–º": 2, "–∂–∞–Ω–∞—Ç–∞—Å": 2, "–∫–∞—Ä–∞—Ç–∞—É": 2, "—à—É": 2, "–∫–µ–Ω—Ç": 2,
    "–∞—Å—Ç–∞–Ω–∞": 3, "–∫–æ–∫—à–µ—Ç–∞—É": 3, "—Å—Ç–µ–ø–Ω–æ–≥–æ—Ä—Å–∫": 3, "–∞—Ç–±–∞—Å–∞—Ä": 3, "–µ—Ä–µ–º–µ–Ω—Ç–∞—É": 3, "–º–∞–∫–∏–Ω—Å–∫": 3, "–∫–∞—Ä–∞–≥–∞–Ω–¥–∞": 3, "–±–∞–ª—Ö–∞—à": 3, "—Ç–µ–º–∏—Ä—Ç–∞—É": 3, "—à–∞—Ö—Ç–∏–Ω—Å–∫": 3, "–∂–µ–∑–∫–∞–∑–≥–∞–Ω": 3, "—Å–∞—Ç–ø–∞–µ–≤": 3, "–∫—ã–∑—ã–ª–æ—Ä–¥–∞": 3, "–∫–∞–∑–∞–ª—ã–Ω—Å–∫": 3, "–∂–∞–Ω–∞–∫–æ—Ä–≥–∞–Ω": 3, "–ø–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫": 3, "–ø–∞–≤–ª–æ–¥–∞—Ä": 3, "—ç–∫–∏–±–∞—Å—Ç—É–∑": 3, "–∫–æ—Å—Ç–∞–Ω–∞–π": 3, "—Ä—É–¥–Ω—ã–π": 3, "—Å–µ–º–µ–π": 3, "–∫—É—Ä—á–∞—Ç–æ–≤": 3, "–∞—è–≥–æ–∑": 3,
    "–∞–∫—Ç–æ–±–µ": 4, "—Ö—Ä–æ–º—Ç–∞—É": 4, "—à–∞–ª–∫–∞—Ä": 4, "—É—Ä–∞–ª—å—Å–∫": 4, "–∞–∫—Å–∞–π": 4, "—á–∏–Ω–≥–∏—Ä–ª–∞—É": 4,
    "–∞—Ç—ã—Ä–∞—É": 5, "–∫—É–ª—å—Å–∞—Ä—ã": 5, "–∞–∫—Ç–∞—É": 5, "–∂–∞–Ω–∞–æ–∑–µ–Ω": 5, "–±–µ–π–Ω–µ—É": 5
}
EXCHANGE_RATE = 550
PRODUCT_TYPES = {
    "—Ç–∫–∞–Ω–∏": 1.70, "–æ–¥–µ–∂–¥–∞": 1.70, "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã": 2.10, "–æ–±—â–∏–µ —Ç–æ–≤–∞—Ä—ã": 2.40, "–º–µ–±–µ–ª—å": 2.10, 
    "–∫–æ—Å–º–µ—Ç–∏–∫–∞": 2.30, "–∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏": 2.40, "–º–∞–ª–∞—è —Ç–µ—Ö–Ω–∏–∫–∞": 2.50, "–ø—Ä–æ–¥—É–∫—Ç—ã": 2.70, 
    "–±–µ–ª—å–µ": 2.80, "–ª–µ–∫–∞—Ä—Å—Ç–≤–∞": 2.90, "–ª–µ–∫–∞—Ä—Å–∏–≤–∞": 2.90, "–º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã": 2.90, "–ø–æ—Å—É–¥–∞": 2.20
}
GREETINGS = ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "—Å–∞–ª–µ–º", "—Å”ô–ª–µ–º", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "—Å–∞–ª–∞–º–∞–ª–µ–π–∫—É–º", "–∞—Å—Å–∞–ª–∞–º—É –∞–ª–µ–π–∫—É–º", "hi", "hello"]

# --- "–ú–û–ó–ì" –ë–û–¢–ê ---
SYSTEM_INSTRUCTION = f"""
–¢—ã ‚Äî —É–º–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ PostPro. 

***–¢–í–û–Ø –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê:***

1. **–†–ê–°–ß–ï–¢ –°–¢–û–ò–ú–û–°–¢–ò:**
   - –ö–æ–≥–¥–∞ —Å–æ–±—Ä–∞–Ω—ã –≤–µ—Å, —Ç–æ–≤–∞—Ä –∏ –≥–æ—Ä–æ–¥ - –°–†–ê–ó–£ –ø–æ–∫–∞–∑—ã–≤–∞–π –ø–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
   - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç [–†–ê–°–ß–ï–¢] - –ø–æ–∫–∞–∑—ã–≤–∞–π –≥–æ—Ç–æ–≤—ã–µ —Ü–∏—Ñ—Ä—ã
   - –ü–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞ —Å–ø—Ä–æ—Å–∏: "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ –¥–æ—Å—Ç–∞–≤–∫–∏?"

2. **–ü–û–ù–ò–ú–ê–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ê:** 
   - –ü–æ–Ω–∏–º–∞–π —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º–∏ –∏ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ—à–∏–±–∫–∞–º–∏
   - –ò—Å–ø—Ä–∞–≤–ª—è–π –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –ø–æ–Ω–∏–º–∞–π –Ω–∞—Å—Ç–æ—è—â–∏–π —Å–º—ã—Å–ª
   - –ó–∞–ø–æ–º–∏–Ω–∞–π –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –¥–∏–∞–ª–æ–≥–∞

3. **–°–ë–û–† –î–ê–ù–ù–´–• –î–õ–Ø –†–ê–°–ß–ï–¢–ê:**
   - –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –≤–µ—Å, —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞, –≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏
   - –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ - —Å—Ä–∞–∑—É –¥–µ–ª–∞–π —Ä–∞—Å—á–µ—Ç
   - –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö - —Å–ø—Ä–æ—Å–∏ –¢–û–õ–¨–ö–û –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ

4. **–§–û–†–ú–ê–¢–´ –í–´–í–û–î–ê:**
   - –ó–∞—è–≤–∫–∞: `[–ó–ê–Ø–í–ö–ê] –ò–º—è: [–ò–º—è], –¢–µ–ª–µ—Ñ–æ–Ω: [–ù–æ–º–µ—Ä]`
   - –ü—Ä–æ—Ü–µ–¥—É—Ä–∞: `[–ü–†–û–¶–ï–î–£–†–ê]`

5. **–£–ú–ù–´–ô –î–ò–ê–õ–û–ì:**
   - –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≥–æ–≤–æ—Ä–∏—Ç "—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç?" –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö - —Å—Ä–∞–∑—É –¥–µ–ª–∞–π —Ä–∞—Å—á–µ—Ç
   - –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –º–µ–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ - –æ–±–Ω–æ–≤–ª—è–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
   - –í—Å–µ–≥–¥–∞ –±—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã

–ü—Ä–∏–º–µ—Ä—ã –ø–æ–Ω–∏–º–∞–Ω–∏—è:
- "—É –º–∞–Ω—è 50–∫–≥ –∞–¥–µ–∂–¥–∞ –≤ –∞—Å—Ç–∞–Ω—É" ‚Üí —Å—Ä–∞–∑—É –ø–æ–∫–∞–∂–∏ —Ä–∞—Å—á–µ—Ç –¥–ª—è 50–∫–≥ –æ–¥–µ–∂–¥—ã –≤ –ê—Å—Ç–∞–Ω—É
- "—Å–∫–æ–ª–∫–∞ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å?" ‚Üí —Å–¥–µ–ª–∞–π —Ä–∞—Å—á–µ—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
- "–ª–µ–∫–∞—Ä—Å–∏–≤–∞" ‚Üí –ø–æ–Ω–∏–º–∞–π –∫–∞–∫ "–ª–µ–∫–∞—Ä—Å—Ç–≤–∞"

–í—Å–µ–≥–¥–∞ –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º! üòä
"""

# --- –ù–ê–°–¢–†–û–ô–ö–ê –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–û–î–ï–õ–ò GEMINI ---
model = None
try:
    if not GEMINI_API_KEY:
        print("!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: API-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.")
    else:
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel(
            model_name='models/gemini-2.0-flash',
            system_instruction=SYSTEM_INSTRUCTION
        )
        print(">>> –ú–æ–¥–µ–ª—å Gemini —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
except Exception as e:
    print(f"!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Gemini. –û—à–∏–±–∫–∞: {e}")

# --- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –¢–ê–†–ò–§–û–í ---
def calculate_delivery_cost(weight: float, product_type: str, city: str):
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞
    product_type_lower = product_type.lower()
    price_per_kg = PRODUCT_TYPES.get(product_type_lower, 2.40)
    
    # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ
    if product_type_lower not in PRODUCT_TYPES:
        for key in PRODUCT_TYPES:
            if key in product_type_lower or product_type_lower in key:
                price_per_kg = PRODUCT_TYPES[key]
                product_type = key
                break
    
    cost_to_almaty_usd = weight * price_per_kg
    cost_to_almaty_kzt = cost_to_almaty_usd * EXCHANGE_RATE
    zone = DESTINATION_ZONES.get(city.lower(), 3)
    zone_rates_kzt = {1: 150, 2: 200, 3: 250, 4: 350, 5: 450}
    delivery_in_kz_kzt = weight * zone_rates_kzt.get(zone, 250)
    total_cost = (cost_to_almaty_kzt + delivery_in_kz_kzt) * 1.20
    
    response_text = (
        f"üìä **–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è {weight} –∫–≥ ¬´{product_type}¬ª –≤ –≥. {city.capitalize()}:**\n\n"
        f"1. **–î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è –¥–æ –ê–ª–º–∞—Ç—ã:**\n"
        f"   - ${price_per_kg}/–∫–≥ √ó {weight} –∫–≥ = ${cost_to_almaty_usd:,.2f} USD\n"
        f"   - –ü–æ –∫—É—Ä—Å—É {EXCHANGE_RATE} —Ç–µ–Ω–≥–µ/$ = {cost_to_almaty_kzt:,.0f} —Ç–µ–Ω–≥–µ\n\n"
        f"2. **–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—É (–ó–æ–Ω–∞ {zone}):**\n"
        f"   - {zone_rates_kzt.get(zone, 250)} —Ç–µ–Ω–≥–µ/–∫–≥ √ó {weight} –∫–≥ = {delivery_in_kz_kzt:,.0f} —Ç–µ–Ω–≥–µ\n\n"
        f"3. **–ö–æ–º–∏—Å—Å–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ (20%):**\n"
        f"   - ({cost_to_almaty_kzt:,.0f} + {delivery_in_kz_kzt:,.0f}) √ó 20% = {(cost_to_almaty_kzt + delivery_in_kz_kzt) * 0.20:,.0f} —Ç–µ–Ω–≥–µ\n\n"
        f"------------------------------------\n"
        f"üí∞ **–ò–¢–û–ì–û:** ‚âà **{total_cost:,.0f} —Ç–µ–Ω–≥–µ**\n\n"
        f"üí° **–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞:** –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ 1% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥—Ä—É–∑–∞\n\n"
        f"–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ –¥–æ—Å—Ç–∞–≤–∫–∏? ‚ú®"
    )
    return response_text.replace(",", " ")

def get_delivery_procedure():
    return """üì¶ **–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:**

1. **–ü—Ä–∏–µ–º –≥—Ä—É–∑–∞ –≤ –ö–∏—Ç–∞–µ:** –í–∞—à –≥—Ä—É–∑ –ø—Ä–∏–±—É–¥–µ—Ç –Ω–∞ –Ω–∞—à —Å–∫–ª–∞–¥ –≤ –ö–∏—Ç–∞–µ (–ò–£ –∏–ª–∏ –ì—É–∞–Ω—á–∂–æ—É)
2. **–û—Å–º–æ—Ç—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞:** –ú—ã –ø—Ä–æ–≤–æ–¥–∏–º –≤–Ω–µ—à–Ω–∏–π –æ—Å–º–æ—Ç—Ä –≥—Ä—É–∑–∞, –≤–∑–≤–µ—à–∏–≤–∞–µ–º, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–µ–º
3. **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:** –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—Å–ª—É–≥–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–µ—à–µ—Ç–∫–∏ (—É–ø–∞–∫–æ–≤–∫–∞ –≤ –∑–∞—â–∏—Ç–Ω—É—é –ø–ª–µ–Ω–∫—É)
4. **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:** –ü—Ä–∏—Å—ã–ª–∞–µ–º –í–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –≥—Ä—É–∑–∞
5. **–û—Ç–ø—Ä–∞–≤–∫–∞:** –ü–æ—Å–ª–µ –í–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–∑ –¥–æ –Ω–∞—à–µ–≥–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –≤ –ê–ª–º–∞—Ç—ã
6. **–ü–æ–ª—É—á–µ–Ω–∏–µ:** –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –≥—Ä—É–∑ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞ –≤ –ê–ª–º–∞—Ç—ã –∏–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –¥–æ –¥–≤–µ—Ä–∏ –ø–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—É

–ï—Å—Ç—å –ª–∏ –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã? üòä"""

def save_application(details):
    try:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"----------------------------------------\n–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: {timestamp}\n{details}\n----------------------------------------\n\n"
        with open("applications.txt", "a", encoding="utf-8") as f: 
            f.write(log_entry)
    except Exception as e: 
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")

# --- –§–£–ù–ö–¶–ò–Ø –û–ë–©–ï–ù–ò–Ø –° –ò–ò ---
def get_gemini_response(user_message, context=""):
    if not model:
        return "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å Gemini –Ω–µ –±—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞."
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
        full_prompt = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞: {user_message}\n\n–¢–≤–æ–π –æ—Ç–≤–µ—Ç:"
        
        response = model.generate_content(
            full_prompt,
            generation_config=GenerationConfig(
                temperature=0.7,
                top_p=0.9,
                top_k=50,
                max_output_tokens=1500,
            )
        )
        return response.text
    except Exception as e:
        print(f"!!! –û–®–ò–ë–ö–ê API –ü–†–ò –ì–ï–ù–ï–†–ê–¶–ò–ò –û–¢–í–ï–¢–ê: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# --- –£–ú–ù–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• ---
def extract_delivery_info(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º –æ—à–∏–±–æ–∫"""
    weight = None
    product_type = None
    city = None
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤–µ—Å–∞
    weight_patterns = [
        r'(\d+(?:\.\d+)?)\s*(?:–∫–≥|kg|–∫–∏–ª–æ–≥—Ä–∞–º–º|–∫–∏–ª–æ|–∫–≥)',
        r'–≤–µ—Å\s*[:\-]?\s*(\d+(?:\.\d+)?)',
        r'(\d+)\s*(?:–∫–∏–ª–æ|–∫–≥)'
    ]
    
    for pattern in weight_patterns:
        weight_match = re.search(pattern, text.lower())
        if weight_match:
            weight = float(weight_match.group(1))
            break
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞ (—Å —É—á–µ—Ç–æ–º –æ–ø–µ—á–∞—Ç–æ–∫)
    text_lower = text.lower()
    for city_name in DESTINATION_ZONES:
        # –ü–æ–∏—Å–∫ —Ç–æ—á–Ω–æ–≥–æ –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        if city_name in text_lower:
            city = city_name
            break
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞ (—Å —É—á–µ—Ç–æ–º –æ–ø–µ—á–∞—Ç–æ–∫)
    product_keywords = {
        '–æ–¥–µ–∂–¥–∞': ['–æ–¥–µ–∂–¥–∞', '–∞–¥–µ–∂–¥–∞', '–æ–¥–µ–∂–¥', '–∫–æ—Ñ—Ç–∞', '—Ñ—É—Ç–±–æ–ª–∫–∞', '–∫—É—Ä—Ç–∫–∞', '–±—Ä—é–∫–∏', '–≤–µ—Ä—Ö–Ω—è—è', '—à—Ç–∞–Ω—ã'],
        '–ª–µ–∫–∞—Ä—Å—Ç–≤–∞': ['–ª–µ–∫–∞—Ä—Å—Ç–≤–∞', '–ª–µ–∫–∞—Ä—Å–∏–≤–∞', '–º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã', '—Ç–∞–±–ª–µ—Ç–∫–∏', '–ø—Ä–µ–ø–∞—Ä–∞—Ç—ã', '–ª–µ–∫–∞—Ä—Å—Ç–≤'],
        '–∫–æ—Å–º–µ—Ç–∏–∫–∞': ['–∫–æ—Å–º–µ—Ç–∏–∫–∞', '–∫—Ä–µ–º', '—à–∞–º–ø—É–Ω—å', '–º–∞–∫–∏—è–∂', '–∫–æ—Å–º–µ—Ç–∫–∞'],
        '—Ç–µ—Ö–Ω–∏–∫–∞': ['—Ç–µ—Ö–Ω–∏–∫–∞', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–Ω–æ—É—Ç–±—É–∫', '–≥–∞–¥–∂–µ—Ç', '—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '—Ç–µ—Ö–Ω–∏–∫'],
        '–º–µ–±–µ–ª—å': ['–º–µ–±–µ–ª—å', '—Å—Ç–æ–ª', '—Å—Ç—É–ª', '–∫—Ä–æ–≤–∞—Ç—å', '—à–∫–∞—Ñ', '–º–µ–±–µ–ª'],
        '–ø–æ—Å—É–¥–∞': ['–ø–æ—Å—É–¥–∞', '–ø–æ—Å—É–¥—É', '—Ç–∞—Ä–µ–ª–∫–∏', '—á–∞—à–∫–∏', '–∫–∞—Å—Ç—Ä—é–ª–∏', '–ø–æ—Å—É–¥–∏'],
        '–æ–±—â–∏–µ —Ç–æ–≤–∞—Ä—ã': ['—Ç–æ–≤–∞—Ä—ã', '—Ç–æ–≤–∞—Ä', '—Ä–∞–∑–Ω–æ–µ', '–ø—Ä–æ—á–µ–µ', '–¥—Ä—É–≥–æ–µ']
    }
    
    for prod_type, keywords in product_keywords.items():
        if any(keyword in text_lower for keyword in keywords):
            product_type = prod_type
            break
    
    return weight, product_type, city

@app.route('/')
def index(): 
    if 'delivery_data' not in session:
        session['delivery_data'] = {'weight': None, 'product_type': None, 'city': None}
    if 'chat_history' not in session:
        session['chat_history'] = []
    return render_template('index.html')

@app.route('/chat', methods=['POST'])
def chat():
    user_message = request.json['message'].strip()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏
    if 'delivery_data' not in session:
        session['delivery_data'] = {'weight': None, 'product_type': None, 'city': None}
    if 'chat_history' not in session:
        session['chat_history'] = []
    
    delivery_data = session['delivery_data']
    chat_history = session['chat_history']
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    chat_history.append(f"–ö–ª–∏–µ–Ω—Ç: {user_message}")
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if user_message.lower() in GREETINGS:
        session['delivery_data'] = {'weight': None, 'product_type': None, 'city': None}
        session['chat_history'] = [f"–ö–ª–∏–µ–Ω—Ç: {user_message}"]
        return jsonify({"response": "–ü—Ä–∏–≤–µ—Ç–∏–∫–∏! ‚ú® –†–∞–¥–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–æ—á–∫—É? üöö"})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –æ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ –¥–æ—Å—Ç–∞–≤–∫–∏
    if any(word in user_message.lower() for word in ['–ø—Ä–æ—Ü–µ–¥—É—Ä', '–ø—Ä–æ—Ü–µ—Å—Å', '–∫–∞–∫ –¥–æ—Å—Ç–∞–≤', '–∫–∞–∫ –ø–æ–ª—É—á', '—Ä–∞—Å—Å–∫–∞–∂–∏ –æ –¥–æ—Å—Ç–∞–≤–∫']):
        return jsonify({"response": get_delivery_procedure()})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–¥–∞–∂–µ —Å –æ—à–∏–±–∫–∞–º–∏)
    cost_keywords = ['—Å–∫–æ–ª–∫–∞', '—Å–∫–æ–ª—å–∫–æ', '—Å—Ç–æ–∏—Ç', '—Å—Ç–æ–∏—Ç—å', '—Å—Ç–æ–µ–º–æ—Å—Ç—å', '—Ü–µ–Ω–∞', '—Ü–µ–Ω—É', '—Ä–∞—Å—á–µ—Ç', '—Ä–∞—Å—Å—á–∏—Ç–∞–π', '–ø–æ—Å—á–∏—Ç–∞–π']
    if any(keyword in user_message.lower() for keyword in cost_keywords):
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        if delivery_data['weight'] and delivery_data['city']:
            if not delivery_data['product_type']:
                delivery_data['product_type'] = "–æ–±—â–∏–µ —Ç–æ–≤–∞—Ä—ã"
            
            session['delivery_data'] = delivery_data
            calculation = calculate_delivery_cost(
                delivery_data['weight'], 
                delivery_data['product_type'], 
                delivery_data['city']
            )
            return jsonify({"response": calculation})
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ
    weight, product_type, city = extract_delivery_info(user_message)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if weight:
        delivery_data['weight'] = weight
    if product_type:
        delivery_data['product_type'] = product_type
    if city:
        delivery_data['city'] = city
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò
    context_lines = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è)
    if len(chat_history) > 0:
        context_lines.append("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:")
        for msg in chat_history[-3:]:
            context_lines.append(msg)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ
    context_lines.append("\n–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:")
    if delivery_data['weight']:
        context_lines.append(f"- –í–µ—Å: {delivery_data['weight']} –∫–≥")
    if delivery_data['product_type']:
        context_lines.append(f"- –¢–æ–≤–∞—Ä: {delivery_data['product_type']}")
    if delivery_data['city']:
        context_lines.append(f"- –ì–æ—Ä–æ–¥: {delivery_data['city']}")
    
    context = "\n".join(context_lines)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
    bot_response = get_gemini_response(user_message, context)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    chat_history.append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {bot_response}")
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if len(chat_history) > 10:
        chat_history = chat_history[-10:]
    
    session['chat_history'] = chat_history
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    if bot_response.strip().startswith("[–ó–ê–Ø–í–ö–ê]"):
        details = bot_response.replace("[–ó–ê–Ø–í–ö–ê]", "").strip()
        save_application(details)
        session['delivery_data'] = {'weight': None, 'product_type': None, 'city': None}
        session['chat_history'] = []
        return jsonify({"response": "–ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ –∑–∞—è–≤–æ—á–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! ‚ú® –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è."})
    
    if bot_response.strip().startswith("[–ü–†–û–¶–ï–î–£–†–ê]"):
        return jsonify({"response": get_delivery_procedure()})
    
    # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –†–ê–°–ß–ï–¢ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    if delivery_data['weight'] and delivery_data['city']:
        if not delivery_data['product_type']:
            delivery_data['product_type'] = "–æ–±—â–∏–µ —Ç–æ–≤–∞—Ä—ã"
        
        # –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –ò–ò –Ω–µ—Ç —Ä–∞—Å—á–µ—Ç–∞, –Ω–æ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å - –¥–µ–ª–∞–µ–º —Ä–∞—Å—á–µ—Ç
        if "—Ä–∞—Å—á–µ—Ç" not in bot_response.lower() and "—Å—Ç–æ–∏–º–æ—Å—Ç—å" not in bot_response.lower():
            calculation = calculate_delivery_cost(
                delivery_data['weight'], 
                delivery_data['product_type'], 
                delivery_data['city']
            )
            return jsonify({"response": calculation})
    
    return jsonify({"response": bot_response})

def get_local_ip():
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π IP –∞–¥—Ä–µ—Å"""
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
        s.close()
        return ip
    except:
        return "127.0.0.1"

if __name__ == '__main__':
    local_ip = get_local_ip()
    
    print("üéâ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print(f"üì± –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏: http://{local_ip}:5000")
    print("")
    print("üîó –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –î–†–£–ì–ê (–∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞):")
    print("   1. –û—Ç–∫—Ä–æ–π –ù–û–í–û–ï –æ–∫–Ω–æ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏")
    print("   2. –í—ã–ø–æ–ª–Ω–∏: ssh -R 80:localhost:5000 serveo.net")
    print("   3. –ù–∞ –≤–æ–ø—Ä–æ—Å 'Are you sure...' –Ω–∞–ø–∏—à–∏: yes")
    print("   4. –°–∫–æ–ø–∏—Ä—É–π –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å –¥—Ä—É–≥—É")
    print("")
    print("‚èπÔ∏è  –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: Ctrl+C")
    print("")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    app.run(debug=True, host='0.0.0.0', port=5000)
