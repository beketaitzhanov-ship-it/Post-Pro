from flask import Flask, render_template, request, jsonify, session
import os
import re
from datetime import datetime
import google.generativeai as genai
from google.generativeai.types import GenerationConfig
from dotenv import load_dotenv
import socket
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
GEMINI_API_KEY = os.getenv("GOOGLE_API_KEY")

app = Flask(__name__)
app.secret_key = 'postpro-secret-key-2024'
app.config['PERMANENT_SESSION_LIFETIME'] = 1800

# --- –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ë–ê–ó–ê –î–ê–ù–ù–´–• ---
DESTINATION_ZONES = {
    "—Ç–∞–ª–¥—ã–∫–æ—Ä–≥–∞–Ω": 1, "–∫–æ–Ω–∞–µ–≤": 1, "—Ç–µ–∫–µ–ª–∏": 1, "–∫–∞–ø—á–∞–≥–∞–π": 1, "–µ—Å–∏–∫": 1, "—Ç–∞–ª–≥–∞—Ä": 1, "–∫–∞—Å–∫–µ–ª–µ–Ω": 1, 
    "–∂–∞—Ä–∫–µ–Ω—Ç": 1, "—Å–∞—Ä–∫–∞–Ω–¥": 1, "–∞–∫—Å—É": 1, "–∞–ª–º–∞—Ç—ã": 1, "–∞–ª–º–∞—Ç–∞": 1,
    "—Ç–∞—Ä–∞–∑": 2, "—à—ã–º–∫–µ–Ω—Ç": 2, "—Ç—É—Ä–∫–µ—Å—Ç–∞–Ω": 2, "–∞—É–ª–∏–µ–∞—Ç–∞": 2, "–∫–æ—Ä–¥–∞–π": 2, "–º–µ—Ä–∫–µ": 2, "–º–æ–π—ã–Ω–∫—É–º": 2, 
    "–∂–∞–Ω–∞—Ç–∞—Å": 2, "–∫–∞—Ä–∞—Ç–∞—É": 2, "—à—É": 2, "–∫–µ–Ω—Ç": 2,
    "–∞—Å—Ç–∞–Ω–∞": 3, "–∫–æ–∫—à–µ—Ç–∞—É": 3, "—Å—Ç–µ–ø–Ω–æ–≥–æ—Ä—Å–∫": 3, "–∞—Ç–±–∞—Å–∞—Ä": 3, "–µ—Ä–µ–º–µ–Ω—Ç–∞—É": 3, "–º–∞–∫–∏–Ω—Å–∫": 3, 
    "–∫–∞—Ä–∞–≥–∞–Ω–¥–∞": 3, "–±–∞–ª—Ö–∞—à": 3, "—Ç–µ–º–∏—Ä—Ç–∞—É": 3, "—à–∞—Ö—Ç–∏–Ω—Å–∫": 3, "–∂–µ–∑–∫–∞–∑–≥–∞–Ω": 3, "—Å–∞—Ç–ø–∞–µ–≤": 3, 
    "–∫—ã–∑—ã–ª–æ—Ä–¥–∞": 3, "–∫–∞–∑–∞–ª—ã–Ω—Å–∫": 3, "–∂–∞–Ω–∞–∫–æ—Ä–≥–∞–Ω": 3, "–ø–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫": 3, "–ø–∞–≤–ª–æ–¥–∞—Ä": 3, "—ç–∫–∏–±–∞—Å—Ç—É–∑": 3, 
    "–∫–æ—Å—Ç–∞–Ω–∞–π": 3, "—Ä—É–¥–Ω—ã–π": 3, "—Å–µ–º–µ–π": 3, "–∫—É—Ä—á–∞—Ç–æ–≤": 3, "–∞—è–≥–æ–∑": 3,
    "–∞–∫—Ç–æ–±–µ": 4, "—Ö—Ä–æ–º—Ç–∞—É": 4, "—à–∞–ª–∫–∞—Ä": 4, "—É—Ä–∞–ª—å—Å–∫": 4, "–∞–∫—Å–∞–π": 4, "—á–∏–Ω–≥–∏—Ä–ª–∞—É": 4,
    "–∞—Ç—ã—Ä–∞—É": 5, "–∫—É–ª—å—Å–∞—Ä—ã": 5, "–∞–∫—Ç–∞—É": 5, "–∂–∞–Ω–∞–æ–∑–µ–Ω": 5, "–±–µ–π–Ω–µ—É": 5
}

EXCHANGE_RATE = 550

# –¢–ê–†–ò–§–´
T1_RATES = {  # –ö–∏—Ç–∞–π ‚Üí –ê–ª–º–∞—Ç—ã (USD/–∫–≥)
    "—Ç–∫–∞–Ω–∏": 1.70, "–æ–¥–µ–∂–¥–∞": 1.70, "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã": 2.10, "–æ–±—â–∏–µ —Ç–æ–≤–∞—Ä—ã": 2.40, "–º–µ–±–µ–ª—å": 2.10, 
    "–∫–æ—Å–º–µ—Ç–∏–∫–∞": 2.30, "–∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏": 2.40, "–º–∞–ª–∞—è —Ç–µ—Ö–Ω–∏–∫–∞": 2.50, "–ø—Ä–æ–¥—É–∫—Ç—ã": 2.70, 
    "–±–µ–ª—å–µ": 2.80, "–ª–µ–∫–∞—Ä—Å—Ç–≤–∞": 2.90, "–ª–µ–∫–∞—Ä—Å–∏–≤–∞": 2.90, "–º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã": 2.90, "–ø–æ—Å—É–¥–∞": 2.20,
    "—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞": 2.60, "—Å–º–∞—Ä—Ç—Ñ–æ–Ω—ã": 2.80, "–∏–≥—Ä—É—à–∫–∏": 2.20, "–∑–∞–ø—á–∞—Å—Ç–∏": 2.40
}

T2_RATES = {  # –ê–ª–º–∞—Ç—ã ‚Üí –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (—Ç–µ–Ω–≥–µ/–∫–≥)
    "–∞–ª–º–∞—Ç—ã": 120,     # –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É –ê–ª–º–∞—Ç—ã
    1: 150,            # –ó–æ–Ω–∞ 1 (–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å)
    2: 200,            # –ó–æ–Ω–∞ 2 (–Æ–∂–Ω—ã–π –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω)
    3: 250,            # –ó–æ–Ω–∞ 3 (–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∏ –°–µ–≤–µ—Ä–Ω—ã–π –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω)
    4: 350,            # –ó–æ–Ω–∞ 4 (–ó–∞–ø–∞–¥–Ω—ã–π –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω)
    5: 450             # –ó–æ–Ω–∞ 5 (–ü—Ä–∏–∫–∞—Å–ø–∏–π—Å–∫–∏–π —Ä–µ–≥–∏–æ–Ω)
}

# –¢–∞–º–æ–∂–µ–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ)
CUSTOMS_CLEARANCE_FEE = 15000  # —Ç–µ–Ω–≥–µ
CUSTOMS_DUTY_RATES = {
    "default": 0.10,  # 10% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    "electronics": 0.05,  # 5% –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏
    "clothes": 0.15,  # 15% –¥–ª—è –æ–¥–µ–∂–¥—ã
}
VAT_RATE = 0.12  # 12% –ù–î–°
CERTIFICATE_OF_ORIGIN_COST = 500  # USD
CERTIFICATE_OF_CONFORMITY_COST = 120000  # —Ç–µ–Ω–≥–µ

GREETINGS = ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "—Å–∞–ª–µ–º", "—Å”ô–ª–µ–º", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ"]

# --- –°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢ ---
SYSTEM_INSTRUCTION = """
–¢—ã ‚Äî —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ PostPro. –¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å –∫–ª–∏–µ–Ω—Ç—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.

***–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:***

1. **–¢–ò–ü–´ –î–û–°–¢–ê–í–ö–ò:**
   - –ö–ê–†–ì–û: —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –¥–ª—è –ª–∏—á–Ω—ã—Ö –≤–µ—â–µ–π, –ø—Ä–æ–±–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π
   - –ò–ù–í–û–ô–°: –ø–æ–ª–Ω–æ–µ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø–∞—Ä—Ç–∏–π

2. **–°–ö–õ–ê–î–´ –í –ö–ò–¢–ê–ï:** –£ –Ω–∞—Å —Ç–æ–ª—å–∫–æ 2 —Å–∫–ª–∞–¥–∞ - –ò–£ –∏ –ì—É–∞–Ω—á–∂–æ—É.

3. **–¢–ê–†–ò–§–´:**
   - –¢1: –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è –¥–æ –ê–ª–º–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–æ —Å–∫–ª–∞–¥–∞, —Å–∞–º–æ–≤—ã–≤–æ–∑)
   - –¢2: –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –¥–≤–µ—Ä–∏ –≤ –õ–Æ–ë–û–ú –≥–æ—Ä–æ–¥–µ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞

4. **–¢–ê–ú–û–ñ–ï–ù–ù–û–ï –û–§–û–†–ú–õ–ï–ù–ò–ï:**
   - –ü–æ–º–æ–≥–∞–π –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∫–æ–¥—ã –¢–ù –í–≠–î
   - –û–±—ä—è—Å–Ω—è–π —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   - –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–π —Ç–∞–º–æ–∂–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏

5. **–û–ü–õ–ê–¢–ê:**
   - –£ –Ω–∞—Å –ø–æ—Å—Ç-–æ–ø–ª–∞—Ç–∞: –≤—ã –ø–ª–∞—Ç–∏—Ç–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–∑–∞
   - –§–æ—Ä–º–∞—Ç—ã –æ–ø–ª–∞—Ç—ã: –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç, –Ω–∞–ª–∏—á–Ω—ã–µ, Kaspi, Halyk, Freedom Bank

–í—Å–µ–≥–¥–∞ –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º! üòä
"""

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–û–î–ï–õ–ò ---
model = None
try:
    if GEMINI_API_KEY:
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel(
            model_name='models/gemini-2.0-flash',
            system_instruction=SYSTEM_INSTRUCTION
        )
        logger.info(">>> –ú–æ–¥–µ–ª—å Gemini —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    else:
        logger.error("!!! API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
except Exception as e:
    logger.error(f"!!! –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini: {e}")

# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø TNVED –ò –¢–ê–ú–û–ñ–ù–ò ---
def get_tnved_code_info(product_name, tnved_code=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–¥–µ –¢–ù –í–≠–î —á–µ—Ä–µ–∑ Gemini"""
    if not model:
        return "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    
    try:
        if tnved_code:
            prompt = f"""–¢–æ–≤–∞—Ä: {product_name}
–ö–æ–¥ –¢–ù –í–≠–î: {tnved_code}

–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –¢–ù –í–≠–î –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
1. –°—Ç–∞–≤–∫—É —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–π –ø–æ—à–ª–∏–Ω—ã (%)
2. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
3. –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
4. –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã

–û—Ç–≤–µ—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ."""
        else:
            prompt = f"""–¢–æ–≤–∞—Ä: {product_name}

–ù–∞–π–¥–∏ 2-3 –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö –∫–æ–¥–∞ –¢–ù –í–≠–î –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–¥–∞ —É–∫–∞–∂–∏:
1. –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞
2. –ü—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–∞–≤–∫—É –ø–æ—à–ª–∏–Ω—ã
3. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ø–∏—Å–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."""
        
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Gemini –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¢–ù –í–≠–î: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–¥–µ –¢–ù –í–≠–î"

def calculate_customs_costs(product_value_usd, weight, tnved_code, has_origin_certificate, delivery_cost_usd):
    """–†–∞—Å—á–µ—Ç —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
    try:
        # –¢–∞–º–æ–∂–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ + –¥–æ—Å—Ç–∞–≤–∫–∞ –¢1)
        customs_value_usd = product_value_usd + delivery_cost_usd
        customs_value_kzt = customs_value_usd * EXCHANGE_RATE
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–≤–∫—É –ø–æ—à–ª–∏–Ω—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        duty_rate = CUSTOMS_DUTY_RATES.get("default", 0.10)
        if "—ç–ª–µ–∫—Ç—Ä–æ" in tnved_code.lower() or "85" in tnved_code:
            duty_rate = CUSTOMS_DUTY_RATES.get("electronics", 0.05)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è
        if has_origin_certificate == "–î–∞":
            duty_rate *= 0.75  # 25% —Å–∫–∏–¥–∫–∞
        
        # –†–∞—Å—á–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π
        customs_duty = customs_value_kzt * duty_rate
        customs_fee = CUSTOMS_CLEARANCE_FEE
        vat_base = customs_value_kzt + customs_duty
        vat = vat_base * VAT_RATE
        
        total_customs = customs_duty + customs_fee + vat
        
        return {
            'customs_value_usd': customs_value_usd,
            'customs_value_kzt': customs_value_kzt,
            'duty_rate': duty_rate,
            'customs_duty': customs_duty,
            'customs_fee': customs_fee,
            'vat': vat,
            'total_customs': total_customs
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        return None

# --- –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –§–£–ù–ö–¶–ò–ò –†–ê–°–ß–ï–¢–ê (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ) ---
def calculate_quick_cost(weight: float, product_type: str, city: str):
    """–ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –ö–ê–†–ì–û"""
    try:
        # –¢1: –ö–∏—Ç–∞–π ‚Üí –ê–ª–º–∞—Ç—ã
        product_type_lower = product_type.lower()
        t1_rate = T1_RATES.get(product_type_lower, 2.40)
        t1_cost_usd = weight * t1_rate
        
        # –¢2: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞—Ä–∏—Ñ –¥–ª—è –≥–æ—Ä–æ–¥–∞
        city_lower = city.lower()
        if city_lower == "–∞–ª–º–∞—Ç—ã" or city_lower == "–∞–ª–º–∞—Ç–∞":
            t2_rate = T2_RATES["–∞–ª–º–∞—Ç—ã"]
            zone = "–∞–ª–º–∞—Ç—ã"
        else:
            zone = DESTINATION_ZONES.get(city_lower, 3)
            t2_rate = T2_RATES.get(zone, 250)
        
        t2_cost_kzt = weight * t2_rate
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (–¢1 + –¢2 + 20% –∫–æ–º–∏—Å—Å–∏—è)
        total_cost_usd = t1_cost_usd * 1.20
        total_cost_kzt = (t1_cost_usd * EXCHANGE_RATE + t2_cost_kzt) * 1.20
        
        return {
            't1_cost_usd': t1_cost_usd,
            't2_cost_kzt': t2_cost_kzt,
            'total_usd': total_cost_usd,
            'total_kzt': total_cost_kzt,
            'zone': zone,
            't2_rate': t2_rate
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        return None

def get_delivery_procedure():
    return """üì¶ **–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:**

1. **–ü—Ä–∏–µ–º –≥—Ä—É–∑–∞ –≤ –ö–∏—Ç–∞–µ:** –í–∞—à –≥—Ä—É–∑ –ø—Ä–∏–±—É–¥–µ—Ç –Ω–∞ –Ω–∞—à —Å–∫–ª–∞–¥ –≤ –ö–∏—Ç–∞–µ (–ò–£ –∏–ª–∏ –ì—É–∞–Ω—á–∂–æ—É)
2. **–û—Å–º–æ—Ç—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞:** –í–∑–≤–µ—à–∏–≤–∞–µ–º, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–µ–º, —É–ø–∞–∫–æ–≤—ã–≤–∞–µ–º
3. **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:** –ü—Ä–∏—Å—ã–ª–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≥—Ä—É–∑–∞
4. **–û—Ç–ø—Ä–∞–≤–∫–∞:** –î–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ –ê–ª–º–∞—Ç—ã (–¢1) –∏–ª–∏ –¥–æ –¥–≤–µ—Ä–∏ (–¢2)
5. **–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–ø–ª–∞—Ç–∞:** –ó–∞–±–∏—Ä–∞–µ—Ç–µ –≥—Ä—É–∑ –∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º

üí≥ **–û–ø–ª–∞—Ç–∞:** –ø–æ—Å—Ç-–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ (–Ω–∞–ª–∏—á–Ω—ã–µ, Kaspi, Halyk, Freedom Bank, –±–µ–∑–Ω–∞–ª)"""

def save_application(details):
    try:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: {timestamp}\n{details}\n"
        with open("applications.txt", "a", encoding="utf-8") as f: 
            f.write("="*50 + "\n" + log_entry + "="*50 + "\n\n")
        logger.info(f"–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {details}")
    except Exception as e: 
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def extract_delivery_info(text):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Å—Ç–∞–≤–∫–µ"""
    weight = None
    product_type = None
    city = None
    
    try:
        # –ü–æ–∏—Å–∫ –≤–µ—Å–∞
        weight_patterns = [
            r'(\d+(?:\.\d+)?)\s*(?:–∫–≥|kg|–∫–∏–ª–æ–≥—Ä–∞–º–º|–∫–∏–ª–æ)',
            r'–≤–µ—Å\s*[:\-]?\s*(\d+(?:\.\d+)?)',
        ]
        
        for pattern in weight_patterns:
            match = re.search(pattern, text.lower())
            if match:
                weight = float(match.group(1))
                break
        
        # –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞
        text_lower = text.lower()
        for city_name in DESTINATION_ZONES:
            if city_name in text_lower:
                city = city_name
                break
        
        # –ü–æ–∏—Å–∫ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
        product_keywords = {
            '–æ–¥–µ–∂–¥–∞': ['–æ–¥–µ–∂–¥–∞', '–∞–¥–µ–∂–¥–∞', '–æ–¥–µ–∂–¥'],
            '–ª–µ–∫–∞—Ä—Å—Ç–≤–∞': ['–ª–µ–∫–∞—Ä—Å—Ç–≤–∞', '–ª–µ–∫–∞—Ä—Å–∏–≤–∞', '–º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã'],
            '–∫–æ—Å–º–µ—Ç–∏–∫–∞': ['–∫–æ—Å–º–µ—Ç–∏–∫–∞', '–∫—Ä–µ–º', '—à–∞–º–ø—É–Ω—å', '–º–∞–∫–∏—è–∂'],
            '—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞': ['—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '—Å–º–∞—Ä—Ç—Ñ–æ–Ω', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–Ω–æ—É—Ç–±—É–∫', '–≥–∞–¥–∂–µ—Ç', '—á–∞–π–Ω–∏–∫', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π'],
            '–º–µ–±–µ–ª—å': ['–º–µ–±–µ–ª—å', '—Å—Ç–æ–ª', '—Å—Ç—É–ª', '–∫—Ä–æ–≤–∞—Ç—å'],
            '–ø–æ—Å—É–¥–∞': ['–ø–æ—Å—É–¥–∞', '—Ç–∞—Ä–µ–ª–∫–∏', '—á–∞—à–∫–∏'],
            '–∏–≥—Ä—É—à–∫–∏': ['–∏–≥—Ä—É—à–∫–∏', '–∏–≥—Ä—É—à–µ–∫', '–¥–µ—Ç—Å–∫–∏–µ'],
            '–æ–±—â–∏–µ —Ç–æ–≤–∞—Ä—ã': ['—Ç–æ–≤–∞—Ä—ã', '—Ç–æ–≤–∞—Ä', '—Ä–∞–∑–Ω–æ–µ', '–ø—Ä–æ—á–µ–µ']
        }
        
        for prod_type, keywords in product_keywords.items():
            if any(keyword in text_lower for keyword in keywords):
                product_type = prod_type
                break
        
        return weight, product_type, city
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, None, None

def extract_contact_info(text):
    """–£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    name = None
    phone = None
    
    clean_text = re.sub(r'\s+', ' ', text.strip()).lower()
    
    # –ü–æ–∏—Å–∫ –∏–º–µ–Ω–∏
    name_match = re.search(r'^([–∞-—èa-z]{2,})', clean_text)
    if name_match:
        name = name_match.group(1).capitalize()
    
    # –ü–æ–∏—Å–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone_patterns = [
        r'(\d{10,11})',
        r'(\d{3}[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2})',
        r'(\d{3}[\s\-]?\d{2}[\s\-]?\d{2}[\s\-]?\d{3})',
    ]
    
    for pattern in phone_patterns:
        phone_match = re.search(pattern, clean_text)
        if phone_match:
            phone = re.sub(r'\D', '', phone_match.group(1))
            if phone.startswith('8'):
                phone = '7' + phone[1:]
            elif len(phone) == 10:
                phone = '7' + phone
            break
    
    if name and phone and len(phone) >= 10:
        return name, phone
    
    if phone and not name:
        name_before_comma = re.search(r'^([–∞-—èa-z]+)\s*[,]', clean_text)
        if name_before_comma:
            name = name_before_comma.group(1).capitalize()
    
    return name, phone

# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ò–ù–í–û–ô–° –†–ê–°–ß–ï–¢–ê ---
def generate_invoice_calculation(product_name, tnved_code, product_value_usd, weight, volume, country, origin_certificate, city):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –∏–Ω–≤–æ–π—Å–∞"""
    try:
        # –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –¢1
        product_type_lower = product_name.lower()
        t1_rate = T1_RATES.get(product_type_lower, 2.40)
        t1_cost_usd = weight * t1_rate
        
        # –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –¢2
        city_lower = city.lower()
        if city_lower == "–∞–ª–º–∞—Ç—ã" or city_lower == "–∞–ª–º–∞—Ç–∞":
            t2_rate = T2_RATES["–∞–ª–º–∞—Ç—ã"]
        else:
            zone = DESTINATION_ZONES.get(city_lower, 3)
            t2_rate = T2_RATES.get(zone, 250)
        
        t2_cost_kzt = weight * t2_rate
        
        # –†–∞—Å—á–µ—Ç —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        customs_costs = calculate_customs_costs(product_value_usd, weight, tnved_code, origin_certificate, t1_cost_usd)
        
        if not customs_costs:
            return "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
        additional_services = []
        additional_costs = 0
        
        if origin_certificate == "–ù–µ—Ç, –Ω–æ –Ω—É–∂–µ–Ω":
            additional_services.append(f"‚Ä¢ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è: {CERTIFICATE_OF_ORIGIN_COST} USD")
            additional_costs += CERTIFICATE_OF_ORIGIN_COST * EXCHANGE_RATE
        
        # –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è (–ø—Ä–∏–º–µ—Ä–Ω–æ –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏)
        if "—ç–ª–µ–∫—Ç—Ä–æ" in product_name.lower():
            additional_services.append(f"‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: {CERTIFICATE_OF_CONFORMITY_COST:,} ‚Ç∏")
            additional_costs += CERTIFICATE_OF_CONFORMITY_COST
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±–æ–ª—å—à–∏—Ö —Å—É–º–º–∞—Ö
        warning = ""
        if product_value_usd > 50000:
            warning = "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï:** –°—É–º–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç $50,000. –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ù–∞—Ü–±–∞–Ω–∫–µ –†–ö.\n\n"
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response = f"""üìä **–†–ê–°–ß–ï–¢ –î–õ–Ø: {product_name} (–ö–æ–¥ –¢–ù –í–≠–î: {tnved_code})**

{warning}**1. –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:**
‚Ä¢ –¢–∞—Ä–∏—Ñ –¢1 –¥–æ –ê–ª–º–∞—Ç—ã ({weight} –∫–≥ √ó ${t1_rate:.2f}/–∫–≥): **${t1_cost_usd:.2f}**
‚Ä¢ –¢–∞—Ä–∏—Ñ –¢2 –¥–æ {city.capitalize()} ({weight} –∫–≥ √ó {t2_rate} ‚Ç∏/–∫–≥): **{t2_cost_kzt:,} ‚Ç∏**

**2. –¢–∞–º–æ–∂–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:**
‚Ä¢ –¢–∞–º–æ–∂–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${customs_costs['customs_value_usd']:.2f} ({customs_costs['customs_value_kzt']:,} ‚Ç∏)
‚Ä¢ –¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞ ({customs_costs['duty_rate']*100:.1f}%): {customs_costs['customs_duty']:,.0f} ‚Ç∏
‚Ä¢ –°–±–æ—Ä –∑–∞ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: {customs_costs['customs_fee']:,} ‚Ç∏
‚Ä¢ –ù–î–° (12%): {customs_costs['vat']:,.0f} ‚Ç∏
‚Ä¢ **–ò—Ç–æ–≥–æ —Ç–∞–º–æ–∂–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏: {customs_costs['total_customs']:,.0f} ‚Ç∏**

**3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:**
{chr(10).join(additional_services) if additional_services else "‚Ä¢ –ù–µ—Ç"}

**–û–ë–©–ê–Ø –ü–†–ò–ë–õ–ò–ó–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨:**
‚Ä¢ **–î–æ—Å—Ç–∞–≤–∫–∞: ${t1_cost_usd:.2f} + {t2_cost_kzt:,} ‚Ç∏**
‚Ä¢ **–¢–∞–º–æ–∂–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏: {customs_costs['total_customs']:,.0f} ‚Ç∏**
‚Ä¢ **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {additional_costs:,} ‚Ç∏**

**üíé –ò–¢–û–ì–û: ~${t1_cost_usd + additional_costs/EXCHANGE_RATE:.2f} USD / ~{t1_cost_usd * EXCHANGE_RATE + t2_cost_kzt + customs_costs['total_customs'] + additional_costs:,.0f} ‚Ç∏**

---

**üìã –í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:**

**–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:**
‚úÖ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –∏–Ω–≤–æ–π—Å
‚úÖ –£–ø–∞–∫–æ–≤–æ—á–Ω—ã–π –ª–∏—Å—Ç  
‚úÖ –í–Ω–µ—à–Ω–µ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç

**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
‚ö†Ô∏è –î–ª—è –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
‚ö†Ô∏è –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∫–∞–∑–∞—Ö—Å–∫–æ–º —è–∑—ã–∫–∞—Ö
‚ö†Ô∏è –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ –°–í–• ‚Äî 2 –º–µ—Å—è—Ü–∞

**‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞—à–µ–º—É —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–º—É –±—Ä–æ–∫–µ—Ä—É.**
**üìû –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.**"""
        
        return response
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–≤–æ–π—Å–∞: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

# --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ï ROUTES ---
@app.route('/')
def index(): 
    if 'delivery_data' not in session:
        session['delivery_data'] = {'weight': None, 'product_type': None, 'city': None, 'delivery_type': None}
    if 'invoice_data' not in session:
        session['invoice_data'] = {'product_name': None, 'tnved_code': None, 'product_value': None, 'weight': None, 'volume': None, 'country': '–ö–∏—Ç–∞–π', 'origin_certificate': None}
    if 'chat_history' not in session:
        session['chat_history'] = []
    if 'waiting_for_contacts' not in session:
        session['waiting_for_contacts'] = False
    if 'waiting_for_invoice_data' not in session:
        session['waiting_for_invoice_data'] = False
    if 'current_step' not in session:
        session['current_step'] = 'start'
    
    return render_template('index.html')

@app.route('/chat', methods=['POST'])
def chat():
    try:
        user_message = request.json.get('message', '').strip()
        if not user_message:
            return jsonify({"response": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."})
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–π
        delivery_data = session.get('delivery_data', {'weight': None, 'product_type': None, 'city': None, 'delivery_type': None})
        invoice_data = session.get('invoice_data', {'product_name': None, 'tnved_code': None, 'product_value': None, 'weight': None, 'volume': None, 'country': '–ö–∏—Ç–∞–π', 'origin_certificate': None})
        chat_history = session.get('chat_history', [])
        waiting_for_contacts = session.get('waiting_for_contacts', False)
        waiting_for_invoice_data = session.get('waiting_for_invoice_data', False)
        current_step = session.get('current_step', 'start')
        
        chat_history.append(f"–ö–ª–∏–µ–Ω—Ç: {user_message}")
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        if user_message.lower() in GREETINGS or current_step == 'start':
            session.update({
                'delivery_data': {'weight': None, 'product_type': None, 'city': None, 'delivery_type': None},
                'invoice_data': {'product_name': None, 'tnved_code': None, 'product_value': None, 'weight': None, 'volume': None, 'country': '–ö–∏—Ç–∞–π', 'origin_certificate': None},
                'chat_history': [f"–ö–ª–∏–µ–Ω—Ç: {user_message}"],
                'waiting_for_contacts': False,
                'waiting_for_invoice_data': False,
                'current_step': 'greeting'
            })
            response = """–ü—Ä–∏–≤–µ—Ç! üëã –Ø –≤–∞—à –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ Post Pro.
üöö –†–∞—Å—Å—á–∏—Ç–∞—é –¥–æ—Å—Ç–∞–≤–∫—É –∏–∑ –ö–∏—Ç–∞—è –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω:

üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ:
- –í–µ—Å –≥—Ä—É–∑–∞
- –¢–∏–ø —Ç–æ–≤–∞—Ä–∞  
- –ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏

–ò —è —Å—Ä–∞–∑—É –ø–æ–∫–∞–∂—É —Ä–∞—Å—á–µ—Ç! ‚ú®"""
            chat_history.append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {response}")
            session['current_step'] = 'awaiting_delivery_info'
            return jsonify({"response": response})
        
        # –ï—Å–ª–∏ –∂–¥–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
        if waiting_for_contacts:
            name, phone = extract_contact_info(user_message)
            
            if name and phone:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏
                details = f"–ò–º—è: {name}, –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
                if delivery_data['weight']:
                    details += f", –í–µ—Å: {delivery_data['weight']} –∫–≥"
                if delivery_data['product_type']:
                    details += f", –¢–æ–≤–∞—Ä: {delivery_data['product_type']}"
                if delivery_data['city']:
                    details += f", –ì–æ—Ä–æ–¥: {delivery_data['city']}"
                if delivery_data['delivery_type']:
                    details += f", –¢–∏–ø: {delivery_data['delivery_type']}"
                
                save_application(details)
                
                # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
                session.update({
                    'delivery_data': {'weight': None, 'product_type': None, 'city': None, 'delivery_type': None},
                    'invoice_data': {'product_name': None, 'tnved_code': None, 'product_value': None, 'weight': None, 'volume': None, 'country': '–ö–∏—Ç–∞–π', 'origin_certificate': None},
                    'chat_history': [],
                    'waiting_for_contacts': False,
                    'waiting_for_invoice_data': False,
                    'current_step': 'start'
                })
                
                return jsonify({"response": "üéâ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ Post Pro! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç. üìû"})
            else:
                return jsonify({"response": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–ò–º—è, 87001234567'"})
        
        # –ï—Å–ª–∏ –∂–¥–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–≤–æ–π—Å–∞
        if waiting_for_invoice_data:
            current_step = session.get('invoice_current_step', 'product_name')
            
            if current_step == 'product_name':
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ –∫–æ–¥ –¢–ù –í–≠–î
                if ',' in user_message:
                    parts = user_message.split(',')
                    invoice_data['product_name'] = parts[0].strip()
                    invoice_data['tnved_code'] = parts[1].strip() if len(parts) > 1 else None
                else:
                    invoice_data['product_name'] = user_message
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –¢–ù –í–≠–î —á–µ—Ä–µ–∑ Gemini
                if invoice_data['tnved_code']:
                    tnved_info = get_tnved_code_info(invoice_data['product_name'], invoice_data['tnved_code'])
                    response = f"‚úÖ –ö–æ–¥ –¢–ù –í–≠–î {invoice_data['tnved_code']} –¥–ª—è {invoice_data['product_name']} –ø—Ä–æ–≤–µ—Ä–µ–Ω.\n\n{tnved_info}\n\n2. –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –ø–æ –∏–Ω–≤–æ–π—Å—É (USD):"
                    session['invoice_current_step'] = 'product_value'
                else:
                    tnved_info = get_tnved_code_info(invoice_data['product_name'])
                    response = f"üîç –î–ª—è —Ç–æ–≤–∞—Ä–∞ '{invoice_data['product_name']}' —è –Ω–∞—à–µ–ª –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–¥—ã –¢–ù –í–≠–î:\n\n{tnved_info}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π:"
                    session['invoice_current_step'] = 'tnved_code'
                
                session['invoice_data'] = invoice_data
                chat_history.append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {response}")
                return jsonify({"response": response})
            
            elif current_step == 'tnved_code':
                invoice_data['tnved_code'] = user_message
                tnved_info = get_tnved_code_info(invoice_data['product_name'], invoice_data['tnved_code'])
                response = f"‚úÖ –ö–æ–¥ –¢–ù –í–≠–î {invoice_data['tnved_code']} –ø—Ä–∏–Ω—è—Ç.\n\n{tnved_info}\n\n2. –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –ø–æ –∏–Ω–≤–æ–π—Å—É (USD):"
                session['invoice_current_step'] = 'product_value'
                session['invoice_data'] = invoice_data
                chat_history.append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {response}")
                return jsonify({"response": response})
            
            elif current_step == 'product_value':
                try:
                    value = float(re.search(r'(\d+(?:\.\d+)?)', user_message).group(1))
                    invoice_data['product_value'] = value
                    
                    if value > 50000:
                        warning = "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –°—É–º–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç $50,000. –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ù–∞—Ü–±–∞–Ω–∫–µ –†–ö.\n\n"
                    else:
                        warning = ""
                    
                    response = f"{warning}3. –í–µ—Å –±—Ä—É—Ç—Ç–æ (–∫–≥):"
                    session['invoice_current_step'] = 'weight'
                    session['invoice_data'] = invoice_data
                    chat_history.append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {response}")
                    return jsonify({"response": response})
                except:
                    return jsonify({"response": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ USD:"})
            
            elif current_step == 'weight':
                try:
                    weight = float(re.search(r'(\d+(?:\.\d+)?)', user_message).group(1))
                    invoice_data['weight'] = weight
                    response = "4. –û–±—ä–µ–º (–º¬≥):"
                    session['invoice_current_step'] = 'volume'
                    session['invoice_data'] = invoice_data
                    chat_history.append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {response}")
                    return jsonify({"response": response})
                except:
                    return jsonify({"response": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –≤ –∫–≥:"})
            
            elif current_step == 'volume':
                try:
                    volume = float(re.search(r'(\d+(?:\.\d+)?)', user_message).group(1))
                    invoice_data['volume'] = volume
                    response = "5. –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:\n(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ö–∏—Ç–∞–π) –£—Ç–æ—á–Ω–∏—Ç–µ, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –¥—Ä—É–≥–∞—è:"
                    session['invoice_current_step'] = 'country'
                    session['invoice_data'] = invoice_data
                    chat_history.append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {response}")
                    return jsonify({"response": response})
                except:
                    return jsonify({"response": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–º –≤ –º¬≥:"})
            
            elif current_step == 'country':
                if user_message.lower() not in ['–∫–∏—Ç–∞–π', 'china', '']:
                    invoice_data['country'] = user_message
                response = "6. –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è (Form A) –Ω–∞ –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä?\n–û—Ç–≤–µ—Ç—å—Ç–µ: '–î–∞' / '–ù–µ—Ç, –Ω–æ –Ω—É–∂–µ–Ω' / '–ù–µ—Ç, –Ω–µ –Ω—É–∂–µ–Ω'"
                session['invoice_current_step'] = 'origin_certificate'
                session['invoice_data'] = invoice_data
                chat_history.append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {response}")
                return jsonify({"response": response})
            
            elif current_step == 'origin_certificate':
                if user_message.lower() in ['–¥–∞', '–Ω–µ—Ç, –Ω–æ –Ω—É–∂–µ–Ω', '–Ω–µ—Ç, –Ω–µ –Ω—É–∂–µ–Ω']:
                    invoice_data['origin_certificate'] = user_message
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç
                    calculation = generate_invoice_calculation(
                        invoice_data['product_name'],
                        invoice_data['tnved_code'],
                        invoice_data['product_value'],
                        invoice_data['weight'],
                        invoice_data['volume'],
                        invoice_data['country'],
                        invoice_data['origin_certificate'],
                        delivery_data['city']
                    )
                    
                    response = f"{calculation}\n\n‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞—à–µ–º—É —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–º—É –±—Ä–æ–∫–µ—Ä—É.\nüìû –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n\n–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏? (–∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω)"
                    
                    session['waiting_for_invoice_data'] = False
                    session['waiting_for_contacts'] = True
                    session['invoice_data'] = invoice_data
                    chat_history.append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {response}")
                    return jsonify({"response": response})
                else:
                    return jsonify({"response": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: '–î–∞' / '–ù–µ—Ç, –Ω–æ –Ω—É–∂–µ–Ω' / '–ù–µ—Ç, –Ω–µ –Ω—É–∂–µ–Ω'"})
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
        if current_step == 'awaiting_delivery_info' and not delivery_data['delivery_type']:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ
            weight, product_type, city = extract_delivery_info(user_message)
            if weight:
                delivery_data['weight'] = weight
            if product_type:
                delivery_data['product_type'] = product_type
            if city:
                delivery_data['city'] = city
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
            if delivery_data['weight'] and delivery_data['city']:
                response = f"""–û—Ç–ª–∏—á–Ω–æ! –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å:

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:

üü¢ **–ö–ê–†–ì–û** (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞)
‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ª–∏—á–Ω—ã—Ö –≤–µ—â–µ–π, –ø—Ä–æ–±–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π
‚Ä¢ –†–∞—Å—á–µ—Ç –ø–æ –≥–æ—Ç–æ–≤—ã–º —Ç–∞—Ä–∏—Ñ–∞–º –¢1 –∏ –¢2
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç

üîµ **–ò–ù–í–û–ô–°** (–ø–æ–ª–Ω–æ–µ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ)  
‚Ä¢ –î–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø–∞—Ä—Ç–∏–π —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ –ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–ø–æ—à–ª–∏–Ω–∞, –ù–î–°, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã)
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–æ–¥—É –¢–ù –í–≠–î

–ß—Ç–æ –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç? (–Ω–∞–ø–∏—à–∏—Ç–µ "–ö–∞—Ä–≥–æ" –∏–ª–∏ "–ò–Ω–≤–æ–π—Å")"""
                
                session['current_step'] = '
