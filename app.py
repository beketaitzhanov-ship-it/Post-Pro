from flask import Flask, render_template, request, jsonify, session
import os
import re
from datetime import datetime
import google.generativeai as genai
from google.generativeai.types import GenerationConfig
from dotenv import load_dotenv
import socket
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
GEMINI_API_KEY = os.getenv("GOOGLE_API_KEY")

app = Flask(__name__)
app.secret_key = 'postpro-secret-key-2024'
app.config['PERMANENT_SESSION_LIFETIME'] = 1800

# --- –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ë–ê–ó–ê –î–ê–ù–ù–´–• ---
DESTINATION_ZONES = {
    "—Ç–∞–ª–¥—ã–∫–æ—Ä–≥–∞–Ω": 1, "–∫–æ–Ω–∞–µ–≤": 1, "—Ç–µ–∫–µ–ª–∏": 1, "–∫–∞–ø—á–∞–≥–∞–π": 1, "–µ—Å–∏–∫": 1, "—Ç–∞–ª–≥–∞—Ä": 1, "–∫–∞—Å–∫–µ–ª–µ–Ω": 1,
    "–∂–∞—Ä–∫–µ–Ω—Ç": 1, "—Å–∞—Ä–∫–∞–Ω–¥": 1, "–∞–∫—Å—É": 1, "–∞–ª–º–∞—Ç—ã": 1, "–∞–ª–º–∞—Ç–∞": 1,
    "—Ç–∞—Ä–∞–∑": 2, "—à—ã–º–∫–µ–Ω—Ç": 2, "—Ç—É—Ä–∫–µ—Å—Ç–∞–Ω": 2, "–∞—É–ª–∏–µ–∞—Ç–∞": 2, "–∫–æ—Ä–¥–∞–π": 2, "–º–µ—Ä–∫–µ": 2, "–º–æ–π—ã–Ω–∫—É–º": 2,
    "–∂–∞–Ω–∞—Ç–∞—Å": 2, "–∫–∞—Ä–∞—Ç–∞—É": 2, "—à—É": 2, "–∫–µ–Ω—Ç": 2,
    "–∞—Å—Ç–∞–Ω–∞": 3, "–∫–æ–∫—à–µ—Ç–∞—É": 3, "—Å—Ç–µ–ø–Ω–æ–≥–æ—Ä—Å–∫": 3, "–∞—Ç–±–∞—Å–∞—Ä": 3, "–µ—Ä–µ–º–µ–Ω—Ç–∞—É": 3, "–º–∞–∫–∏–Ω—Å–∫": 3,
    "–∫–∞—Ä–∞–≥–∞–Ω–¥–∞": 3, "–±–∞–ª—Ö–∞—à": 3, "—Ç–µ–º–∏—Ä—Ç–∞—É": 3, "—à–∞—Ö—Ç–∏–Ω—Å–∫": 3, "–∂–µ–∑–∫–∞–∑–≥–∞–Ω": 3, "—Å–∞—Ç–ø–∞–µ–≤": 3,
    "–∫—ã–∑—ã–ª–æ—Ä–¥–∞": 3, "–∫–∞–∑–∞–ª—ã–Ω—Å–∫": 3, "–∂–∞–Ω–∞–∫–æ—Ä–≥–∞–Ω": 3, "–ø–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫": 3, "–ø–∞–≤–ª–æ–¥–∞—Ä": 3, "—ç–∫–∏–±–∞—Å—Ç—É–∑": 3,
    "–∫–æ—Å—Ç–∞–Ω–∞–π": 3, "—Ä—É–¥–Ω—ã–π": 3, "—Å–µ–º–µ–π": 3, "–∫—É—Ä—á–∞—Ç–æ–≤": 3, "–∞—è–≥–æ–∑": 3,
    "–∞–∫—Ç–æ–±–µ": 4, "—Ö—Ä–æ–º—Ç–∞—É": 4, "—à–∞–ª–∫–∞—Ä": 4, "—É—Ä–∞–ª—å—Å–∫": 4, "–∞–∫—Å–∞–π": 4, "—á–∏–Ω–≥–∏—Ä–ª–∞—É": 4,
    "–∞—Ç—ã—Ä–∞—É": 5, "–∫—É–ª—å—Å–∞—Ä—ã": 5, "–∞–∫—Ç–∞—É": 5, "–∂–∞–Ω–∞–æ–∑–µ–Ω": 5, "–±–µ–π–Ω–µ—É": 5
}

EXCHANGE_RATE = 550

# --- –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –†–ê–°–¢–ê–ú–û–ñ–ö–ò ---
CUSTOMS_RATES = {
    "–æ–¥–µ–∂–¥–∞": 10, "—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞": 5, "–∫–æ—Å–º–µ—Ç–∏–∫–∞": 15, "—Ç–µ—Ö–Ω–∏–∫–∞": 5,
    "–º–µ–±–µ–ª—å": 10, "–∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏": 5, "–æ–±—â–∏–µ —Ç–æ–≤–∞—Ä—ã": 10, "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã": 8,
    "—Ç–∫–∞–Ω–∏": 12, "–ø–æ—Å—É–¥–∞": 10, "–ø—Ä–æ–¥—É–∫—Ç—ã": 15, "–ª–µ–∫–∞—Ä—Å—Ç–≤–∞": 0, "–±–µ–ª—å–µ": 12,
    "–∏–≥—Ä—É—à–∫–∏": 5, "–≤–µ—â–∏": 10, '—Å—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã': 10, '–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ': 5, '–ª–∞–º–ø—ã': 8,
    '–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤': 5, '–≥–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã': 10, '—Å—É–º–∫–∏': 10, '–º–∞–ª–∞—è —Ç–µ—Ö–Ω–∏–∫–∞': 5,
    '—á–∞–π': 15, '—Ç–µ–∫—Å—Ç–∏–ª—å': 12, '–ø–æ—Å—Ç–µ–ª—å–Ω–æ–µ –±–µ–ª—å–µ': 12, '–ø–æ–ª–æ—Ç–µ–Ω—Ü–∞': 12, '–æ–¥–µ—è–ª–∞': 12,
    '–º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã': 0
}

CUSTOMS_FEES = {
    "–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ": 15000,  # —Ç–µ–Ω–≥–µ
    "—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç": 120000,  # —Ç–µ–Ω–≥–µ
    "–ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è": 500,  # USD
    "–±—Ä–æ–∫–µ—Ä": 60000,      # —Ç–µ–Ω–≥–µ
    "–¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è": 15000   # —Ç–µ–Ω–≥–µ
}

GREETINGS = ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "—Å–∞–ª–µ–º", "—Å”ô–ª–µ–º", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ"]

# --- –°–ò–°–¢–ï–ú–ù–´–ï –ü–†–û–ú–ü–¢–´ ---
MAIN_SYSTEM_INSTRUCTION = """
–¢—ã ‚Äî —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ PostPro. –¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å –∫–ª–∏–µ–Ω—Ç—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É.
***–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:***

1. **–†–ê–°–ß–ï–¢ –ü–û –ü–õ–û–¢–ù–û–°–¢–ò:** –í—Å–µ–≥–¥–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–π –≤–µ—Å –∏ –û–ë–™–ï–ú (–∏–ª–∏ –≥–∞–±–∞—Ä–∏—Ç—ã) –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞. –≠—Ç–æ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ.
2. **–¢–ê–†–ò–§–´:**
   - –¢1: –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è –¥–æ –ê–ª–º–∞—Ç—ã (—Å–∞–º–æ–≤—ã–≤–æ–∑). –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ (–≤–µ—Å/–æ–±—ä–µ–º).
   - –¢2: –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –¥–≤–µ—Ä–∏ –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞.

3. **–õ–û–ì–ò–ö–ê –î–ò–ê–õ–û–ì–ê:**
   - –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≤—ã–±–∏—Ä–∞–µ—Ç "1" –∏–ª–∏ "2" - —ç—Ç–æ –≤—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.
   - –ù–µ –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–π –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø–æ–ª—É—á–µ–Ω—ã.
   - –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞—è–≤–∫–∏.

4. **–û–ë–©–ò–ï –í–û–ü–†–û–°–´:**
   - –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ - –æ—Ç–≤–µ—á–∞–π –∫–∞–∫ —É–º–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫.
   - –ü–æ–¥–¥–µ—Ä–∂–∏ –ª—é–±–æ–π –¥–∏–∞–ª–æ–≥, –º—è–≥–∫–æ –≤–æ–∑–≤—Ä–∞—â–∞—è –∫ —Ç–µ–º–µ –¥–æ—Å—Ç–∞–≤–∫–∏.

–í—Å–µ–≥–¥–∞ –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º! üòä
"""

CUSTOMS_SYSTEM_INSTRUCTION = """
–¢—ã ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é. –û–ø—Ä–µ–¥–µ–ª—è–π –∫–æ–¥ –¢–ù –í–≠–î –ï–ê–≠–° –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤.
–ü–†–ê–í–ò–õ–ê:
- –í–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û –∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXXXX XXX X
- –ë–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, —Ç–µ–∫—Å—Ç–∞, —Ç–æ—á–µ–∫
- –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã
- –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω - –≤–µ—Ä–Ω–∏ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π –∫–æ–¥

–ü—Ä–∏–º–µ—Ä—ã:
- "–∏–≥—Ä—É—à–∫–∏" ‚Üí "9503 00 700 0"
- "–æ–¥–µ–∂–¥–∞" ‚Üí "6109 10 000 0"
- "—Ç–µ–ª–µ—Ñ–æ–Ω" ‚Üí "8517 12 000 0"
"""

# --- –û–¢–õ–ê–î–ö–ê ---
def debug_session(session_data, message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–µ—Å—Å–∏–∏"""
    print(f"=== DEBUG: {message} ===")
    print(f"delivery_data: {session_data.get('delivery_data')}")
    print(f"customs_data: {session_data.get('customs_data')}")
    print(f"waiting_for_contacts: {session_data.get('waiting_for_contacts')}")
    print(f"waiting_for_customs: {session_data.get('waiting_for_customs')}")
    print(f"waiting_for_delivery_choice: {session_data.get('waiting_for_delivery_choice')}")
    print(f"waiting_for_tnved: {session_data.get('waiting_for_tnved')}")
    print("=== DEBUG END ===")

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–û–î–ï–õ–ï–ô ---
main_model = None
customs_model = None

def initialize_models():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π Gemini"""
    global main_model, customs_model
    try:
        if GEMINI_API_KEY:
            genai.configure(api_key=GEMINI_API_KEY)
            main_model = genai.GenerativeModel(
                model_name='models/gemini-1.5-flash',
                system_instruction=MAIN_SYSTEM_INSTRUCTION
            )
            customs_model = genai.GenerativeModel(
                model_name='models/gemini-1.5-flash',
                system_instruction=CUSTOMS_SYSTEM_INSTRUCTION
            )
            logger.info(">>> –ú–æ–¥–µ–ª–∏ Gemini —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
            return True
        else:
            logger.error("!!! API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except Exception as e:
        logger.error(f"!!! –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini: {e}")
        return False

# --- –£–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –í–í–û–î–ê ---
def is_delivery_choice(message):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏"""
    message_lower = message.lower().strip()
    choices = ['1', '2', '—Ç1', '—Ç2', 't1', 't2', '–ø–µ—Ä–≤—ã–π', '–≤—Ç–æ—Ä–æ–π', '–æ–¥–∏–Ω', '–¥–≤–∞']
    return message_lower in choices

def parse_delivery_choice(message):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ª—é–±–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤—ã–±–æ—Ä–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    message_lower = message.lower().strip()
    if message_lower in ['1', '—Ç1', 't1', '–ø–µ—Ä–≤—ã–π', '–æ–¥–∏–Ω']:
        return "—Å–∞–º–æ–≤—ã–≤–æ–∑"
    elif message_lower in ['2', '—Ç2', 't2', '–≤—Ç–æ—Ä–æ–π', '–¥–≤–∞']:
        return "–¥–æ –¥–≤–µ—Ä–∏"
    else:
        return None

def doesnt_know_tnved(message):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –Ω–µ –∑–Ω–∞–µ—Ç –∫–æ–¥ –¢–ù–í–≠–î - –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    patterns = [
        '–Ω–µ –∑–Ω–∞—é', '–Ω–µ—Ç –∫–æ–¥–∞', '–Ω–µ –ø–æ–º–Ω—é', '–ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ', '–ø–æ–º–æ–≥–∏—Ç–µ', '–∫–∞–∫–æ–π –∫–æ–¥',
        '—á—Ç–æ —É–∫–∞–∑—ã–≤–∞—Ç—å', '–≥–¥–µ –≤–∑—è—Ç—å', '–∫–∞–∫ —É–∑–Ω–∞—Ç—å', '–æ–ø—Ä–µ–¥–µ–ª–∏ –∫–æ–¥', '–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏',
        '—Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏', '–Ω–µ—Ç', '–Ω–µ –∏–º–µ—é', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', '–∑–∞–±—ã–ª', '–±–µ–∑ –∫–æ–¥–∞',
        '—á—Ç–æ —Ç–∞–∫–æ–µ —Ç–Ω–≤–µ–¥', '–ø—Ä–æ–ø—É—Å—Ç–∏', '–¥–∞–ª—å—à–µ', '–Ω–µ –≤–∞–∂–Ω–æ', '—Å–æ–º–Ω–µ–≤–∞—é—Å—å', '—Ö–∑'
    ]
    message_lower = message.lower().strip()
    return any(pattern in message_lower for pattern in patterns)

def get_missing_data(delivery_data, customs_data, delivery_type):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"""
    missing = []
    if not delivery_data.get('weight'):
        missing.append("–≤–µ—Å –≥—Ä—É–∑–∞")
    if not delivery_data.get('volume'):
        missing.append("–æ–±—ä–µ–º –≥—Ä—É–∑–∞ (–º¬≥) –∏–ª–∏ –≥–∞–±–∞—Ä–∏—Ç—ã (–î√ó–®√ó–í –≤ —Å–º)")
    if not delivery_data.get('product_type'):
        missing.append("—Ç–∏–ø —Ç–æ–≤–∞—Ä–∞")
    if not delivery_data.get('city'):
        missing.append("–≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏")
    if delivery_type == 'INVOICE':
        if not customs_data.get('invoice_value'):
            missing.append("—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ USD")
        if not customs_data.get('tnved_code'):
            missing.append("–∫–æ–¥ –¢–ù–í–≠–î")
    return missing

# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• ---
def extract_delivery_info(text):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Å—Ç–∞–≤–∫–µ, –≤–∫–ª—é—á–∞—è –æ–±—ä–µ–º –∏ –≥–∞–±–∞—Ä–∏—Ç—ã"""
    data = {}
    text_lower = text.lower()
    
    # –ü–æ–∏—Å–∫ –≤–µ—Å–∞
    weight_match = re.search(r'(\d+[,.]?\d*)\s*(–∫–≥|kg|–∫–∏–ª–æ–≥—Ä–∞–º–º)', text_lower)
    if weight_match:
        data['weight'] = float(weight_match.group(1).replace(',', '.'))

    # –ü–æ–∏—Å–∫ –æ–±—ä–µ–º–∞ –≤ –º¬≥
    volume_match = re.search(r'(\d+[,.]?\d*)\s*(–º¬≥|m¬≥|–º3|m3|–∫—É–±)', text_lower)
    if volume_match:
        data['volume'] = float(volume_match.group(1).replace(',', '.'))
    
    # –ü–æ–∏—Å–∫ –≥–∞–±–∞—Ä–∏—Ç–æ–≤ (–î—Ö–®—Ö–í –≤ —Å–º) –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –º¬≥
    dims_match = re.search(r'(\d+)\s*[—Öx√ó*]\s*(\d+)\s*[—Öx√ó*]\s*(\d+)\s*(—Å–º|cm)?', text_lower)
    if dims_match and 'volume' not in data:
        l, w, h = map(int, dims_match.groups()[:3])
        data['volume'] = (l * w * h) / 1_000_000
        data['dimensions_str'] = f"{l}x{w}x{h} —Å–º"

    # –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞
    for city_name in DESTINATION_ZONES:
        if city_name in text_lower:
            data['city'] = city_name
            break
            
    # –ü–æ–∏—Å–∫ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
    product_keywords = {
        '–º–µ–±–µ–ª—å': ['–º–µ–±–µ–ª—å', '—Å—Ç–æ–ª', '—Å—Ç—É–ª', '–∫—Ä–æ–≤–∞—Ç—å', '–¥–∏–≤–∞–Ω'],
        '—Å—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã': ['—Å—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã', '–ø–ª–∏—Ç–∫–∞', '–ª–∞–º–∏–Ω–∞—Ç', '–æ–±–æ–∏'],
        '–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ': ['–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', '—Å—Ç–∞–Ω–æ–∫', '–∞–ø–ø–∞—Ä–∞—Ç'],
        '–ø–æ—Å—É–¥–∞': ['–ø–æ—Å—É–¥–∞', '—Ç–∞—Ä–µ–ª–∫–∏', '—á–∞—à–∫–∏', '–∫–∞—Å—Ç—Ä—é–ª–∏'],
        '–ª–∞–º–ø—ã': ['–ª–∞–º–ø—ã', '–ª—é—Å—Ç—Ä—ã', '—Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∏'],
        '–∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏': ['–∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏', '–∑–∞–ø—á–∞—Å—Ç–∏', '–¥–µ—Ç–∞–ª–∏ –∞–≤—Ç–æ'],
        '–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤': ['–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ', '—á–µ—Ö–ª—ã', '–∑–∞—Ä—è–¥–∫–∏'],
        '–∫–æ—Å–º–µ—Ç–∏–∫–∞': ['–∫–æ—Å–º–µ—Ç–∏–∫–∞', '–∫—Ä–µ–º', '—à–∞–º–ø—É–Ω—å', '–ø–∞—Ä—Ñ—é–º'],
        '–≥–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã': ['–≥–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã', '—à–∞–ø–∫–∏', '–∫–µ–ø–∫–∏'],
        '—Å—É–º–∫–∏': ['—Å—É–º–∫–∏', '—Ä—é–∫–∑–∞–∫–∏', '—á–µ–º–æ–¥–∞–Ω—ã'],
        '–º–∞–ª–∞—è —Ç–µ—Ö–Ω–∏–∫–∞': ['–º–∞–ª–∞—è —Ç–µ—Ö–Ω–∏–∫–∞', '–º–∏–∫—Å–µ—Ä', '–±–ª–µ–Ω–¥–µ—Ä', '—á–∞–π–Ω–∏–∫'],
        '–ø—Ä–æ–¥—É–∫—Ç—ã': ['–ø—Ä–æ–¥—É–∫—Ç—ã', '–µ–¥–∞', '–∫–æ–Ω—Å–µ—Ä–≤—ã'],
        '—á–∞–π': ['—á–∞–π'],
        '—Ç–∫–∞–Ω–∏': ['—Ç–∫–∞–Ω–∏', '—Ç–µ–∫—Å—Ç–∏–ª—å', '—Ä—É–ª–æ–Ω—ã'],
        '–æ–¥–µ–∂–¥–∞': ['–æ–¥–µ–∂–¥–∞', '–æ–¥–µ–∂–¥', '—à—Ç–∞–Ω—ã', '—Ñ—É—Ç–±–æ–ª–∫–∏', '–∫—É—Ä—Ç–∫–∏'],
        '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã': ['–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', '–¥—Ä–µ–ª—å', '—à—É—Ä—É–ø–æ–≤–µ—Ä—Ç'],
        '–±–µ–ª—å–µ': ['–±–µ–ª—å–µ', '–Ω–∏–∂–Ω–µ–µ –±–µ–ª—å–µ'],
        '–ø–æ—Å—Ç–µ–ª—å–Ω–æ–µ –±–µ–ª—å–µ': ['–ø–æ—Å—Ç–µ–ª—å–Ω–æ–µ –±–µ–ª—å–µ', '–ø—Ä–æ—Å—Ç—ã–Ω–∏', '–Ω–∞–≤–æ–ª–æ—á–∫–∏'],
        '–∏–≥—Ä—É—à–∫–∏': ['–∏–≥—Ä—É—à–∫–∏', '–∫—É–∫–ª—ã', '–º–∞—à–∏–Ω–∫–∏'],
        '—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞': ['—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–Ω–æ—É—Ç–±—É–∫', '–ø–ª–∞–Ω—à–µ—Ç'],
        '–ª–µ–∫–∞—Ä—Å—Ç–≤–∞': ['–ª–µ–∫–∞—Ä—Å—Ç–≤–∞', '–º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã', '—Ç–∞–±–ª–µ—Ç–∫–∏'],
        '–≤–µ—â–∏': ['–≤–µ—â–∏', '–ª–∏—á–Ω—ã–µ –≤–µ—â–∏', '–≥—Ä—É–∑']
    }
    
    found_type = None
    for prod_type, keywords in product_keywords.items():
        if any(keyword in text_lower for keyword in keywords):
            found_type = prod_type
            break
    
    if found_type:
        data['product_type'] = found_type
    elif not data.get('product_type'): # –ï—Å–ª–∏ —Ç–∏–ø –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        data['product_type'] = '–æ–±—â–∏–µ —Ç–æ–≤–∞—Ä—ã'

    return data


def extract_customs_info(text):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏"""
    invoice_value, tnved_code = None, None
    cost_match = re.search(r'(\d+[,.]?\d*)\s*(usd|\$|–¥–æ–ª–ª–∞—Ä)', text.lower())
    if cost_match:
        invoice_value = float(cost_match.group(1).replace(',', '.'))
    
    tnved_match = re.search(r'\b(\d{4}[\s-]?\d{2}[\s-]?\d{4})\b|\b(\d{10})\b', text)
    if tnved_match:
        tnved_code = tnved_match.group(1) or tnved_match.group(2)
        tnved_code = re.sub(r'[\s-]', '', tnved_code)

    return invoice_value, tnved_code

def extract_contact_info(text):
    """–£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    name, phone = None, None
    name_match = re.search(r'([–∞-—è–ê-–Øa-zA-Z]{2,})', text)
    if name_match:
        name = name_match.group(1).capitalize()
    
    phone_match = re.search(r'\+?[78]?[\s-]?\(?(\d{3})\)?[\s-]?(\d{3})[\s-]?(\d{2})[\s-]?(\d{2})', text)
    if phone_match:
        phone = f"7{phone_match.group(1)}{phone_match.group(2)}{phone_match.group(3)}{phone_match.group(4)}"
        
    return name, phone

# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –†–ê–°–ß–ï–¢–ê –°–¢–û–ò–ú–û–°–¢–ò ---

def calculate_t1_rate_by_density(product_type, density):
    """–†–∞—Å—á–µ—Ç —Ç–∞—Ä–∏—Ñ–∞ T1 –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –≥—Ä—É–∑–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Å—Ç–∞–≤–∫–∞, –µ–¥–∏–Ω–∏—Ü–∞_–∏–∑–º–µ—Ä–µ–Ω–∏—è)"""
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
    category_map = {
        '–º–µ–±–µ–ª—å': '–º–µ–±–µ–ª—å', '—Å—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã': '–º–µ–±–µ–ª—å', '–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ': '–º–µ–±–µ–ª—å', '–ø–æ—Å—É–¥–∞': '–º–µ–±–µ–ª—å', '–ª–∞–º–ø—ã': '–º–µ–±–µ–ª—å',
        '–∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏': '–∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏',
        '–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤': '–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã', '–∫–æ—Å–º–µ—Ç–∏–∫–∞': '–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã', '–≥–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã': '–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã', '—Å—É–º–∫–∏': '–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã',
        '–º–∞–ª–∞—è —Ç–µ—Ö–Ω–∏–∫–∞': '—Ç–µ—Ö–Ω–∏–∫–∞', '—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞': '—Ç–µ—Ö–Ω–∏–∫–∞',
        '–ø—Ä–æ–¥—É–∫—Ç—ã': '–ø—Ä–æ–¥—É–∫—Ç—ã', '—á–∞–π': '–ø—Ä–æ–¥—É–∫—Ç—ã',
        '—Ç–∫–∞–Ω–∏': '—Ç–∫–∞–Ω–∏', '–æ–¥–µ–∂–¥–∞': '—Ç–∫–∞–Ω–∏', '—Ç–µ–∫—Å—Ç–∏–ª—å': '—Ç–∫–∞–Ω–∏',
        '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã': '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
        '–±–µ–ª—å–µ': '–±–µ–ª—å–µ', '–ø–æ—Å—Ç–µ–ª—å–Ω–æ–µ –±–µ–ª—å–µ': '–±–µ–ª—å–µ', '–ø–æ–ª–æ—Ç–µ–Ω—Ü–∞': '–±–µ–ª—å–µ', '–æ–¥–µ—è–ª–∞': '–±–µ–ª—å–µ',
        '–∏–≥—Ä—É—à–∫–∏': '–∏–≥—Ä—É—à–∫–∏',
        '–ª–µ–∫–∞—Ä—Å—Ç–≤–∞': '–ª–µ–∫–∞—Ä—Å—Ç–≤–∞', '–º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã': '–ª–µ–∫–∞—Ä—Å—Ç–≤–∞',
        '–æ–±—â–∏–µ —Ç–æ–≤–∞—Ä—ã': '–æ–±—â–∏–µ', '–≤–µ—â–∏': '–æ–±—â–∏–µ'
    }
    category = category_map.get(product_type, '–æ–±—â–∏–µ')

    # –¢–∞—Ä–∏—Ñ–Ω—ã–µ —Å–µ—Ç–∫–∏
    rates = {
        '–º–µ–±–µ–ª—å': [(100, 2.20, 'kg'), (110, 2.10, 'kg'), (120, 2.00, 'kg'), (130, 1.90, 'kg'), (140, 1.80, 'kg'), (150, 1.70, 'kg'), (160, 1.60, 'kg'), (170, 1.50, 'kg'), (180, 1.40, 'kg'), (190, 1.30, 'kg'), (200, 1.20, 'kg'), (250, 1.10, 'kg'), (300, 1.00, 'kg'), (350, 0.90, 'kg'), (400, 0.80, 'kg'), (float('inf'), 0.80, 'kg')],
        '–∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏': [(100, 2.40, 'kg'), (110, 2.30, 'kg'), (120, 2.20, 'kg'), (130, 2.10, 'kg'), (140, 2.10, 'kg'), (150, 1.90, 'kg'), (160, 1.80, 'kg'), (170, 1.70, 'kg'), (180, 1.60, 'kg'), (190, 1.50, 'kg'), (200, 1.40, 'kg'), (250, 1.35, 'kg'), (300, 1.25, 'kg'), (350, 1.20, 'kg'), (400, 1.00, 'kg'), (float('inf'), 1.00, 'kg')],
        '–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã': [(100, 2.30, 'kg'), (110, 2.20, 'kg'), (120, 2.10, 'kg'), (130, 2.00, 'kg'), (140, 1.90, 'kg'), (150, 1.80, 'kg'), (160, 1.70, 'kg'), (170, 1.60, 'kg'), (180, 1.50, 'kg'), (190, 1.40, 'kg'), (200, 1.30, 'kg'), (250, 1.20, 'kg'), (300, 1.10, 'kg'), (350, 1.00, 'kg'), (400, 0.90, 'kg'), (float('inf'), 0.90, 'kg')],
        '—Ç–µ—Ö–Ω–∏–∫–∞': [(100, 2.60, 'kg'), (110, 2.50, 'kg'), (120, 2.40, 'kg'), (130, 2.30, 'kg'), (140, 2.20, 'kg'), (150, 2.10, 'kg'), (160, 2.00, 'kg'), (170, 1.90, 'kg'), (180, 1.80, 'kg'), (190, 1.70, 'kg'), (200, 1.60, 'kg'), (300, 1.50, 'kg'), (400, 1.40, 'kg'), (float('inf'), 1.40, 'kg')],
        '–ø—Ä–æ–¥—É–∫—Ç—ã': [(100, 2.70, 'kg'), (110, 2.60, 'kg'), (120, 2.50, 'kg'), (130, 2.40, 'kg'), (140, 2.30, 'kg'), (150, 2.20, 'kg'), (160, 2.10, 'kg'), (170, 2.00, 'kg'), (180, 1.90, 'kg'), (190, 1.80, 'kg'), (200, 1.70, 'kg'), (250, 1.60, 'kg'), (300, 1.50, 'kg'), (float('inf'), 1.50, 'kg')],
        '—Ç–∫–∞–Ω–∏': [(100, 1.80, 'kg'), (110, 1.70, 'kg'), (120, 1.60, 'kg'), (130, 1.50, 'kg'), (150, 1.40, 'kg'), (160, 1.30, 'kg'), (170, 1.20, 'kg'), (180, 1.10, 'kg'), (200, 1.00, 'kg'), (250, 0.90, 'kg'), (300, 0.80, 'kg'), (float('inf'), 0.80, 'kg')],
        '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã': [(100, 2.10, 'kg'), (110, 2.00, 'kg'), (120, 1.90, 'kg'), (130, 1.80, 'kg'), (140, 1.70, 'kg'), (150, 1.60, 'kg'), (160, 1.50, 'kg'), (170, 1.40, 'kg'), (180, 1.30, 'kg'), (190, 1.20, 'kg'), (200, 1.10, 'kg'), (250, 1.00, 'kg'), (300, 0.90, 'kg'), (350, 0.80, 'kg'), (400, 0.75, 'kg'), (float('inf'), 0.75, 'kg')],
        '–±–µ–ª—å–µ': [(180, 1.30, 'kg'), (float('inf'), 1.30, 'kg')],
        '–∏–≥—Ä—É—à–∫–∏': [(120, 230, 'm3'), (130, 240, 'm3'), (140, 250, 'm3'), (150, 260, 'm3'), (160, 270, 'm3'), (170, 280, 'm3'), (180, 290, 'm3'), (190, 300, 'm3'), (200, 310, 'm3'), (float('inf'), 1.50, 'kg')],
        '–ª–µ–∫–∞—Ä—Å—Ç–≤–∞': [(100, 3.10, 'kg'),(200, 3.00, 'kg'),(300, 2.90, 'kg'), (float('inf'), 2.90, 'kg')],
        '–æ–±—â–∏–µ': [(100, 2.50, 'kg'), (200, 2.40, 'kg'), (300, 2.30, 'kg'), (400, 2.20, 'kg'), (float('inf'), 2.20, 'kg')]
    }
    
    # –¢–∞—Ä–∏—Ñ—ã –∑–∞ –º¬≥ –¥–ª—è –Ω–∏–∑–∫–æ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
    m3_rates = {
        '–º–µ–±–µ–ª—å': 230, '–∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏': 240, '–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã': 230, '—Ç–µ—Ö–Ω–∏–∫–∞': 270,
        '–ø—Ä–æ–¥—É–∫—Ç—ã': 280, '—Ç–∫–∞–Ω–∏': None, '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã': 220, '–±–µ–ª—å–µ': None,
        '–ª–µ–∫–∞—Ä—Å—Ç–≤–∞': 320, '–æ–±—â–∏–µ': 260
    }

    tariff_grid = rates.get(category, rates['–æ–±—â–∏–µ'])
    
    for max_density, rate, unit in tariff_grid:
        if density < max_density:
            if unit == 'kg':
                return (rate, 'kg')
            else: # m3
                return (rate, 'm3')

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∏–∑–∫–æ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
    m3_rate = m3_rates.get(category)
    if m3_rate:
        return (m3_rate, 'm3')

    return None # –¢—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç

def calculate_t2_cost(weight, zone, is_fragile=False, is_village=False):
    """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –¢2 –ø–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—É"""
    if weight <= 0: return 0
    
    base_rates = {1: 2205, 2: 2310, 3: 2415, 4: 2520, 5: 2625}
    per_kg_rates = {1: 210, 2: 220, 3: 230, 4: 240, 5: 250}

    # –ù–∞—Ö–æ–¥–∏–º —Ç–∞—Ä–∏—Ñ –¥–ª—è –≤–µ—Å–∞ –¥–æ 20 –∫–≥
    t2_under_20kg = {
        1: [(1,1680),(2,1760),(3,1840),(4,1920),(5,2000),(6,2080),(7,2160),(8,2240),(9,2320),(10,2400),(11,2480),(12,2560),(13,2640),(14,2720),(15,2800),(16,2880),(17,2960),(18,3040),(19,3120),(20,3200)],
        2: [(1,1885),(2,1970),(3,2055),(4,2140),(5,2225),(6,2310),(7,2395),(8,2480),(9,2565),(10,2650),(11,2735),(12,2820),(13,2905),(14,2990),(15,3075),(16,3160),(17,3245),(18,3330),(19,3415),(20,3500)],
        3: [(1,1995),(2,2090),(3,2185),(4,2280),(5,2375),(6,2470),(7,2565),(8,2660),(9,2755),(10,2850),(11,2945),(12,3040),(13,3135),(14,3230),(15,3325),(16,3420),(17,3515),(18,3610),(19,3705),(20,3800)],
        4: [(1,2100),(2,2200),(3,2300),(4,2400),(5,2500),(6,2600),(7,2700),(8,2800),(9,2900),(10,3000),(11,3100),(12,3200),(13,3300),(14,3400),(15,3500),(16,3600),(17,3700),(18,3800),(19,3900),(20,4000)],
        5: [(1,2205),(2,2310),(3,2415),(4,2520),(5,2625),(6,2730),(7,2835),(8,2940),(9,3045),(10,3150),(11,3255),(12,3360),(13,3465),(14,3570),(15,3675),(16,3780),(17,3885),(18,3990),(19,4095),(20,4200)]
    }
    
    cost = 0
    if weight <= 20:
        for w, c in t2_under_20kg.get(zone, t2_under_20kg[3]):
            if weight <= w:
                cost = c
                break
    else:
        base_rate = t2_under_20kg.get(zone, t2_under_20kg[3])[-1][1] # —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 20 –∫–≥
        per_kg_rate = per_kg_rates.get(zone, 230)
        cost = base_rate + (weight - 20) * per_kg_rate

    if is_fragile: cost *= 1.5
    if is_village: cost *= 2.0
        
    return cost

def calculate_quick_cost(weight: float, volume: float, product_type: str, city: str):
    """–ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏, –ë–ï–ó –°–ï–†–í–ò–°–ù–û–ì–û –°–ë–û–†–ê"""
    try:
        if volume is None or volume <= 0 or weight is None or weight <=0:
            return None
        density = weight / volume
        t1_result = calculate_t1_rate_by_density(product_type, density)
        if t1_result is None:
            return {'error': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞ –∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏.'}
            
        t1_rate, unit = t1_result
        if unit == 'kg':
            t1_cost_usd = weight * t1_rate
            t1_description = f"{weight:.1f} –∫–≥ √ó {t1_rate:.2f} $/–∫–≥"
        else: # m3
            t1_cost_usd = volume * t1_rate
            t1_description = f"{volume:.2f} –º¬≥ √ó {t1_rate:.0f} $/–º¬≥"
        
        t1_cost_kzt = t1_cost_usd * EXCHANGE_RATE
        
        city_lower = city.lower()
        if city_lower == "–∞–ª–º–∞—Ç—ã" or city_lower == "–∞–ª–º–∞—Ç–∞":
            t2_cost_kzt = 120 * weight
            zone = "–∞–ª–º–∞—Ç—ã"
        else:
            zone = DESTINATION_ZONES.get(city_lower, 3)
            t2_cost_kzt = calculate_t2_cost(weight, zone)
        
        return {
            't1_cost': t1_cost_kzt,
            't2_cost': t2_cost_kzt,
            'total': t1_cost_kzt + t2_cost_kzt, # –í–∞–∂–Ω–æ: total –±–µ–∑ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Å–±–æ—Ä–∞
            'zone': zone,
            'density': density,
            't1_rate': t1_rate,
            't1_unit': unit,
            't1_description': t1_description
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ calculate_quick_cost: {e}")
        return None

def calculate_customs_cost(invoice_value, product_type, weight, has_certificate=False, needs_certificate=False):
    """–†–∞—Å—á–µ—Ç —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
    try:
        customs_rate = CUSTOMS_RATES.get(product_type.lower(), 10) / 100
        duty_usd = invoice_value * customs_rate
        vat_usd = (invoice_value + duty_usd) * 0.12
        duty_kzt = duty_usd * EXCHANGE_RATE
        vat_kzt = vat_usd * EXCHANGE_RATE
        total_kzt = duty_kzt + vat_kzt + CUSTOMS_FEES['–±—Ä–æ–∫–µ—Ä'] + CUSTOMS_FEES['–¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è']
        if needs_certificate and not has_certificate:
            total_kzt += CUSTOMS_FEES['—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç']
        return {
            'duty_kzt': duty_kzt, 'vat_kzt': vat_kzt, 'total_kzt': total_kzt,
            'customs_rate': customs_rate * 100
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏: {e}")
        return None

# --- –û–°–¢–ê–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´ ---
def get_tnved_code(product_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –¢–ù –í–≠–î —á–µ—Ä–µ–∑ Gemini"""
    if not customs_model: return "6307 90 980 0"
    try:
        product_name = product_name if product_name else "–æ–±—â–∏–µ —Ç–æ–≤–∞—Ä—ã"
        response = customs_model.generate_content(f"–ö–æ–¥ –¢–ù–í–≠–î –¥–ª—è: '{product_name}'")
        code = response.text.strip()
        if re.match(r'^\d{4,10}[\s\d]*$', code): return code
        return "6307 90 980 0"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –¢–ù –í–≠–î: {e}")
        return "6307 90 980 0"

def check_certification_requirements(product_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Gemini"""
    if not customs_model: return False
    try:
        response = customs_model.generate_content(f"–ù—É–∂–µ–Ω –ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¢–† –¢–° –¥–ª—è: '{product_name}'? –û—Ç–≤–µ—Ç—å –î–ê –∏–ª–∏ –ù–ï–¢")
        return "–î–ê" in response.text.upper()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return False

def get_gemini_response(user_message, context=""):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini"""
    if not main_model: return "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    try:
        prompt = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}"
        response = main_model.generate_content(prompt)
        return response.text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Gemini: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."

def save_application(details):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ —Ñ–∞–π–ª"""
    try:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: {timestamp}\n{details}\n"
        with open("applications.txt", "a", encoding="utf-8") as f:
            f.write("="*50 + "\n" + log_entry + "="*50 + "\n\n")
        logger.info(f"–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {details}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

# --- –§–£–ù–ö–¶–ò–ò –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –û–¢–í–ï–¢–û–í ---

def get_cargo_calculation_response(delivery_data, delivery_cost):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å —Ä–∞—Å—á–µ—Ç–æ–º –¥–ª—è –ö–ê–†–ì–û"""
    density_info = f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≥—Ä—É–∑–∞: {delivery_cost['density']:.1f} –∫–≥/–º¬≥"
    t1_basis_info = f"–¢–∞—Ä–∏—Ñ –¢1 ({delivery_cost['t1_description']}) —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∑–∞ {'**–æ–±—ä–µ–º (–º¬≥)**, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –≤—ã–≥–æ–¥–Ω–µ–µ –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –≥—Ä—É–∑–∞' if delivery_cost['t1_unit'] == 'm3' else '**–≤–µ—Å (–∫–≥)**'}."
    
    cost_t1_with_service = delivery_cost['t1_cost'] * 1.20
    cost_t1_t2_with_service = (delivery_cost['t1_cost'] + delivery_cost['t2_cost']) * 1.20

    return (
        f"‚úÖ **–†–∞—Å—á–µ—Ç –¥–ª—è –ö–ê–†–ì–û –¥–æ—Å—Ç–∞–≤–∫–∏:**\n"
        f"‚Ä¢ **–¢–æ–≤–∞—Ä:** {delivery_data['weight']} –∫–≥ {delivery_data['product_type']}\n"
        f"‚Ä¢ **–û–±—ä–µ–º:** {delivery_data.get('volume', 'N/A'):.2f} –º¬≥ {f'({delivery_data.get(\"dimensions_str\", \"\")})' if delivery_data.get('dimensions_str') else ''}\n"
        f"‚Ä¢ **–ì–æ—Ä–æ–¥:** {delivery_data['city'].capitalize()}\n"
        f"‚Ä¢ **{density_info}**\n\n"
        f"*{t1_basis_info}*\n\n"
        f"--- \n"
        f"üè∑Ô∏è **–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏:**\n\n"
        f"**üöö –í–ê–†–ò–ê–ù–¢ 1: –î–û–°–¢–ê–í–ö–ê –î–û –ê–õ–ú–ê–¢–´ (—Å–∞–º–æ–≤—ã–≤–æ–∑)**\n"
        f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_cost['t1_cost']:.0f} ‚Ç∏\n"
        f"‚Ä¢ –°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–±–æ—Ä (20%): {delivery_cost['t1_cost'] * 0.20:.0f} ‚Ç∏\n"
        f"üí∞ **–ò–¢–û–ì–û: {cost_t1_with_service:,.0f} ‚Ç∏**\n\n"
        f"**üè† –í–ê–†–ò–ê–ù–¢ 2: –î–û–°–¢–ê–í–ö–ê –î–û –î–í–ï–†–ò –≤ –≥. {delivery_data['city'].capitalize()}**\n"
        f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ (–¢1+–¢2): {delivery_cost['t1_cost'] + delivery_cost['t2_cost']:.0f} ‚Ç∏\n"
        f"‚Ä¢ –°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–±–æ—Ä (20%): {(delivery_cost['t1_cost'] + delivery_cost['t2_cost']) * 0.20:.0f} ‚Ç∏\n"
        f"üí∞ **–ò–¢–û–ì–û: {cost_t1_t2_with_service:,.0f} ‚Ç∏**\n\n"
        f"--- \n"
        f"üí° **–ù–∞–ø–∏—à–∏—Ç–µ `1` –∏–ª–∏ `2`, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç.**"
    )

def get_customs_full_calculation(delivery_data, customs_data, tnved_code):
    """–ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –∏ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–æ–π"""
    delivery_cost = calculate_quick_cost(delivery_data['weight'], delivery_data['volume'], delivery_data['product_type'], delivery_data['city'])
    if not delivery_cost or delivery_cost.get('error'): return "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏. " + (delivery_cost.get('error') or "")
    
    needs_certification = check_certification_requirements(delivery_data['product_type'])
    customs_cost = calculate_customs_cost(customs_data['invoice_value'], delivery_data['product_type'], delivery_data['weight'], False, needs_certification)
    if not customs_cost: return "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏"
    
    t1_total = delivery_cost['t1_cost'] * 1.20 + customs_cost['total_kzt']
    t2_total = (delivery_cost['t1_cost'] + delivery_cost['t2_cost']) * 1.20 + customs_cost['total_kzt']
    
    return (
        f"üìä **–†–∞—Å—á–µ—Ç –¥–ª—è –ò–ù–í–û–ô–°:**\n\n"
        f"‚úÖ **–¢–æ–≤–∞—Ä:** {delivery_data['weight']} –∫–≥ {delivery_data['product_type']} –≤ –≥. {delivery_data['city'].capitalize()}\n"
        f"‚úÖ **–¢–∞–º–æ–∂–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** {customs_data['invoice_value']} USD\n"
        f"‚úÖ **–ö–æ–¥ –¢–ù–í–≠–î:** {tnved_code}\n\n"
        f"--- \n"
        f"üè∑Ô∏è **–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏:**\n\n"
        f"**üöö –í–ê–†–ò–ê–ù–¢ 1: –î–û–°–¢–ê–í–ö–ê –î–û –ê–õ–ú–ê–¢–´ (—Å–∞–º–æ–≤—ã–≤–æ–∑)**\n"
        f"‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ + —É—Å–ª—É–≥–∏ + —Å–±–æ—Ä—ã: {t1_total:,.0f} ‚Ç∏\n\n"
        f"**üè† –í–ê–†–ò–ê–ù–¢ 2: –î–û–°–¢–ê–í–ö–ê –î–û –î–í–ï–†–ò**\n"
        f"‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ + —É—Å–ª—É–≥–∏ + —Å–±–æ—Ä—ã: {t2_total:,.0f} ‚Ç∏\n\n"
        f"--- \n"
        f"üìÑ **–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:** {'—Ç—Ä–µ–±—É–µ—Ç—Å—è' if needs_certification else '–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n\n"
        f"üí° **–ù–∞–ø–∏—à–∏—Ç–µ `1` –∏–ª–∏ `2` —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç.**"
    )

def show_final_calculation(delivery_data, customs_data, delivery_option):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    delivery_cost = calculate_quick_cost(delivery_data['weight'], delivery_data['volume'], delivery_data['product_type'], delivery_data['city'])
    if not delivery_cost or delivery_cost.get('error'): return "–û—à–∏–±–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞."

    if delivery_data['delivery_type'] == 'CARGO':
        total_cost = delivery_cost['t1_cost'] * 1.20 if delivery_option == "—Å–∞–º–æ–≤—ã–≤–æ–∑" else (delivery_cost['t1_cost'] + delivery_cost['t2_cost']) * 1.20
    else: # INVOICE
        customs_cost_data = calculate_customs_cost(customs_data['invoice_value'], delivery_data['product_type'], delivery_data['weight'], False, False)
        total_delivery = delivery_cost['t1_cost'] * 1.20 if delivery_option == "—Å–∞–º–æ–≤—ã–≤–æ–∑" else (delivery_cost['t1_cost'] + delivery_cost['t2_cost']) * 1.20
        total_cost = total_delivery + customs_cost_data['total_kzt']

    return (
        f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –î–û–°–¢–ê–í–ö–ê –î–û {'–î–í–ï–†–ò' if delivery_option == '–¥–æ –¥–≤–µ—Ä–∏' else '–ê–õ–ú–ê–¢–´ (—Å–∞–º–æ–≤—ã–≤–æ–∑)'}\n\n"
        f"üí∞ **–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost:,.0f} ‚Ç∏**\n"
        f"‚è±Ô∏è –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: 12-15 –¥–Ω–µ–π\n\n"
        f"üíé –ï—Å–ª–∏ –≤–∞—Å —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω–∞—à —Ç–∞—Ä–∏—Ñ, –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É!\n"
        f"üìù –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ **–∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞**."
    )

# --- –ú–ê–†–®–†–£–¢–´ FLASK ---
@app.route('/', methods=['GET'])
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —á–∞—Ç–æ–º"""
    if 'delivery_data' not in session:
        session['delivery_data'] = {}
        session['customs_data'] = {}
        session['chat_history'] = []
        session['waiting_for_contacts'] = False
        session['waiting_for_customs'] = False
        session['waiting_for_delivery_choice'] = False
        session['waiting_for_tnved'] = False
    if main_model is None:
        initialize_models()
    return render_template('index.html')

@app.route('/chat', methods=['POST'])
def chat():
    try:
        user_message = request.json.get('message', '').strip()
        if not user_message: return jsonify({"response": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."})

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–µ—Å—Å–∏–∏
        delivery_data = session.get('delivery_data', {})
        customs_data = session.get('customs_data', {})
        chat_history = session.get('chat_history', [])
        
        chat_history.append(f"–ö–ª–∏–µ–Ω—Ç: {user_message}")

        # –°–±—Ä–æ—Å –ø–æ –∫–æ–º–∞–Ω–¥–µ
        if user_message.lower() in ['/start', '—Å–±—Ä–æ—Å', '—Å—Ç–∞—Ä—Ç', '–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', '–Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç']:
            session.clear()
            return jsonify({"response": "üöö –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PostPro!\n\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –ö–∏—Ç–∞—è –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω.\n\nüì¶ **–ö–ê–†–ì–û** - –¥–ª—è –ª–∏—á–Ω—ã—Ö –≤–µ—â–µ–π –∏ –ø—Ä–æ–±–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π\nüìÑ **–ò–ù–í–û–ô–°** - –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø–∞—Ä—Ç–∏–π —Å —Ä–∞—Å—Ç–∞–º–æ–∂–∫–æ–π\n\nüí° **–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ:**\n‚Ä¢ –í–µ—Å –≥—Ä—É–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50 –∫–≥)\n‚Ä¢ **–û–±—ä–µ–º –≥—Ä—É–∑–∞ (–º¬≥) –∏–ª–∏ –≥–∞–±–∞—Ä–∏—Ç—ã (–î√ó–®√ó–í –≤ —Å–º)**\n‚Ä¢ –¢–∏–ø —Ç–æ–≤–∞—Ä–∞ (–æ–¥–µ–∂–¥–∞, —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ —Ç.–¥.)\n‚Ä¢ –ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ\n\n‚ú® **–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**\n\"50 –∫–≥ –æ–¥–µ–∂–¥—ã –≤ –ê—Å—Ç–∞–Ω—É, –æ–±—ä–µ–º 0.5 –º¬≥\"\n\"–ö–∞—Ä–≥–æ 100 –∫–≥ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏ –≤ –ê–ª–º–∞—Ç—ã, –≥–∞–±–∞—Ä–∏—Ç—ã 120x80x60 —Å–º\""})

        # --- –õ–û–ì–ò–ö–ê –î–ò–ê–õ–û–ì–ê –ü–û –°–û–°–¢–û–Ø–ù–ò–Ø–ú ---

        # 1. –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
        if session.get('waiting_for_delivery_choice'):
            if is_delivery_choice(user_message):
                delivery_option = parse_delivery_choice(user_message)
                delivery_data['delivery_option'] = delivery_option
                session['delivery_data'] = delivery_data
                session['waiting_for_delivery_choice'] = False
                session['waiting_for_contacts'] = True # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                response = show_final_calculation(delivery_data, customs_data, delivery_option)
            else:
                response = get_gemini_response(user_message, "–ö–ª–∏–µ–Ω—Ç –∑–∞–¥–∞–µ—Ç –æ—Ç–≤–ª–µ—á–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –Ω–∞–ø–æ–º–Ω–∏ –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: 1 –∏–ª–∏ 2.")
            
            chat_history.append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {response}")
            session['chat_history'] = chat_history
            return jsonify({"response": response})

        # 2. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        if session.get('waiting_for_contacts'):
            name, phone = extract_contact_info(user_message)
            if name and phone:
                session['waiting_for_contacts'] = False
                app_details = (
                    f"–¢–∏–ø: {delivery_data.get('delivery_type', 'N/A')}\n"
                    f"–í–µ—Å: {delivery_data.get('weight')} –∫–≥\n"
                    f"–û–±—ä–µ–º: {delivery_data.get('volume'):.2f} –º¬≥\n"
                    f"–¢–æ–≤–∞—Ä: {delivery_data.get('product_type')}\n"
                    f"–ì–æ—Ä–æ–¥: {delivery_data.get('city')}\n"
                    f"–î–æ—Å—Ç–∞–≤–∫–∞: {delivery_data.get('delivery_option')}\n"
                    f"–ò–º—è: {name}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                )
                if delivery_data.get('delivery_type') == 'INVOICE':
                    app_details += (f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∏–Ω–≤–æ–π—Å–∞: {customs_data.get('invoice_value')} USD\n"
                                    f"–ö–æ–¥ –¢–ù–í–≠–î: {customs_data.get('tnved_code', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n")
                save_application(app_details)
                response = f"ü§ñ ‚úÖ **–ó–∞—è–≤–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!**\n\n{name}, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É {phone} –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\nüîÑ –î–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´—Å—Ç–∞—Ä—Ç¬ª"
            else:
                response = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ **–∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω**."
            
            chat_history.append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {response}")
            session['chat_history'] = chat_history
            return jsonify({"response": response})

        # --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –°–ë–û–†–ê –î–ê–ù–ù–´–• ---
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        extracted_delivery = extract_delivery_info(user_message)
        delivery_data.update(extracted_delivery)
        
        extracted_customs_val, extracted_tnved = extract_customs_info(user_message)
        if extracted_customs_val: customs_data['invoice_value'] = extracted_customs_val
        if extracted_tnved: customs_data['tnved_code'] = extracted_tnved
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
        if not delivery_data.get('delivery_type'):
            delivery_data['delivery_type'] = 'INVOICE' if customs_data.get('invoice_value') or '–∏–Ω–≤–æ–π—Å' in user_message.lower() else 'CARGO'
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≤ —Å–µ—Å—Å–∏—é
        session['delivery_data'] = delivery_data
        session['customs_data'] = customs_data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã
        missing_data = get_missing_data(delivery_data, customs_data, delivery_data['delivery_type'])
        
        if missing_data:
            response = f"–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ: **{', '.join(missing_data)}**"
        else:
            # –í—Å–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –¥–µ–ª–∞–µ–º —Ä–∞—Å—á–µ—Ç
            if delivery_data['delivery_type'] == 'CARGO':
                delivery_cost = calculate_quick_cost(delivery_data['weight'], delivery_data['volume'], delivery_data['product_type'], delivery_data['city'])
                if delivery_cost and not delivery_cost.get('error'):
                    response = get_cargo_calculation_response(delivery_data, delivery_cost)
                    session['waiting_for_delivery_choice'] = True
                else:
                    response = "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞. " + (delivery_cost.get('error') or "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
            
            else: # INVOICE
                tnved_code = customs_data.get('tnved_code') or get_tnved_code(delivery_data['product_type'])
                customs_data['tnved_code'] = tnved_code
                session['customs_data'] = customs_data
                response = get_customs_full_calculation(delivery_data, customs_data, tnved_code)
                session['waiting_for_delivery_choice'] = True
        
        chat_history.append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {response}")
        session['chat_history'] = chat_history
        return jsonify({"response": response})

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ /chat: {e}", exc_info=True)
        return jsonify({"response": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—Å–∞–≤ ¬´—Å—Ç–∞—Ä—Ç¬ª."})

@app.route('/clear', methods=['POST'])
def clear_chat():
    session.clear()
    return jsonify({"status": "success"})

if __name__ == '__main__':
    if initialize_models():
        try:
            hostname = socket.gethostname()
            local_ip = socket.gethostbyname(hostname)
            logger.info(f"=== PostPro Chat Bot –∑–∞–ø—É—â–µ–Ω ===")
            logger.info(f"–õ–æ–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø: http://localhost:5000")
            logger.info(f"–°–µ—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø: http://{local_ip}:5000")
            logger.info(f"=================================")
            app.run(host='0.0.0.0', port=5000, debug=False)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Flask —Å–µ—Ä–≤–µ—Ä: {e}")
    else:
        logger.error("!!! –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏ Gemini. –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")
