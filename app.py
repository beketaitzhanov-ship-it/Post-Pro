from flask import Flask, render_template, request, jsonify
import requests
import os
import logging
import re
from datetime import datetime

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY', 'your_gemini_api_key_here')
GEMINI_URL = f"https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent?key={GEMINI_API_KEY}"

# –¢–∞—Ä–∏—Ñ—ã –¥–æ—Å—Ç–∞–≤–∫–∏ (–≤ USD)
TARIFFS = {
    'T1': {
        'rate_per_kg': 2.5,
        'rate_per_m3': 350,
        'min_cost': 50
    },
    'T2': {
        'rate_per_kg': 1.8,
        'rate_per_m3': 280,
        'min_cost': 40
    }
}

# –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
SERVICES = {
    'certificate_origin': 500,  # USD
    'certificate_conformity': 120000,  # Tenge
    'broker_consultation': 300  # USD
}

class ChatProcessor:
    def __init__(self):
        self.user_data = {}
    
    def extract_initial_info(self, message):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Å, —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –∏ –≥–æ—Ä–æ–¥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        info = {'weight': None, 'product_type': '', 'city': ''}
        
        # –ü–æ–∏—Å–∫ –≤–µ—Å–∞ (—á–∏—Å–ª–æ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è)
        weight_pattern = r'(\d+(?:\.\d+)?)\s*(–∫–≥|kg|kilogram)'
        weight_match = re.search(weight_pattern, message.lower())
        if weight_match:
            info['weight'] = float(weight_match.group(1))
        
        # –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞ (–ø—Ä–æ—Å—Ç–µ–π—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç)
        cities = ['–∞–ª–º–∞—Ç', '–∞—Å—Ç–∞–Ω–∞', '—à—ã–º–∫–µ–Ω—Ç', '–∞–∫—Ç–æ–±–µ', '–∫–∞—Ä–∞–≥–∞–Ω–¥–∞', '—Ç–∞—Ä–∞–∑', '—É—Ä—å–ª—å—Å–∫', '–ø–∞–≤–ª–æ–¥–∞—Ä']
        for city in cities:
            if city in message.lower():
                info['city'] = city.capitalize()
                break
        
        # –¢–∏–ø —Ç–æ–≤–∞—Ä–∞ - –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
        words = message.split()
        if info['weight']:
            words = [w for w in words if str(info['weight']) not in w]
        if info['city']:
            words = [w for w in words if info['city'].lower() not in w.lower()]
        
        info['product_type'] = ' '.join(words)
        
        return info
    
    async def get_tnved_info(self, product_name, tnved_code=None):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–¥–µ –¢–ù –í–≠–î —á–µ—Ä–µ–∑ Gemini API"""
        if not GEMINI_API_KEY or GEMINI_API_KEY == 'your_gemini_api_key_here':
            return self.get_mock_tnved_info(product_name, tnved_code)
        
        try:
            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ–≤–∞—Ä: "{product_name}" 
            """
            if tnved_code:
                prompt += f"–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –¢–ù –í–≠–î: {tnved_code}"
            else:
                prompt += "–ü—Ä–µ–¥–ª–æ–∂–∏ 2-3 –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö –∫–æ–¥–∞ –¢–ù –í–≠–î –ï–ê–≠–°"
            
            prompt += """
            –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
            {
                "verified": true/false,
                "tnved_codes": ["–∫–æ–¥1", "–∫–æ–¥2"],
                "customs_duty_rate": —á–∏—Å–ª–æ,
                "requires_certification": true/false,
                "certification_type": "—Ç–∏–ø —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞",
                "product_description": "–æ–ø–∏—Å–∞–Ω–∏–µ"
            }
            """
            
            response = requests.post(
                GEMINI_URL,
                json={
                    "contents": [{
                        "parts": [{"text": prompt}]
                    }]
                },
                timeout=30
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                logger.error(f"Gemini API error: {response.status_code}")
                return self.get_mock_tnved_info(product_name, tnved_code)
                
        except Exception as e:
            logger.error(f"Error calling Gemini: {e}")
            return self.get_mock_tnved_info(product_name, tnved_code)
    
    def get_mock_tnved_info(self, product_name, tnved_code=None):
        """–ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        mock_data = {
            "verified": True,
            "tnved_codes": ["8516 79 910 0", "8516 79 900 0"],
            "customs_duty_rate": 5.0,
            "requires_certification": True,
            "certification_type": "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¢–† –¢–° 004/2011",
            "product_description": "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–±–æ—Ä—ã –¥–ª—è –Ω–∞–≥—Ä–µ–≤–∞ –∂–∏–¥–∫–æ—Å—Ç–µ–π"
        }
        return mock_data
    
    def calculate_shipping_cost(self, weight, volume, delivery_type):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏"""
        tariff = TARIFFS[delivery_type]
        
        # –†–∞—Å—á–µ—Ç –ø–æ –≤–µ—Å—É
        weight_cost = weight * tariff['rate_per_kg']
        
        # –†–∞—Å—á–µ—Ç –ø–æ –æ–±—ä–µ–º—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        volume_cost = volume * tariff['rate_per_m3'] if volume else 0
        
        # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        shipping_cost = max(weight_cost, volume_cost, tariff['min_cost'])
        
        return shipping_cost
    
    def calculate_customs_duty(self, product_value, duty_rate, has_origin_cert=False):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–∞–º–æ–∂–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏"""
        # –¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞
        duty = product_value * (duty_rate / 100)
        
        # –°–∫–∏–¥–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è
        if has_origin_cert:
            duty *= 0.75  # 25% —Å–∫–∏–¥–∫–∞
        
        # –ù–î–° (12% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ + –ø–æ—à–ª–∏–Ω–∞)
        vat = (product_value + duty) * 0.12
        
        # –¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
        customs_fee = 100  # USD
        
        total_customs = duty + vat + customs_fee
        
        return {
            'duty': duty,
            'vat': vat,
            'customs_fee': customs_fee,
            'total_customs': total_customs
        }

chat_processor = ChatProcessor()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/chat', methods=['POST'])
async def chat():
    try:
        user_message = request.json.get('message', '').strip()
        user_session = request.json.get('session_id', 'default')
        
        if user_session not in chat_processor.user_data:
            chat_processor.user_data[user_session] = {
                'step': 'initial',
                'data': {}
            }
        
        session_data = chat_processor.user_data[user_session]
        response = await process_message(user_message, session_data)
        
        return jsonify(response)
        
    except Exception as e:
        logger.error(f"Chat error: {e}")
        return jsonify({
            'response': '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            'session_data': chat_processor.user_data.get(user_session, {})
        })

async def process_message(message, session_data):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    if session_data['step'] == 'initial':
        # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        initial_info = chat_processor.extract_initial_info(message)
        session_data['data'].update(initial_info)
        
        if not all([initial_info['weight'], initial_info['product_type'], initial_info['city']]):
            return {
                'response': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–í–µ—Å —Ç–∏–ø_—Ç–æ–≤–∞—Ä–∞ –≥–æ—Ä–æ–¥"\n–ù–∞–ø—Ä–∏–º–µ—Ä: "100 –∫–≥ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏ –≤ –ê—Å—Ç–∞–Ω—É"',
                'session_data': session_data
            }
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
        session_data['step'] = 'choose_delivery_type'
        return {
            'response': f'''–û—Ç–ª–∏—á–Ω–æ! –Ø –ø–æ–Ω—è–ª:
‚Ä¢ –í–µ—Å: {initial_info["weight"]} –∫–≥
‚Ä¢ –¢–æ–≤–∞—Ä: {initial_info["product_type"]}
‚Ä¢ –ì–æ—Ä–æ–¥: {initial_info["city"]}

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:

üü¢ **–ö–ê–†–ì–û** (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞)
‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ª–∏—á–Ω—ã—Ö –≤–µ—â–µ–π, –ø—Ä–æ–±–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π
‚Ä¢ –†–∞—Å—á–µ—Ç –ø–æ –≥–æ—Ç–æ–≤—ã–º —Ç–∞—Ä–∏—Ñ–∞–º –¢1 –∏ –¢2
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç

üîµ **–ò–ù–í–û–ô–°** (–ø–æ–ª–Ω–æ–µ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ)
‚Ä¢ –î–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø–∞—Ä—Ç–∏–π —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ –ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–ø–æ—à–ª–∏–Ω–∞, –ù–î–°, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã)
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–æ–¥—É –¢–ù –í–≠–î

**–ß—Ç–æ –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç?** (–Ω–∞–ø–∏—à–∏—Ç–µ "–ö–∞—Ä–≥–æ" –∏–ª–∏ "–ò–Ω–≤–æ–π—Å")''',
            'session_data': session_data
        }
    
    elif session_data['step'] == 'choose_delivery_type':
        message_lower = message.lower()
        
        if '–∫–∞—Ä–≥–æ' in message_lower:
            session_data['delivery_type'] = 'cargo'
            session_data['step'] = 'cargo_calculation'
            return await handle_cargo_calculation(session_data)
        
        elif '–∏–Ω–≤–æ–π—Å' in message_lower:
            session_data['delivery_type'] = 'invoice'
            session_data['step'] = 'get_tnved_code'
            return {
                'response': '–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–¥ –¢–ù –í–≠–î.\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¢–ù –í–≠–î, –µ—Å–ª–∏ –æ–Ω –≤–∞–º –∏–∑–≤–µ—Å—Ç–µ–Ω, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.',
                'session_data': session_data
            }
        
        else:
            return {
                'response': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: –Ω–∞–ø–∏—à–∏—Ç–µ "–ö–∞—Ä–≥–æ" –∏–ª–∏ "–ò–Ω–≤–æ–π—Å"',
                'session_data': session_data
            }
    
    elif session_data['step'] == 'get_tnved_code':
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥ –¢–ù –í–≠–î —á–µ—Ä–µ–∑ Gemini
        product_name = session_data['data']['product_type']
        tnved_code = message if re.match(r'\d{4}\s\d{2}\s\d{3}\s\d', message) else None
        
        tnved_info = await chat_processor.get_tnved_info(product_name, tnved_code)
        session_data['tnved_info'] = tnved_info
        
        if tnved_code and not tnved_info.get('verified', False):
            session_data['step'] = 'tnved_not_verified'
            return {
                'response': f'''‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** –ö–æ–¥ –¢–ù –í–≠–î {tnved_code} –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–º –¥–ª—è —Ç–æ–≤–∞—Ä–∞ "{product_name}".

–í–æ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ –∫–æ–¥—ã:
{chr(10).join([f"‚Ä¢ {code}" for code in tnved_info.get('tnved_codes', [])])}

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–¥–∞ –¢–ù –í–≠–î –∏ –∏–∑–±–µ–∂–∞–Ω–∏—è —à—Ç—Ä–∞—Ñ–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º –±—Ä–æ–∫–µ—Ä–æ–º.

–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π (–æ—Ç–≤–µ—Ç—å—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é" –¥–ª—è –∫–æ–¥–∞ {tnved_code})''',
                'session_data': session_data
            }
        
        session_data['step'] = 'get_product_value'
        return {
            'response': f'''‚úÖ –ö–æ–¥ –¢–ù –í–≠–î –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: {tnved_info.get('tnved_codes', [''])[0]}
–û–ø–∏—Å–∞–Ω–∏–µ: {tnved_info.get('product_description', '')}

–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –ø–æ –∏–Ω–≤–æ–π—Å—É (–≤ USD):''',
            'session_data': session_data
        }
    
    elif session_data['step'] == 'tnved_not_verified':
        if '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é' in message.lower():
            session_data['step'] = 'get_product_value'
            return {
                'response': '–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –ø–æ –∏–Ω–≤–æ–π—Å—É (–≤ USD):',
                'session_data': session_data
            }
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –¥—Ä—É–≥–æ–π –∫–æ–¥
            session_data['tnved_info']['tnved_codes'] = [message]
            session_data['tnved_info']['verified'] = True
            session_data['step'] = 'get_product_value'
            return {
                'response': f'‚úÖ –í—ã–±—Ä–∞–Ω –∫–æ–¥ –¢–ù –í–≠–î: {message}\n\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –ø–æ –∏–Ω–≤–æ–π—Å—É (–≤ USD):',
                'session_data': session_data
            }
    
    elif session_data['step'] == 'get_product_value':
        try:
            product_value = float(message)
            session_data['data']['product_value'] = product_value
            session_data['step'] = 'get_origin_certificate'
            
            currency_warning = ''
            if product_value > 50000:
                currency_warning = '\n\n‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –°—É–º–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç $50,000. –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ù–∞—Ü–±–∞–Ω–∫–µ –†–ö.'
            
            return {
                'response': f'''–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è (Form A) –Ω–∞ –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä?
‚Ä¢ **–î–∞** - –µ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
‚Ä¢ **–ù–µ—Ç, –Ω–æ –Ω—É–∂–µ–Ω** - –Ω—É–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å
‚Ä¢ **–ù–µ—Ç, –Ω–µ –Ω—É–∂–µ–Ω** - –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è{currency_warning}''',
                'session_data': session_data
            }
        except ValueError:
            return {
                'response': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ USD (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):',
                'session_data': session_data
            }
    
    elif session_data['step'] == 'get_origin_certificate':
        message_lower = message.lower()
        
        if '–¥–∞' in message_lower:
            session_data['has_origin_cert'] = True
            session_data['needs_origin_cert'] = False
        elif '–Ω–µ—Ç, –Ω–æ –Ω—É–∂–µ–Ω' in message_lower or '–Ω—É–∂–µ–Ω' in message_lower:
            session_data['has_origin_cert'] = False
            session_data['needs_origin_cert'] = True
        else:
            session_data['has_origin_cert'] = False
            session_data['needs_origin_cert'] = False
        
        return await generate_final_invoice_calculation(session_data)
    
    elif session_data['step'] == 'cargo_calculation':
        # –î–ª—è –∫–∞—Ä–≥–æ –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É
        return await handle_cargo_calculation(session_data)
    
    return {
        'response': '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.',
        'session_data': {'step': 'initial', 'data': {}}
    }

async def handle_cargo_calculation(session_data):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—á–µ—Ç –∫–∞—Ä–≥–æ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    data = session_data['data']
    weight = data['weight']
    
    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    t1_cost = chat_processor.calculate_shipping_cost(weight, None, 'T1')
    t2_cost = chat_processor.calculate_shipping_cost(weight, None, 'T2')
    
    response = f'''üì¶ **–†–ê–°–ß–ï–¢ –î–û–°–¢–ê–í–ö–ò –ö–ê–†–ì–û**

‚Ä¢ –í–µ—Å: {weight} –∫–≥
‚Ä¢ –¢–æ–≤–∞—Ä: {data["product_type"]}
‚Ä¢ –ì–æ—Ä–æ–¥: {data["city"]}

**–¢–∞—Ä–∏—Ñ –¢1** (—Å–∫–ª–∞–¥-—Å–∫–ª–∞–¥):
- –°—Ç–æ–∏–º–æ—Å—Ç—å: ${t1_cost:.2f} USD
- –°—Ä–æ–∫: 7-10 –¥–Ω–µ–π

**–¢–∞—Ä–∏—Ñ –¢2** (–¥–æ –¥–≤–µ—Ä–∏):
- –°—Ç–æ–∏–º–æ—Å—Ç—å: ${t2_cost:.2f} USD  
- –°—Ä–æ–∫: 10-14 –¥–Ω–µ–π

üí° *–°—Ç–æ–∏–º–æ—Å—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π. –î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–∂–µ–Ω –æ–±—ä–µ–º –≥—Ä—É–∑–∞.*

‚úÖ **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!** –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.'''
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
    session_data['step'] = 'initial'
    session_data['data'] = {}
    
    return {
        'response': response,
        'session_data': session_data
    }

async def generate_final_invoice_calculation(session_data):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –∏–Ω–≤–æ–π—Å–∞"""
    data = session_data['data']
    tnved_info = session_data['tnved_info']
    
    # –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏
    shipping_cost = chat_processor.calculate_shipping_cost(data['weight'], None, 'T2')
    
    # –†–∞—Å—á–µ—Ç —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    customs_calc = chat_processor.calculate_customs_duty(
        data['product_value'],
        tnved_info.get('customs_duty_rate', 5),
        session_data.get('has_origin_cert', False)
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
    additional_services = []
    total_additional = 0
    
    if session_data.get('needs_origin_cert'):
        additional_services.append(f"‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è: ${SERVICES['certificate_origin']} USD")
        total_additional += SERVICES['certificate_origin']
    
    if tnved_info.get('requires_certification'):
        additional_services.append(f"‚Ä¢ {tnved_info.get('certification_type', '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è')}: {SERVICES['certificate_conformity']:,} ‚Ç∏")
        total_additional += SERVICES['certificate_conformity'] / 550  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ USD
    
    # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    total_cost_usd = shipping_cost + customs_calc['total_customs'] + total_additional
    total_cost_kzt = total_cost_usd * 550
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = f'''üìä **–ü–û–õ–ù–´–ô –†–ê–°–ß–ï–¢ –î–û–°–¢–ê–í–ö–ò –° –†–ê–°–¢–ê–ú–û–ñ–ö–û–ô**

**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä—É–∑–∞:**
‚Ä¢ –¢–æ–≤–∞—Ä: {data["product_type"]}
‚Ä¢ –ö–æ–¥ –¢–ù –í–≠–î: {tnved_info.get('tnved_codes', [''])[0]}
‚Ä¢ –í–µ—Å: {data["weight"]} –∫–≥
‚Ä¢ –ì–æ—Ä–æ–¥: {data["city"]}
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: ${data["product_value"]:,.2f} USD

**–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ (–¢–∞—Ä–∏—Ñ –¢2):**
‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –¥–≤–µ—Ä–∏: ${shipping_cost:.2f} USD

**–¢–∞–º–æ–∂–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:**
‚Ä¢ –ü–æ—à–ª–∏–Ω–∞ ({tnved_info.get('customs_duty_rate', 5)}%): ${customs_calc['duty']:.2f} USD
‚Ä¢ –ù–î–° (12%): ${customs_calc['vat']:.2f} USD
‚Ä¢ –°–±–æ—Ä –∑–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: ${customs_calc['customs_fee']:.2f} USD
‚Ä¢ **–ò—Ç–æ–≥–æ —Ç–∞–º–æ–∂–µ–Ω–Ω—ã–µ: ${customs_calc['total_customs']:.2f} USD**

**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:**
{chr(10).join(additional_services) if additional_services else "‚Ä¢ –ù–µ—Ç"}

**–û–ë–©–ê–Ø –ü–†–ò–ë–õ–ò–ó–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨:**
**${total_cost_usd:.2f} USD / {total_cost_kzt:,.0f} ‚Ç∏** (–∫—É—Ä—Å 1 USD = 550 ‚Ç∏)

---

‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï:**
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π
‚Ä¢ –¢–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ—Å–ª–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ –°—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –°–í–• ‚Äî 2 –º–µ—Å—è—Ü–∞

‚úÖ **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–º—É –±—Ä–æ–∫–µ—Ä—É!**
üìû –°–≤—è–∂–µ–º—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ (—Å 10:00 –¥–æ 18:00, –ê—Å—Ç–∞–Ω–∞)'''
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
    session_data['step'] = 'initial'
    session_data['data'] = {}
    
    return {
        'response': response,
        'session_data': session_data
    }

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
