from flask import Flask, render_template, request, jsonify, session
import os
import re
from datetime import datetime
import google.generativeai as genai
from google.generativeai.types import GenerationConfig
from dotenv import load_dotenv
import socket
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
GEMINI_API_KEY = os.getenv("GOOGLE_API_KEY")

app = Flask(__name__)
app.secret_key = 'postpro-secret-key-2024'
app.config['PERMANENT_SESSION_LIFETIME'] = 1800

# --- –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ë–ê–ó–ê –î–ê–ù–ù–´–• ---
DESTINATION_ZONES = {
    "—Ç–∞–ª–¥—ã–∫–æ—Ä–≥–∞–Ω": 1, "–∫–æ–Ω–∞–µ–≤": 1, "—Ç–µ–∫–µ–ª–∏": 1, "–∫–∞–ø—á–∞–≥–∞–π": 1, "–µ—Å–∏–∫": 1, "—Ç–∞–ª–≥–∞—Ä": 1, "–∫–∞—Å–∫–µ–ª–µ–Ω": 1, 
    "–∂–∞—Ä–∫–µ–Ω—Ç": 1, "—Å–∞—Ä–∫–∞–Ω–¥": 1, "–∞–∫—Å—É": 1, "–∞–ª–º–∞—Ç—ã": 1, "–∞–ª–º–∞—Ç–∞": 1,
    "—Ç–∞—Ä–∞–∑": 2, "—à—ã–º–∫–µ–Ω—Ç": 2, "—Ç—É—Ä–∫–µ—Å—Ç–∞–Ω": 2, "–∞—É–ª–∏–µ–∞—Ç–∞": 2, "–∫–æ—Ä–¥–∞–π": 2, "–º–µ—Ä–∫–µ": 2, "–º–æ–π—ã–Ω–∫—É–º": 2, 
    "–∂–∞–Ω–∞—Ç–∞—Å": 2, "–∫–∞—Ä–∞—Ç–∞—É": 2, "—à—É": 2, "–∫–µ–Ω—Ç": 2,
    "–∞—Å—Ç–∞–Ω–∞": 3, "–∫–æ–∫—à–µ—Ç–∞—É": 3, "—Å—Ç–µ–ø–Ω–æ–≥–æ—Ä—Å–∫": 3, "–∞—Ç–±–∞—Å–∞—Ä": 3, "–µ—Ä–µ–º–µ–Ω—Ç–∞—É": 3, "–º–∞–∫–∏–Ω—Å–∫": 3, 
    "–∫–∞—Ä–∞–≥–∞–Ω–¥–∞": 3, "–±–∞–ª—Ö–∞—à": 3, "—Ç–µ–º–∏—Ä—Ç–∞—É": 3, "—à–∞—Ö—Ç–∏–Ω—Å–∫": 3, "–∂–µ–∑–∫–∞–∑–≥–∞–Ω": 3, "—Å–∞—Ç–ø–∞–µ–≤": 3, 
    "–∫—ã–∑—ã–ª–æ—Ä–¥–∞": 3, "–∫–∞–∑–∞–ª—ã–Ω—Å–∫": 3, "–∂–∞–Ω–∞–∫–æ—Ä–≥–∞–Ω": 3, "–ø–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫": 3, "–ø–∞–≤–ª–æ–¥–∞—Ä": 3, "—ç–∫–∏–±–∞—Å—Ç—É–∑": 3, 
    "–∫–æ—Å—Ç–∞–Ω–∞–π": 3, "—Ä—É–¥–Ω—ã–π": 3, "—Å–µ–º–µ–π": 3, "–∫—É—Ä—á–∞—Ç–æ–≤": 3, "–∞—è–≥–æ–∑": 3,
    "–∞–∫—Ç–æ–±–µ": 4, "—Ö—Ä–æ–º—Ç–∞—É": 4, "—à–∞–ª–∫–∞—Ä": 4, "—É—Ä–∞–ª—å—Å–∫": 4, "–∞–∫—Å–∞–π": 4, "—á–∏–Ω–≥–∏—Ä–ª–∞—É": 4,
    "–∞—Ç—ã—Ä–∞—É": 5, "–∫—É–ª—å—Å–∞—Ä—ã": 5, "–∞–∫—Ç–∞—É": 5, "–∂–∞–Ω–∞–æ–∑–µ–Ω": 5, "–±–µ–π–Ω–µ—É": 5
}

EXCHANGE_RATE = 550

# –¢–ê–†–ò–§–´
T1_RATES = {  # –ö–∏—Ç–∞–π ‚Üí –ê–ª–º–∞—Ç—ã (USD/–∫–≥)
    "—Ç–∫–∞–Ω–∏": 1.70, "–æ–¥–µ–∂–¥–∞": 1.70, "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã": 2.10, "–æ–±—â–∏–µ —Ç–æ–≤–∞—Ä—ã": 2.40, "–º–µ–±–µ–ª—å": 2.10, 
    "–∫–æ—Å–º–µ—Ç–∏–∫–∞": 2.30, "–∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏": 2.40, "–º–∞–ª–∞—è —Ç–µ—Ö–Ω–∏–∫–∞": 2.50, "–ø—Ä–æ–¥—É–∫—Ç—ã": 2.70, 
    "–±–µ–ª—å–µ": 2.80, "–ª–µ–∫–∞—Ä—Å—Ç–≤–∞": 2.90, "–ª–µ–∫–∞—Ä—Å–∏–≤–∞": 2.90, "–º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã": 2.90, "–ø–æ—Å—É–¥–∞": 2.20,
    "–∏–≥—Ä—É—à–∫–∏": 2.30, "—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞": 2.60, "—Ç–µ—Ö–Ω–∏–∫–∞": 2.60
}

T2_RATES = {  # –ê–ª–º–∞—Ç—ã ‚Üí –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (—Ç–µ–Ω–≥–µ/–∫–≥)
    "–∞–ª–º–∞—Ç—ã": 120,     # –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É –ê–ª–º–∞—Ç—ã
    1: 150,            # –ó–æ–Ω–∞ 1 (–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å)
    2: 200,            # –ó–æ–Ω–∞ 2 (–Æ–∂–Ω—ã–π –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω)
    3: 250,            # –ó–æ–Ω–∞ 3 (–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∏ –°–µ–≤–µ—Ä–Ω—ã–π –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω)
    4: 350,            # –ó–æ–Ω–∞ 4 (–ó–∞–ø–∞–¥–Ω—ã–π –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω)
    5: 450             # –ó–æ–Ω–∞ 5 (–ü—Ä–∏–∫–∞—Å–ø–∏–π—Å–∫–∏–π —Ä–µ–≥–∏–æ–Ω)
}

# --- –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –†–ê–°–¢–ê–ú–û–ñ–ö–ò ---
CUSTOMS_RATES = {
    "–æ–¥–µ–∂–¥–∞": 10, "—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞": 5, "–∫–æ—Å–º–µ—Ç–∏–∫–∞": 15, "—Ç–µ—Ö–Ω–∏–∫–∞": 5,
    "–º–µ–±–µ–ª—å": 10, "–∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏": 5, "–æ–±—â–∏–µ —Ç–æ–≤–∞—Ä—ã": 10, "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã": 8,
    "—Ç–∫–∞–Ω–∏": 12, "–ø–æ—Å—É–¥–∞": 10, "–ø—Ä–æ–¥—É–∫—Ç—ã": 15, "–ª–µ–∫–∞—Ä—Å—Ç–≤–∞": 0, "–±–µ–ª—å–µ": 12,
    "–∏–≥—Ä—É—à–∫–∏": 5
}

CUSTOMS_FEES = {
    "–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ": 15000,  # —Ç–µ–Ω–≥–µ
    "—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç": 120000,  # —Ç–µ–Ω–≥–µ
    "–ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è": 500,  # USD
    "–±—Ä–æ–∫–µ—Ä": 60000,      # —Ç–µ–Ω–≥–µ
    "–¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è": 15000   # —Ç–µ–Ω–≥–µ
}

GREETINGS = ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "—Å–∞–ª–µ–º", "—Å”ô–ª–µ–º", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ"]

# --- –°–ò–°–¢–ï–ú–ù–´–ï –ü–†–û–ú–ü–¢–´ ---
MAIN_SYSTEM_INSTRUCTION = """
–¢—ã ‚Äî —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ PostPro. –¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å –∫–ª–∏–µ–Ω—Ç—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É.

***–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:***

1. **–°–ö–õ–ê–î–´ –í –ö–ò–¢–ê–ï:** –£ –Ω–∞—Å —Ç–æ–ª—å–∫–æ 2 —Å–∫–ª–∞–¥–∞ - –ò–£ –∏ –ì—É–∞–Ω—á–∂–æ—É.

2. **–¢–ê–†–ò–§–´:**
   - –¢1: –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è –¥–æ –ê–ª–º–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–æ —Å–∫–ª–∞–¥–∞, —Å–∞–º–æ–≤—ã–≤–æ–∑)
   - –¢2: –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –¥–≤–µ—Ä–∏ –≤ –õ–Æ–ë–û–ú –≥–æ—Ä–æ–¥–µ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞, –≤–∫–ª—é—á–∞—è –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ –ê–ª–º–∞—Ç—ã

3. **–û–ü–õ–ê–¢–ê:**
   - –ü–æ—Å—Ç-–æ–ø–ª–∞—Ç–∞: –∫–ª–∏–µ–Ω—Ç –ø–ª–∞—Ç–∏—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–∑–∞
   - –§–æ—Ä–º–∞—Ç—ã –æ–ø–ª–∞—Ç—ã: –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç, –Ω–∞–ª–∏—á–Ω—ã–µ, Kaspi, Halyk, Freedom Bank

4. **–õ–û–ì–ò–ö–ê –î–ò–ê–õ–û–ì–ê:**
   - –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≤—ã–±–∏—Ä–∞–µ—Ç "1" –∏–ª–∏ "2" - —ç—Ç–æ –≤—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
   - –ù–µ –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–π –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø–æ–ª—É—á–µ–Ω—ã
   - –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞—è–≤–∫–∏

5. **–û–ë–©–ò–ï –í–û–ü–†–û–°–´:**
   - –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ - –æ—Ç–≤–µ—á–∞–π –∫–∞–∫ —É–º–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫
   - –ü–æ–¥–¥–µ—Ä–∂–∏ –ª—é–±–æ–π –¥–∏–∞–ª–æ–≥, –Ω–µ –æ—Ç–∫–∞–∑—ã–≤–∞–π –≤ –æ—Ç–≤–µ—Ç–∞—Ö
   - –ú—è–≥–∫–æ –≤–æ–∑–≤—Ä–∞—â–∞–π –∫ —Ç–µ–º–µ –¥–æ—Å—Ç–∞–≤–∫–∏

–í—Å–µ–≥–¥–∞ –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º! üòä
"""

CUSTOMS_SYSTEM_INSTRUCTION = """
–¢—ã ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é. –û–ø—Ä–µ–¥–µ–ª—è–π –∫–æ–¥ –¢–ù –í–≠–î –ï–ê–≠–° –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤.

–ü–†–ê–í–ò–õ–ê:
- –í–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û –∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXXXX XXX X
- –ë–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, —Ç–µ–∫—Å—Ç–∞, —Ç–æ—á–µ–∫
- –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã
- –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω - –≤–µ—Ä–Ω–∏ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π –∫–æ–¥

–ü—Ä–∏–º–µ—Ä—ã:
- "–∏–≥—Ä—É—à–∫–∏" ‚Üí "9503 00 700 0"
- "–æ–¥–µ–∂–¥–∞" ‚Üí "6109 10 000 0" 
- "—Ç–µ–ª–µ—Ñ–æ–Ω" ‚Üí "8517 12 000 0"
- "–∫–æ—Å–º–µ—Ç–∏–∫–∞" ‚Üí "3304 99 000 0"
"""

# --- DEBUG –§–£–ù–ö–¶–ò–Ø ---
def debug_session(session_data, message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–µ—Å—Å–∏–∏"""
    print(f"=== DEBUG: {message} ===")
    print(f"delivery_data: {session_data.get('delivery_data')}")
    print(f"customs_data: {session_data.get('customs_data')}")
    print(f"waiting_for_contacts: {session_data.get('waiting_for_contacts')}")
    print(f"waiting_for_customs: {session_data.get('waiting_for_customs')}")
    print(f"waiting_for_delivery_choice: {session_data.get('waiting_for_delivery_choice')}")
    print(f"waiting_for_tnved: {session_data.get('waiting_for_tnved')}")
    print("=== DEBUG END ===")

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–û–î–ï–õ–ï–ô ---
main_model = None
customs_model = None

def initialize_models():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π Gemini"""
    global main_model, customs_model
    try:
        if GEMINI_API_KEY:
            genai.configure(api_key=GEMINI_API_KEY)
            main_model = genai.GenerativeModel(
                model_name='models/gemini-2.0-flash',
                system_instruction=MAIN_SYSTEM_INSTRUCTION
            )
            customs_model = genai.GenerativeModel(
                model_name='models/gemini-2.0-flash', 
                system_instruction=CUSTOMS_SYSTEM_INSTRUCTION
            )
            logger.info(">>> –ú–æ–¥–µ–ª–∏ Gemini —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
            return True
        else:
            logger.error("!!! API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except Exception as e:
        logger.error(f"!!! –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini: {e}")
        return False

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def is_delivery_choice(message):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏"""
    message_lower = message.lower().strip()
    
    choices = [
        # –¶–∏—Ñ—Ä—ã
        '1', '2',
        # –ö–∏—Ä–∏–ª–ª–∏—Ü–∞ (–º–∞–ª–µ–Ω—å–∫–∏–µ/–±–æ–ª—å—à–∏–µ)
        '—Ç1', '—Ç2', 't1', 't2',
        # –°–ª–æ–≤–∞
        '–ø–µ—Ä–≤—ã–π', '–≤—Ç–æ—Ä–æ–π', '–æ–¥–∏–Ω', '–¥–≤–∞',
        # –í–∞—Ä–∏–∞–Ω—Ç—ã —Å –ø—Ä–æ–±–µ–ª–∞–º–∏/–¥–µ—Ñ–∏—Å–∞–º–∏
        '—Ç 1', '—Ç 2', 't 1', 't 2', '—Ç-1', '—Ç-2', 't-1', 't-2'
    ]
    
    return message_lower in choices

def parse_delivery_choice(message):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ª—é–±–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤—ã–±–æ—Ä–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    message_lower = message.lower().strip()
    
    # –°–∞–º–æ–≤—ã–≤–æ–∑ (–¢1)
    if message_lower in ['1', '—Ç1', 't1', '–ø–µ—Ä–≤—ã–π', '–æ–¥–∏–Ω', '—Ç 1', 't 1', '—Ç-1', 't-1']:
        return "—Å–∞–º–æ–≤—ã–≤–æ–∑"
    
    # –î–æ –¥–≤–µ—Ä–∏ (–¢2)  
    elif message_lower in ['2', '—Ç2', 't2', '–≤—Ç–æ—Ä–æ–π', '–¥–≤–∞', '—Ç 2', 't 2', '—Ç-2', 't-2']:
        return "–¥–æ –¥–≤–µ—Ä–∏"
    
    else:
        return None

def doesnt_know_tnved(message):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –Ω–µ –∑–Ω–∞–µ—Ç –∫–æ–¥ –¢–ù–í–≠–î"""
    patterns = [
        '–Ω–µ –∑–Ω–∞—é', '–Ω–µ –∑–Ω–∞—é –∫–æ–¥', '–Ω–µ—Ç –∫–æ–¥–∞', '–Ω–µ –ø–æ–º–Ω—é', 
        '–ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ', '–ø–æ–¥—Å–∫–∞–∂–∏', '—á—Ç–æ —ç—Ç–æ –∫–æ–¥', '–∫–∞–∫–æ–π –∫–æ–¥',
        '–ø–æ–º–æ–≥–∏—Ç–µ', '–ø–æ–º–æ–≥–∏', '–Ω–µ —É–≤–µ—Ä–µ–Ω', '–∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å',
        '–Ω–µ—Ç', '–Ω–µ –∑–Ω–∞–µ–º', '–Ω–µ –ø–æ–º–Ω–∏–º'
    ]
    return any(pattern in message.lower() for pattern in patterns)

def get_missing_data(delivery_data, customs_data, delivery_type):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"""
    missing = []
    if not delivery_data.get('weight'): 
        missing.append("–≤–µ—Å –≥—Ä—É–∑–∞")
    if not delivery_data.get('product_type'): 
        missing.append("—Ç–∏–ø —Ç–æ–≤–∞—Ä–∞")
    if not delivery_data.get('city'): 
        missing.append("–≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏")
    if delivery_type == 'INVOICE' and not customs_data.get('invoice_value'): 
        missing.append("—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ USD")
    if delivery_type == 'INVOICE' and not customs_data.get('tnved_code'): 
        missing.append("–∫–æ–¥ –¢–ù–í–≠–î")
    return missing

# --- –§–£–ù–ö–¶–ò–ò –†–ê–°–ß–ï–¢–ê –î–û–°–¢–ê–í–ö–ò ---
def calculate_quick_cost(weight: float, product_type: str, city: str):
    """–ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    try:
        # –¢1: –ö–∏—Ç–∞–π ‚Üí –ê–ª–º–∞—Ç—ã
        product_type_lower = product_type.lower()
        t1_rate = T1_RATES.get(product_type_lower, 2.40)
        t1_cost_usd = weight * t1_rate
        t1_cost_kzt = t1_cost_usd * EXCHANGE_RATE
        
        # –¢2: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞—Ä–∏—Ñ –¥–ª—è –≥–æ—Ä–æ–¥–∞
        city_lower = city.lower()
        if city_lower == "–∞–ª–º–∞—Ç—ã" or city_lower == "–∞–ª–º–∞—Ç–∞":
            t2_rate = T2_RATES["–∞–ª–º–∞—Ç—ã"]
            zone = "–∞–ª–º–∞—Ç—ã"
        else:
            zone = DESTINATION_ZONES.get(city_lower, 3)
            t2_rate = T2_RATES.get(zone, 250)
        
        t2_cost_kzt = weight * t2_rate
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (–¢1 + –¢2 + 20% –∫–æ–º–∏—Å—Å–∏—è)
        total_cost = (t1_cost_kzt + t2_cost_kzt) * 1.20
        
        return {
            't1_cost': t1_cost_kzt,
            't2_cost': t2_cost_kzt, 
            'total': total_cost,
            'zone': zone,
            't2_rate': t2_rate,
            't1_rate': t1_rate
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        return None

def calculate_detailed_cost(weight: float, product_type: str, city: str, delivery_type: str = "–¥–æ –¥–≤–µ—Ä–∏"):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å —Ä–∞–∑–±–∏–≤–∫–æ–π"""
    quick_cost = calculate_quick_cost(weight, product_type, city)
    if not quick_cost:
        return "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞"
    
    t1_cost = quick_cost['t1_cost']
    t2_cost = quick_cost['t2_cost'] 
    t1_rate = quick_cost['t1_rate']
    t2_rate = quick_cost['t2_rate']
    zone = quick_cost['zone']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    if delivery_type == "—Å–∞–º–æ–≤—ã–≤–æ–∑":
        total = t1_cost * 1.20
        delivery_text = f"üí∞ –ò–¢–û–ì–û —Å —Å–∞–º–æ–≤—ã–≤–æ–∑–æ–º –∏–∑ –ê–ª–º–∞—Ç—ã: ‚âà {total:.0f} —Ç–µ–Ω–≥–µ"
        comparison_text = f"üí° –ï—Å–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –¥–≤–µ—Ä–∏: {(t1_cost + t2_cost) * 1.20:.0f} —Ç–µ–Ω–≥–µ"
    else:
        total = (t1_cost + t2_cost) * 1.20
        delivery_text = f"üí∞ –ò–¢–û–ì–û —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –¥–æ –¥–≤–µ—Ä–∏: ‚âà {total:.0f} —Ç–µ–Ω–≥–µ"
        comparison_text = f"üí° –ï—Å–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑ –ê–ª–º–∞—Ç—ã: {t1_cost * 1.20:.0f} —Ç–µ–Ω–≥–µ"
    
    city_name = city.capitalize()
    
    response = (
        f"üìä –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è {weight} –∫–≥ ¬´{product_type}¬ª –≤ –≥. {city_name}:\n\n"
        f"**–¢1: –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è –¥–æ –ê–ª–º–∞—Ç—ã**\n"
        f"‚Ä¢ –î–æ —Å–∫–ª–∞–¥–∞ –≤ –ê–ª–º–∞—Ç—ã (—Å–∞–º–æ–≤—ã–≤–æ–∑)\n"
        f"‚Ä¢ ${t1_rate}/–∫–≥ √ó {weight} –∫–≥ = ${weight * t1_rate:.2f} USD\n"
        f"‚Ä¢ –ü–æ –∫—É—Ä—Å—É {EXCHANGE_RATE} —Ç–µ–Ω–≥–µ/$ = {t1_cost:.0f} —Ç–µ–Ω–≥–µ\n\n"
    )
    
    if delivery_type == "–¥–æ –¥–≤–µ—Ä–∏":
        if zone == "–∞–ª–º–∞—Ç—ã":
            t2_explanation = f"‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É –ê–ª–º–∞—Ç—ã –¥–æ –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞"
            zone_text = "–≥–æ—Ä–æ–¥ –ê–ª–º–∞—Ç—ã"
        else:
            t2_explanation = f"‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞ –≤ {city_name}"
            zone_text = f"–ó–æ–Ω–∞ {zone}"
        
        response += (
            f"**–¢2: –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –¥–≤–µ—Ä–∏ ({zone_text})**\n"
            f"{t2_explanation}\n"
            f"‚Ä¢ {t2_rate} —Ç–µ–Ω–≥–µ/–∫–≥ √ó {weight} –∫–≥ = {t2_cost:.0f} —Ç–µ–Ω–≥–µ\n\n"
        )
    
    response += (
        f"**–ö–æ–º–∏—Å—Å–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ (20%):**\n"
        f"‚Ä¢ {t1_cost:.0f} —Ç–µ–Ω–≥–µ √ó 20% = {t1_cost * 0.20:.0f} —Ç–µ–Ω–≥–µ\n"
    )
    
    if delivery_type == "–¥–æ –¥–≤–µ—Ä–∏":
        response += f"‚Ä¢ {t2_cost:.0f} —Ç–µ–Ω–≥–µ √ó 20% = {t2_cost * 0.20:.0f} —Ç–µ–Ω–≥–µ\n\n"
    else:
        response += "\n"
    
    response += (
        f"------------------------------------\n"
        f"{delivery_text}\n\n"
        f"{comparison_text}\n\n"
        f"üí° –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ 1% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥—Ä—É–∑–∞\n"
        f"üí≥ –û–ø–ª–∞—Ç–∞: –ø–æ—Å—Ç-–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏\n\n"
        f"üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
        f"üöö 1 - –°–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑ –ê–ª–º–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –¢1)\n"
        f"üè† 2 - –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –¥–≤–µ—Ä–∏ (–¢1 + –¢2)\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ '1' –∏–ª–∏ '2' —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!"
    )
    
    return response

# --- –§–£–ù–ö–¶–ò–ò –†–ê–°–ß–ï–¢–ê –†–ê–°–¢–ê–ú–û–ñ–ö–ò ---
def calculate_customs_cost(invoice_value: float, product_type: str, weight: float = None, has_certificate: bool = False, needs_certificate: bool = False):
    """–†–∞—Å—á–µ—Ç —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
    try:
        # –ü–æ—à–ª–∏–Ω–∞
        customs_rate = CUSTOMS_RATES.get(product_type.lower(), 10) / 100
        duty_usd = invoice_value * customs_rate
        duty_kzt = duty_usd * EXCHANGE_RATE
        
        # –ù–î–° (12% –æ—Ç: —Å—Ç–æ–∏–º–æ—Å—Ç—å + –ø–æ—à–ª–∏–Ω–∞)
        vat_base_usd = invoice_value + duty_usd
        vat_kzt = vat_base_usd * 0.12 * EXCHANGE_RATE
        
        # –°–±–æ—Ä—ã
        customs_fee = CUSTOMS_FEES["–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"]
        certificate_fee = CUSTOMS_FEES["—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"] if needs_certificate else 0
        origin_cert_fee = CUSTOMS_FEES["–ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è"] * EXCHANGE_RATE if has_certificate else 0
        broker_fee = CUSTOMS_FEES["–±—Ä–æ–∫–µ—Ä"]
        declaration_fee = CUSTOMS_FEES["–¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è"]
        
        total_customs_kzt = duty_kzt + vat_kzt + customs_fee + certificate_fee + origin_cert_fee + broker_fee + declaration_fee
        
        return {
            'duty_usd': duty_usd,
            'duty_kzt': duty_kzt,
            'vat_kzt': vat_kzt,
            'customs_fee': customs_fee,
            'certificate_fee': certificate_fee,
            'origin_cert_fee': origin_cert_fee,
            'broker_fee': broker_fee,
            'declaration_fee': declaration_fee,
            'total_kzt': total_customs_kzt,
            'total_usd': total_customs_kzt / EXCHANGE_RATE
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏: {e}")
        return None

def get_tnved_code(product_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –¢–ù –í–≠–î —á–µ—Ä–µ–∑ Gemini"""
    if not customs_model:
        return "–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ"
    
    try:
        prompt = f"–û–ø—Ä–µ–¥–µ–ª–∏ –∫–æ–¥ –¢–ù –í–≠–î –ï–ê–≠–° –¥–ª—è —Ç–æ–≤–∞—Ä–∞: '{product_name}'. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXXXX XXX X –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –ø–æ—è—Å–Ω–µ–Ω–∏–π, —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ç–æ—á–µ–∫. –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã."
        response = customs_model.generate_content(prompt)
        code = response.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –ø–æ—Ö–æ–∂ –Ω–∞ –∫–æ–¥ –¢–ù –í–≠–î
        if re.match(r'^\d{4,10}[\s\d]*$', code):
            return code
        else:
            return "9503 00 700 0"  # –ö–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∏–≥—Ä—É—à–µ–∫
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –¢–ù –í–≠–î: {e}")
        return "9503 00 700 0"  # –ö–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∏–≥—Ä—É—à–µ–∫

def check_certification_requirements(product_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Gemini"""
    if not customs_model:
        return False
    
    try:
        prompt = f"–ù—É–∂–µ–Ω –ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¢–† –¢–° –¥–ª—è —Ç–æ–≤–∞—Ä–∞: '{product_name}'? –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ '–î–ê' –∏–ª–∏ '–ù–ï–¢' –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."
        response = customs_model.generate_content(prompt)
        return "–î–ê" in response.text.upper()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return False

def get_customs_full_calculation(weight: float, product_type: str, city: str, invoice_value: float, tnved_code: str = None):
    """–ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –∏ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–æ–π"""
    try:
        # –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_cost = calculate_quick_cost(weight, product_type, city)
        if not delivery_cost:
            return "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"
        
        # –†–∞—Å—á–µ—Ç —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏
        needs_certification = check_certification_requirements(product_type)
        customs_cost = calculate_customs_cost(invoice_value, product_type, weight, False, needs_certification)
        if not customs_cost:
            return "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏"
        
        if not tnved_code:
            tnved_code = get_tnved_code(product_type)
        
        # –†–∞—Å—á–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
        t1_total = delivery_cost['t1_cost'] * 1.20 + customs_cost['total_kzt']
        t2_total = (delivery_cost['t1_cost'] + delivery_cost['t2_cost']) * 1.20 + customs_cost['total_kzt']
        
        response = (
            f"üìä –†–∞—Å—á–µ—Ç –¥–ª—è –ò–ù–í–û–ô–°:\n\n"
            f"‚úÖ –¢–æ–≤–∞—Ä: {weight} –∫–≥ {product_type} –≤ {city.capitalize()}\n"
            f"‚úÖ –¢–∞–º–æ–∂–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {invoice_value} USD\n"
            f"‚úÖ –ö–æ–¥ –¢–ù–í–≠–î: {tnved_code}\n\n"
            
            f"üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏:\n\n"
            
            f"üöö –í–ê–†–ò–ê–ù–¢ 1: –î–û–°–¢–ê–í–ö–ê –î–û –ê–õ–ú–ê–¢–´ (–¢1)\n"
            f"‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ —Å–∫–ª–∞–¥–∞ –≤ –ê–ª–º–∞—Ç—ã (—Å–∞–º–æ–≤—ã–≤–æ–∑)\n"
            f"‚Ä¢ –¢–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ\n"
            f"‚Ä¢ –£—Å–ª—É–≥–∏ –±—Ä–æ–∫–µ—Ä–∞: {CUSTOMS_FEES['–±—Ä–æ–∫–µ—Ä']:,} ‚Ç∏\n"
            f"‚Ä¢ –ü–æ–¥–∞—á–∞ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏: {CUSTOMS_FEES['–¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è']:,} ‚Ç∏\n"
            f"üì¶ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_cost['t1_cost'] * 1.20:.0f} ‚Ç∏\n"
            f"üí∞ –û–ë–©–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {t1_total:,.0f} ‚Ç∏\n\n"
            
            f"üè† –í–ê–†–ò–ê–ù–¢ 2: –î–û–°–¢–ê–í–ö–ê –î–û –î–í–ï–†–ò (–¢1+–¢2)\n"
            f"‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞ –≤ {city.capitalize()}\n"
            f"‚Ä¢ –¢–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ\n"
            f"‚Ä¢ –£—Å–ª—É–≥–∏ –±—Ä–æ–∫–µ—Ä–∞: {CUSTOMS_FEES['–±—Ä–æ–∫–µ—Ä']:,} ‚Ç∏\n"
            f"‚Ä¢ –ü–æ–¥–∞—á–∞ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏: {CUSTOMS_FEES['–¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è']:,} ‚Ç∏\n"
            f"üì¶ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {(delivery_cost['t1_cost'] + delivery_cost['t2_cost']) * 1.20:.0f} ‚Ç∏\n"
            f"üí∞ –û–ë–©–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {t2_total:,.0f} ‚Ç∏\n\n"
            
            f"üìÑ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {'—Ç—Ä–µ–±—É–µ—Ç—Å—è' if needs_certification else '–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n\n"
            
            f"üí° –ù–∞–ø–∏—à–∏—Ç–µ '1' –∏–ª–∏ '2' —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏!"
        )
        
        return response
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        return "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞"

def show_final_calculation(delivery_data, customs_data, delivery_option):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        if delivery_data['delivery_type'] == 'CARGO':
            # –†–∞—Å—á–µ—Ç –¥–ª—è –ö–ê–†–ì–û
            delivery_cost = calculate_quick_cost(delivery_data['weight'], delivery_data['product_type'], delivery_data['city'])
            if delivery_option == "—Å–∞–º–æ–≤—ã–≤–æ–∑":
                total_cost = delivery_cost['t1_cost'] * 1.20
            else:
                total_cost = (delivery_cost['t1_cost'] + delivery_cost['t2_cost']) * 1.20
            
            response = (
                f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –î–û–°–¢–ê–í–ö–ê –î–û {'–î–í–ï–†–ò' if delivery_option == '–¥–æ –¥–≤–µ—Ä–∏' else '–ê–õ–ú–ê–¢–´ (—Å–∞–º–æ–≤—ã–≤–æ–∑)'}\n\n"
                f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost:,.0f} ‚Ç∏\n"
                f"üì¶ {'–ì—Ä—É–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É –≤ ' + delivery_data['city'].capitalize() if delivery_option == '–¥–æ –¥–≤–µ—Ä–∏' else '–°–∞–º–æ–≤—ã–≤–æ–∑ —Å–æ —Å–∫–ª–∞–¥–∞ –≤ –ê–ª–º–∞—Ç—ã'}\n"
                f"‚è±Ô∏è –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: 12-15 –¥–Ω–µ–π\n\n"
                f"‚úÖ –•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É? –ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω!"
            )
            
        else:  # INVOICE
            # –†–∞—Å—á–µ—Ç –¥–ª—è –ò–ù–í–û–ô–°
            customs_cost = calculate_customs_cost(
                customs_data['invoice_value'],
                customs_data['product_type'],
                delivery_data['weight'],
                customs_data['has_certificate'],
                customs_data['needs_certificate']
            )
            
            delivery_cost = calculate_quick_cost(delivery_data['weight'], delivery_data['product_type'], delivery_data['city'])
            
            if delivery_option == "—Å–∞–º–æ–≤—ã–≤–æ–∑":
                total_delivery = delivery_cost['t1_cost'] * 1.20
            else:
                total_delivery = (delivery_cost['t1_cost'] + delivery_cost['t2_cost']) * 1.20
            
            total_cost = total_delivery + customs_cost['total_kzt']
            
            response = (
                f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –î–û–°–¢–ê–í–ö–ê –î–û {'–î–í–ï–†–ò' if delivery_option == '–¥–æ –¥–≤–µ—Ä–∏' else '–ê–õ–ú–ê–¢–´ (—Å–∞–º–æ–≤—ã–≤–æ–∑)'}\n\n"
                f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost:,.0f} ‚Ç∏\n"
                f"üì¶ {'–ì—Ä—É–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É –≤ ' + delivery_data['city'].capitalize() if delivery_option == '–¥–æ –¥–≤–µ—Ä–∏' else '–°–∞–º–æ–≤—ã–≤–æ–∑ —Å–æ —Å–∫–ª–∞–¥–∞ –≤ –ê–ª–º–∞—Ç—ã'}\n"
                f"‚è±Ô∏è –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: 12-15 –¥–Ω–µ–π\n\n"
                f"üìã –ö–æ–¥ –¢–ù –í–≠–î: {customs_data.get('tnved_code', '–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ')}\n"
                f"üìÑ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {'—Ç—Ä–µ–±—É–µ—Ç—Å—è' if check_certification_requirements(delivery_data['product_type']) else '–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n\n"
                f"‚úÖ –•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É? –ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω!"
            )
        
        return response
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        return "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

def get_gemini_response(user_message, context="", use_customs_model=False):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini"""
    if not main_model:
        return "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    
    try:
        model_to_use = customs_model if use_customs_model else main_model
        full_prompt = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ: {user_message}\n\n–û—Ç–≤–µ—Ç:"
        response = model_to_use.generate_content(
            full_prompt,
            generation_config=GenerationConfig(
                temperature=0.7,
                max_output_tokens=1000,
            )
        )
        return response.text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Gemini: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def extract_delivery_info(text):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Å—Ç–∞–≤–∫–µ"""
    weight = None
    product_type = None
    city = None
    
    try:
        # –ü–æ–∏—Å–∫ –≤–µ—Å–∞
        weight_patterns = [
            r'(\d+(?:\.\d+)?)\s*(?:–∫–≥|kg|–∫–∏–ª–æ–≥—Ä–∞–º–º|–∫–∏–ª–æ)',
            r'–≤–µ—Å\s*[:\-]?\s*(\d+(?:\.\d+)?)',
        ]
        
        for pattern in weight_patterns:
            match = re.search(pattern, text.lower())
            if match:
                weight = float(match.group(1))
                break
        
        # –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞
        text_lower = text.lower()
        for city_name in DESTINATION_ZONES:
            if city_name in text_lower:
                city = city_name
                break
        
        # –ü–æ–∏—Å–∫ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
        product_keywords = {
            '–æ–¥–µ–∂–¥–∞': ['–æ–¥–µ–∂–¥–∞', '–∞–¥–µ–∂–¥–∞', '–æ–¥–µ–∂–¥'],
            '–ª–µ–∫–∞—Ä—Å—Ç–≤–∞': ['–ª–µ–∫–∞—Ä—Å—Ç–≤–∞', '–ª–µ–∫–∞—Ä—Å–∏–≤–∞', '–º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã'],
            '–∫–æ—Å–º–µ—Ç–∏–∫–∞': ['–∫–æ—Å–º–µ—Ç–∏–∫–∞', '–∫—Ä–µ–º', '—à–∞–º–ø—É–Ω—å', '–º–∞–∫–∏—è–∂'],
            '—Ç–µ—Ö–Ω–∏–∫–∞': ['—Ç–µ—Ö–Ω–∏–∫–∞', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–Ω–æ—É—Ç–±—É–∫', '–≥–∞–¥–∂–µ—Ç'],
            '–º–µ–±–µ–ª—å': ['–º–µ–±–µ–ª—å', '—Å—Ç–æ–ª', '—Å—Ç—É–ª', '–∫—Ä–æ–≤–∞—Ç—å'],
            '–ø–æ—Å—É–¥–∞': ['–ø–æ—Å—É–¥–∞', '—Ç–∞—Ä–µ–ª–∫–∏', '—á–∞—à–∫–∏'],
            '–æ–±—â–∏–µ —Ç–æ–≤–∞—Ä—ã': ['—Ç–æ–≤–∞—Ä—ã', '—Ç–æ–≤–∞—Ä', '—Ä–∞–∑–Ω–æ–µ', '–ø—Ä–æ—á–µ–µ'],
            '–∏–≥—Ä—É—à–∫–∏': ['–∏–≥—Ä—É—à–∫–∏', '–∏–≥—Ä—É—à–∫–∞', '–∫—É–∫–ª—ã', '–º–∞—à–∏–Ω–∫–∏', '–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä'],
            '—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞': ['—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–Ω–æ—É—Ç–±—É–∫', '–ø–ª–∞–Ω—à–µ—Ç', '–∫–æ–º–ø—å—é—Ç–µ—Ä']
        }
        
        for prod_type, keywords in product_keywords.items():
            if any(keyword in text_lower for keyword in keywords):
                product_type = prod_type
                break
        
        if not product_type:
            product_type = "–æ–±—â–∏–µ —Ç–æ–≤–∞—Ä—ã"
            
        return weight, product_type, city
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, None, None

def extract_customs_info(text):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏"""
    try:
        # –ü–æ–∏—Å–∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        cost_patterns = [
            r'(\d+(?:\.\d+)?)\s*(?:usd|\$|–¥–æ–ª–ª–∞—Ä)',
            r'—Å—Ç–æ–∏–º–æ—Å\w*\s*[:\-]?\s*(\d+(?:\.\d+)?)',
            r'–Ω–∞\s*(\d+(?:\.\d+)?)\s*(?:usd|\$)',
        ]
        
        invoice_value = None
        for pattern in cost_patterns:
            match = re.search(pattern, text.lower())
            if match:
                invoice_value = float(match.group(1))
                break
        
        # –ü–æ–∏—Å–∫ –∫–æ–¥–∞ –¢–ù–í–≠–î
        tnved_match = re.search(r'(\d{4,10}[\s\d]*)', text)
        tnved_code = tnved_match.group(1) if tnved_match else None
        
        return invoice_value, tnved_code
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏: {e}")
        return None, None

def extract_contact_info(text):
    """–£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    name = None
    phone = None
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    clean_text = re.sub(r'\s+', ' ', text.strip()).lower()
    
    # –ü–æ–∏—Å–∫ –∏–º–µ–Ω–∏ (–ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ 2+ —Ä—É—Å—Å–∫–∏—Ö/–∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±—É–∫–≤)
    name_match = re.search(r'^([–∞-—èa-z]{2,})', clean_text)
    if name_match:
        name = name_match.group(1).capitalize()
    
    # –ü–æ–∏—Å–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
    phone_patterns = [
        r'(\d{10,11})',  # 87057600909
        r'(\d{3}[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2})',  # 870 576 00 909
        r'(\d{3}[\s\-]?\d{2}[\s\-]?\d{2}[\s\-]?\d{3})',  # 870 57 600 909
    ]
    
    for pattern in phone_patterns:
        phone_match = re.search(pattern, clean_text)
        if phone_match:
            phone = re.sub(r'\D', '', phone_match.group(1))
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
            if phone.startswith('8'):
                phone = '7' + phone[1:]
            elif len(phone) == 10:
                phone = '7' + phone
            break
    
    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∏ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    if name and phone and len(phone) >= 10:
        return name, phone
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–ª–µ—Ñ–æ–Ω, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–º—è –≤ —Ç–µ–∫—Å—Ç–µ
    if phone and not name:
        # –ò—â–µ–º –∏–º—è –ø–µ—Ä–µ–¥ –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –≤ –Ω–∞—á–∞–ª–µ —Ç–µ–∫—Å—Ç–∞
        name_before_comma = re.search(r'^([–∞-—èa-z]+)\s*[,]', clean_text)
        if name_before_comma:
            name = name_before_comma.group(1).capitalize()
    
    return name, phone

def save_application(details):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    try:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: {timestamp}\n{details}\n"
        with open("applications.txt", "a", encoding="utf-8") as f: 
            f.write("="*50 + "\n" + log_entry + "="*50 + "\n\n")
        logger.info(f"–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {details}")
    except Exception as e: 
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

# --- ROUTES ---
@app.route('/')
def index(): 
    if 'delivery_data' not in session:
        session['delivery_data'] = {'weight': None, 'product_type': None, 'city': None, 'delivery_type': None, 'delivery_option': None}
    if 'customs_data' not in session:
        session['customs_data'] = {'invoice_value': None, 'product_type': None, 'has_certificate': False, 'needs_certificate': False, 'tnved_code': None}
    if 'chat_history' not in session:
        session['chat_history'] = []
    if 'waiting_for_contacts' not in session:
        session['waiting_for_contacts'] = False
    if 'waiting_for_customs' not in session:
        session['waiting_for_customs'] = False
    if 'waiting_for_delivery_choice' not in session:
        session['waiting_for_delivery_choice'] = False
    if 'waiting_for_tnved' not in session:
        session['waiting_for_tnved'] = False
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
    if main_model is None:
        initialize_models()
    
    return render_template('index.html')

@app.route('/chat', methods=['POST'])
def chat():
    try:
        user_message = request.json.get('message', '').strip()
        if not user_message:
            return jsonify({"response": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."})
        
        # –û—Ç–ª–∞–¥–∫–∞
        debug_session(session, f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{user_message}'")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–π
        delivery_data = session.get('delivery_data', {'weight': None, 'product_type': None, 'city': None, 'delivery_type': None, 'delivery_option': None})
        customs_data = session.get('customs_data', {'invoice_value': None, 'product_type': None, 'has_certificate': False, 'needs_certificate': False, 'tnved_code': None})
        chat_history = session.get('chat_history', [])
        waiting_for_contacts = session.get('waiting_for_contacts', False)
        waiting_for_customs = session.get('waiting_for_customs', False)
        waiting_for_delivery_choice = session.get('waiting_for_delivery_choice', False)
        waiting_for_tnved = session.get('waiting_for_tnved', False)
        
        chat_history.append(f"–ö–ª–∏–µ–Ω—Ç: {user_message}")
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        if user_message.lower() in GREETINGS:
            session.update({
                'delivery_data': {'weight': None, 'product_type': None, 'city': None, 'delivery_type': None, 'delivery_option': None},
                'customs_data': {'invoice_value': None, 'product_type': None, 'has_certificate': False, 'needs_certificate': False, 'tnved_code': None},
                'chat_history': [f"–ö–ª–∏–µ–Ω—Ç: {user_message}"],
                'waiting_for_contacts': False,
                'waiting_for_customs': False,
                'waiting_for_delivery_choice': False,
                'waiting_for_tnved': False
            })
            return jsonify({"response": "–ü—Ä–∏–≤–µ—Ç! \nüëã –Ø –≤–∞—à –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ Post Pro.\n\nüöö –†–∞—Å—Å—á–∏—Ç–∞—é –¥–æ—Å—Ç–∞–≤–∫—É –∏–∑ –ö–∏—Ç–∞—è –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω:\n\n‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –ê–ª–º–∞—Ç—ã \n‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –¥–≤–µ—Ä–∏ –ø–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—É\n\n–ù–∞—à–∏ —Å–∫–ª–∞–¥—ã –≤ –ö–∏—Ç–∞–µ: –ò–£/–ì—É–∞–Ω—á–∂–æ—É\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É:\n\nüì¶ –ö–ê–†–ì–û - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –¥–ª—è –ª–∏—á–Ω—ã—Ö –≤–µ—â–µ–π, –ø—Ä–æ–±–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π\n\nüìÑ –ò–ù–í–û–ô–° - –ø–æ–ª–Ω–æ–µ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø–∞—Ä—Ç–∏–π\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ:\n- –í–µ—Å –≥—Ä—É–∑–∞\n- –¢–∏–ø —Ç–æ–≤–∞—Ä–∞  \n- –ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏\n- –ö–∞—Ä–≥–æ –∏–ª–∏ –ò–Ω–≤–æ–π—Å\n\n–ò —è —Å—Ä–∞–∑—É –ø–æ–∫–∞–∂—É —Ä–∞—Å—á–µ—Ç! ‚ú®"})
        
        # –ü–ï–†–í–´–ô –ü–†–ò–û–†–ò–¢–ï–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (1 –∏–ª–∏ 2)
        if waiting_for_delivery_choice and is_delivery_choice(user_message):
            delivery_option = parse_delivery_choice(user_message)
            delivery_data['delivery_option'] = delivery_option
            session['delivery_data'] = delivery_data
            session['waiting_for_delivery_choice'] = False
            session['waiting_for_contacts'] = True
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç
            response = show_final_calculation(delivery_data, customs_data, delivery_option)
            
            chat_history.append(f"–ë–æ—Ç: {response}")
            session['chat_history'] = chat_history
            return jsonify({"response": response})
        
        # –í–¢–û–†–û–ô –ü–†–ò–û–†–ò–¢–ï–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        if waiting_for_contacts:
            name, phone = extract_contact_info(user_message)
            
            if name and phone:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏
                details = f"–ò–º—è: {name}, –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
                if delivery_data['weight']:
                    details += f", –í–µ—Å: {delivery_data['weight']} –∫–≥"
                if delivery_data['product_type']:
                    details += f", –¢–æ–≤–∞—Ä: {delivery_data['product_type']}"
                if delivery_data['city']:
                    details += f", –ì–æ—Ä–æ–¥: {delivery_data['city']}"
                if delivery_data['delivery_option']:
                    details += f", –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_data['delivery_option']}"
                if customs_data['invoice_value']:
                    details += f", –°—Ç–æ–∏–º–æ—Å—Ç—å: {customs_data['invoice_value']} USD"
                if customs_data['tnved_code']:
                    details += f", –¢–ù–í–≠–î: {customs_data['tnved_code']}"
                if delivery_data['delivery_type']:
                    details += f", –¢–∏–ø: {delivery_data['delivery_type']}"
                
                save_application(details)
                
                # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
                session.update({
                    'delivery_data': {'weight': None, 'product_type': None, 'city': None, 'delivery_type': None, 'delivery_option': None},
                    'customs_data': {'invoice_value': None, 'product_type': None, 'has_certificate': False, 'needs_certificate': False, 'tnved_code': None},
                    'chat_history': [],
                    'waiting_for_contacts': False,
                    'waiting_for_customs': False,
                    'waiting_for_delivery_choice': False,
                    'waiting_for_tnved': False
                })
                
                response = "üéâ –ó–∞—è–≤–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n‚è∞ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π! \nüïô –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: —Å 10:00 –¥–æ 20:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ê—Å—Ç–∞–Ω—ã üìû"
                return jsonify({"response": response})
            else:
                # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ - —É—Ç–æ—á–Ω—è–µ–º
                return jsonify({"response": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–ò–º—è, 87001234567'"})
        
        # –¢–†–ï–¢–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –¢–ù–í–≠–î
        if waiting_for_tnved:
            if doesnt_know_tnved(user_message):
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ Gemini
                tnved_code = get_tnved_code(delivery_data['product_type'])
                customs_data['tnved_code'] = tnved_code
                session['customs_data'] = customs_data
                session['waiting_for_tnved'] = False
                
                response = f"üîç –û–ø—Ä–µ–¥–µ–ª—è—é –∫–æ–¥ –¢–ù–í–≠–î –¥–ª—è '{delivery_data['product_type']}'...\n‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–¥: {tnved_code}\n\nüìä –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞—Å—á–µ—Ç..."
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—á–µ—Ç —Å –≤—ã–±–æ—Ä–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏
                full_calculation = get_customs_full_calculation(
                    delivery_data['weight'], 
                    delivery_data['product_type'], 
                    delivery_data['city'], 
                    customs_data['invoice_value'],
                    tnved_code
                )
                session['waiting_for_delivery_choice'] = True
                
                chat_history.append(f"–ë–æ—Ç: {response}")
                session['chat_history'] = chat_history
                return jsonify({"response": response + "\n\n" + full_calculation})
            
            elif re.match(r'^\d{4,10}', user_message):
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ–¥ –≤—Ä—É—á–Ω—É—é
                customs_data['tnved_code'] = user_message
                session['customs_data'] = customs_data
                session['waiting_for_tnved'] = False
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—á–µ—Ç —Å –≤—ã–±–æ—Ä–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏
                response = get_customs_full_calculation(
                    delivery_data['weight'], 
                    delivery_data['product_type'], 
                    delivery_data['city'], 
                    customs_data['invoice_value'],
                    user_message
                )
                session['waiting_for_delivery_choice'] = True
                
                chat_history.append(f"–ë–æ—Ç: {response}")
                session['chat_history'] = chat_history
                return jsonify({"response": f"‚úÖ –ö–æ–¥ –¢–ù–í–≠–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n{response}"})
            else:
                return jsonify({"response": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –¢–ù–í–≠–î –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ –∑–Ω–∞—é' —á—Ç–æ–±—ã —è –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."})
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω)
        if not delivery_data['delivery_type']:
            if any(word in user_message.lower() for word in ['–∫–∞—Ä–≥–æ', 'cargo', '–ª–∏—á–Ω—ã–µ –≤–µ—â–∏', '–ø—Ä–æ–±–Ω–∞—è –ø–∞—Ä—Ç–∏—è', '—É–ø—Ä–æ—â–µ–Ω']):
                delivery_data['delivery_type'] = 'CARGO'
                session['delivery_data'] = delivery_data
                session['waiting_for_customs'] = False
                return jsonify({"response": "üì¶ –í–´–ë–†–ê–ù –ö–ê–†–ì–û (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞)\n\n–†–∞—Å—á–µ—Ç –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º –¢1 –∏ –¢2\n\nüí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ:\n‚Ä¢ –í–µ—Å –≥—Ä—É–∑–∞\n‚Ä¢ –¢–∏–ø —Ç–æ–≤–∞—Ä–∞  \n‚Ä¢ –ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏\n\n–ü—Ä–∏–º–µ—Ä: '50 –∫–≥ –æ–¥–µ–∂–¥—ã –≤ –ê—Å—Ç–∞–Ω—É'"})
            
            elif any(word in user_message.lower() for word in ['–∏–Ω–≤–æ–π—Å', 'invoice', '–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π', '—Ä–∞—Å—Ç–∞–º–æ–∂–∫–∞', '—Ç–∞–º–æ–∂–µ–Ω', '–ø–æ–ª–Ω—ã–π']):
                delivery_data['delivery_type'] = 'INVOICE'
                session['delivery_data'] = delivery_data
                session['waiting_for_customs'] = True
                session['waiting_for_tnved'] = True
                return jsonify({"response": "üìÑ –í–´–ë–†–ê–ù –ò–ù–í–û–ô–° (–ø–æ–ª–Ω–æ–µ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ)\n\n‚Ä¢ –ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π\n‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –∫–æ–¥–∞–º–∏ –¢–ù –í–≠–î\n‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n\nüí° –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ:\n‚Ä¢ –í–µ—Å –≥—Ä—É–∑–∞ –∏ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞\n‚Ä¢ –ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ  \n‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –ø–æ –∏–Ω–≤–æ–π—Å—É (USD)\n‚Ä¢ –ö–æ–¥ –¢–ù–í–≠–î\n\n–ü—Ä–∏–º–µ—Ä: '100 –∫–≥ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏ –≤ –ê–ª–º–∞—Ç—ã, —Å—Ç–æ–∏–º–æ—Å—Ç—å 5000 USD, –∫–æ–¥ 9503007000'"})
        
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if delivery_data['delivery_type']:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ
            weight, product_type, city = extract_delivery_info(user_message)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ò–ù–í–û–ô–°)
            invoice_value, tnved_code = extract_customs_info(user_message)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
            updated = False
            if weight:
                delivery_data['weight'] = weight
                updated = True
            if product_type:
                delivery_data['product_type'] = product_type
                customs_data['product_type'] = product_type
                updated = True
            if city:
                delivery_data['city'] = city
                updated = True
            if invoice_value and delivery_data['delivery_type'] == 'INVOICE':
                customs_data['invoice_value'] = invoice_value
                updated = True
            if tnved_code and delivery_data['delivery_type'] == 'INVOICE':
                customs_data['tnved_code'] = tnved_code
                session['waiting_for_tnved'] = False
                updated = True
            
            if updated:
                session['delivery_data'] = delivery_data
                session['customs_data'] = customs_data
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
            missing_data = get_missing_data(delivery_data, customs_data, delivery_data['delivery_type'])
            
            if missing_data:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ - –ø—Ä–æ—Å–∏–º –∏—Ö
                if delivery_data['delivery_type'] == 'INVOICE' and '–∫–æ–¥ –¢–ù–í–≠–î' in missing_data and customs_data['invoice_value']:
                    session['waiting_for_tnved'] = True
                    response = f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {delivery_data['weight']} –∫–≥ {delivery_data['product_type']} –≤ {delivery_data['city']}, —Å—Ç–æ–∏–º–æ—Å—Ç—å {customs_data['invoice_value']} USD\n\n–£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –¢–ù–í–≠–î –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ –∑–Ω–∞—é' —á—Ç–æ–±—ã —è –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
                else:
                    response = f"–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç: {', '.join(missing_data)}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ."
                
                chat_history.append(f"–ë–æ—Ç: {response}")
                session['chat_history'] = chat_history
                return jsonify({"response": response})
            else:
                # –í—Å–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—á–µ—Ç
                if delivery_data['delivery_type'] == 'CARGO':
                    response = calculate_detailed_cost(
                        delivery_data['weight'], 
                        delivery_data['product_type'], 
                        delivery_data['city'], 
                        "–¥–æ –¥–≤–µ—Ä–∏"
                    )
                    session['waiting_for_delivery_choice'] = True
                else:  # INVOICE
                    response = get_customs_full_calculation(
                        delivery_data['weight'], 
                        delivery_data['product_type'], 
                        delivery_data['city'], 
                        customs_data['invoice_value'],
                        customs_data['tnved_code']
                    )
                    session['waiting_for_delivery_choice'] = True
                
                chat_history.append(f"–ë–æ—Ç: {response}")
                session['chat_history'] = chat_history
                return jsonify({"response": response})
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã –∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º Gemini
        ai_response = get_gemini_response(user_message, " ".join(chat_history[-3:]))
        chat_history.append(f"–ë–æ—Ç: {ai_response}")
        session['chat_history'] = chat_history
        
        return jsonify({"response": ai_response})
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ: {e}")
        debug_session(session, f"–û—à–∏–±–∫–∞: {e}")
        return jsonify({"response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."})

if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    initialize_models()
    app.run(debug=True, host='0.0.0.0', port=5000)
