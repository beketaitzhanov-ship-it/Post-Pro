from flask import Flask, render_template, request, jsonify, session
import os
import re
from datetime import datetime
import google.generativeai as genai
from google.generativeai.types import GenerationConfig
from dotenv import load_dotenv
import socket
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
GEMINI_API_KEY = os.getenv("GOOGLE_API_KEY")

app = Flask(__name__)
app.secret_key = 'postpro-secret-key-2024'
app.config['PERMANENT_SESSION_LIFETIME'] = 1800

# --- –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ë–ê–ó–ê –î–ê–ù–ù–´–• ---
DESTINATION_ZONES = {
    "—Ç–∞–ª–¥—ã–∫–æ—Ä–≥–∞–Ω": 1, "–∫–æ–Ω–∞–µ–≤": 1, "—Ç–µ–∫–µ–ª–∏": 1, "–∫–∞–ø—á–∞–≥–∞–π": 1, "–µ—Å–∏–∫": 1, "—Ç–∞–ª–≥–∞—Ä": 1, "–∫–∞—Å–∫–µ–ª–µ–Ω": 1, 
    "–∂–∞—Ä–∫–µ–Ω—Ç": 1, "—Å–∞—Ä–∫–∞–Ω–¥": 1, "–∞–∫—Å—É": 1, "–∞–ª–º–∞—Ç—ã": 1, "–∞–ª–º–∞—Ç–∞": 1,
    "—Ç–∞—Ä–∞–∑": 2, "—à—ã–º–∫–µ–Ω—Ç": 2, "—Ç—É—Ä–∫–µ—Å—Ç–∞–Ω": 2, "–∞—É–ª–∏–µ–∞—Ç–∞": 2, "–∫–æ—Ä–¥–∞–π": 2, "–º–µ—Ä–∫–µ": 2, "–º–æ–π—ã–Ω–∫—É–º": 2, 
    "–∂–∞–Ω–∞—Ç–∞—Å": 2, "–∫–∞—Ä–∞—Ç–∞—É": 2, "—à—É": 2, "–∫–µ–Ω—Ç": 2,
    "–∞—Å—Ç–∞–Ω–∞": 3, "–∫–æ–∫—à–µ—Ç–∞—É": 3, "—Å—Ç–µ–ø–Ω–æ–≥–æ—Ä—Å–∫": 3, "–∞—Ç–±–∞—Å–∞—Ä": 3, "–µ—Ä–µ–º–µ–Ω—Ç–∞—É": 3, "–º–∞–∫–∏–Ω—Å–∫": 3, 
    "–∫–∞—Ä–∞–≥–∞–Ω–¥–∞": 3, "–±–∞–ª—Ö–∞—à": 3, "—Ç–µ–º–∏—Ä—Ç–∞—É": 3, "—à–∞—Ö—Ç–∏–Ω—Å–∫": 3, "–∂–µ–∑–∫–∞–∑–≥–∞–Ω": 3, "—Å–∞—Ç–ø–∞–µ–≤": 3, 
    "–∫—ã–∑—ã–ª–æ—Ä–¥–∞": 3, "–∫–∞–∑–∞–ª—ã–Ω—Å–∫": 3, "–∂–∞–Ω–∞–∫–æ—Ä–≥–∞–Ω": 3, "–ø–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫": 3, "–ø–∞–≤–ª–æ–¥–∞—Ä": 3, "—ç–∫–∏–±–∞—Å—Ç—É–∑": 3, 
    "–∫–æ—Å—Ç–∞–Ω–∞–π": 3, "—Ä—É–¥–Ω—ã–π": 3, "—Å–µ–º–µ–π": 3, "–∫—É—Ä—á–∞—Ç–æ–≤": 3, "–∞—è–≥–æ–∑": 3,
    "–∞–∫—Ç–æ–±–µ": 4, "—Ö—Ä–æ–º—Ç–∞—É": 4, "—à–∞–ª–∫–∞—Ä": 4, "—É—Ä–∞–ª—å—Å–∫": 4, "–∞–∫—Å–∞–π": 4, "—á–∏–Ω–≥–∏—Ä–ª–∞—É": 4,
    "–∞—Ç—ã—Ä–∞—É": 5, "–∫—É–ª—å—Å–∞—Ä—ã": 5, "–∞–∫—Ç–∞—É": 5, "–∂–∞–Ω–∞–æ–∑–µ–Ω": 5, "–±–µ–π–Ω–µ—É": 5
}

EXCHANGE_RATE = 550

# –¢–ê–†–ò–§–´
T1_RATES = {  # –ö–∏—Ç–∞–π ‚Üí –ê–ª–º–∞—Ç—ã (USD/–∫–≥)
    "—Ç–∫–∞–Ω–∏": 1.70, "–æ–¥–µ–∂–¥–∞": 1.70, "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã": 2.10, "–æ–±—â–∏–µ —Ç–æ–≤–∞—Ä—ã": 2.40, "–º–µ–±–µ–ª—å": 2.10, 
    "–∫–æ—Å–º–µ—Ç–∏–∫–∞": 2.30, "–∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏": 2.40, "–º–∞–ª–∞—è —Ç–µ—Ö–Ω–∏–∫–∞": 2.50, "–ø—Ä–æ–¥—É–∫—Ç—ã": 2.70, 
    "–±–µ–ª—å–µ": 2.80, "–ª–µ–∫–∞—Ä—Å—Ç–≤–∞": 2.90, "–ª–µ–∫–∞—Ä—Å–∏–≤–∞": 2.90, "–º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã": 2.90, "–ø–æ—Å—É–¥–∞": 2.20
}

T2_RATES = {  # –ê–ª–º–∞—Ç—ã ‚Üí –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (—Ç–µ–Ω–≥–µ/–∫–≥)
    "–∞–ª–º–∞—Ç—ã": 120,     # –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É –ê–ª–º–∞—Ç—ã
    1: 150,            # –ó–æ–Ω–∞ 1 (–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å)
    2: 200,            # –ó–æ–Ω–∞ 2 (–Æ–∂–Ω—ã–π –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω)
    3: 250,            # –ó–æ–Ω–∞ 3 (–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∏ –°–µ–≤–µ—Ä–Ω—ã–π –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω)
    4: 350,            # –ó–æ–Ω–∞ 4 (–ó–∞–ø–∞–¥–Ω—ã–π –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω)
    5: 450             # –ó–æ–Ω–∞ 5 (–ü—Ä–∏–∫–∞—Å–ø–∏–π—Å–∫–∏–π —Ä–µ–≥–∏–æ–Ω)
}

# --- –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –†–ê–°–¢–ê–ú–û–ñ–ö–ò ---
CUSTOMS_RATES = {
    "–æ–¥–µ–∂–¥–∞": 10, "—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞": 5, "–∫–æ—Å–º–µ—Ç–∏–∫–∞": 15, "—Ç–µ—Ö–Ω–∏–∫–∞": 5,
    "–º–µ–±–µ–ª—å": 10, "–∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏": 5, "–æ–±—â–∏–µ —Ç–æ–≤–∞—Ä—ã": 10, "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã": 8,
    "—Ç–∫–∞–Ω–∏": 12, "–ø–æ—Å—É–¥–∞": 10, "–ø—Ä–æ–¥—É–∫—Ç—ã": 15, "–ª–µ–∫–∞—Ä—Å—Ç–≤–∞": 0, "–±–µ–ª—å–µ": 12
}

CUSTOMS_FEES = {
    "–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ": 15000,  # —Ç–µ–Ω–≥–µ
    "—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç": 120000,  # —Ç–µ–Ω–≥–µ
    "–ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è": 500  # USD
}

GREETINGS = ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "—Å–∞–ª–µ–º", "—Å”ô–ª–µ–º", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ"]

# --- –°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢ ---
SYSTEM_INSTRUCTION = """
–¢—ã ‚Äî —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ PostPro. –¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å –∫–ª–∏–µ–Ω—Ç—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É.

***–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:***

1. **–°–ö–õ–ê–î–´ –í –ö–ò–¢–ê–ï:** –£ –Ω–∞—Å —Ç–æ–ª—å–∫–æ 2 —Å–∫–ª–∞–¥–∞ - –ò–£ –∏ –ì—É–∞–Ω—á–∂–æ—É. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç "–æ—Ç–∫—É–¥–∞ –∑–∞–±–µ—Ä–µ—Ç–µ?" - –æ—Ç–≤–µ—á–∞–π: "–£—Ç–æ—á–Ω–∏—Ç–µ —É –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, –∫–∞–∫–æ–π —Å–∫–ª–∞–¥ –µ–º—É –±–ª–∏–∂–µ - –ò–£ –∏–ª–∏ –ì—É–∞–Ω—á–∂–æ—É"

2. **–¢–ê–†–ò–§–´:**
   - –¢1: –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è –¥–æ –ê–ª–º–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–æ —Å–∫–ª–∞–¥–∞, —Å–∞–º–æ–≤—ã–≤–æ–∑)
   - –¢2: –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –¥–≤–µ—Ä–∏ –≤ –õ–Æ–ë–û–ú –≥–æ—Ä–æ–¥–µ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞, –≤–∫–ª—é—á–∞—è –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ –ê–ª–º–∞—Ç—ã

3. **–û–ü–õ–ê–¢–ê:**
   - –£ –Ω–∞—Å –ø–æ—Å—Ç-–æ–ø–ª–∞—Ç–∞: –≤—ã –ø–ª–∞—Ç–∏—Ç–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–∑–∞
   - –§–æ—Ä–º–∞—Ç—ã –æ–ø–ª–∞—Ç—ã: –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç, –Ω–∞–ª–∏—á–Ω—ã–µ, Kaspi, Halyk, Freedom Bank
   - –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –ø—Ä–æ –æ–ø–ª–∞—Ç—É - –≤—Å–µ–≥–¥–∞ –æ–±—ä—è—Å–Ω—è–π —ç—Ç—É —Å–∏—Å—Ç–µ–º—É

4. **–†–ê–°–¢–ê–ú–û–ñ–ö–ê:**
   - –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É - –ø—Ä–µ–¥–ª–∞–≥–∞–π —Ä–∞—Å—á–µ—Ç —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
   - –û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã

5. **–õ–û–ì–ò–ö–ê –î–ò–ê–õ–û–ì–ê:**
   - –°–Ω–∞—á–∞–ª–∞ –±—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç
   - –ü–æ—Ç–æ–º –ø—Ä–µ–¥–ª–∞–≥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
   - –í –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –∑–∞—è–≤–∫—É

6. **–°–ë–û–† –ó–ê–Ø–í–ö–ò:**
   - –ö–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –ø–∏—à–µ—Ç –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω - —Å–æ—Ö—Ä–∞–Ω—è–π –∑–∞—è–≤–∫—É
   - –§–æ—Ä–º–∞—Ç: [–ó–ê–Ø–í–ö–ê] –ò–º—è: [–∏–º—è], –¢–µ–ª–µ—Ñ–æ–Ω: [—Ç–µ–ª–µ—Ñ–æ–Ω]

7. **–û–ë–©–ò–ï –í–û–ü–†–û–°–´:**
   - –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ (–ø–æ–≥–æ–¥–∞, –∏–º—è –±–æ—Ç–∞ –∏ —Ç.–¥.) - –æ—Ç–≤–µ—á–∞–π –Ω–æ—Ä–º–∞–ª—å–Ω–æ
   - –ù–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–π—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–µ

8. **–ù–ï –£–ü–û–ú–ò–ù–ê–ô:** –¥—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞ –ö–∏—Ç–∞—è –∫—Ä–æ–º–µ –ò–£ –∏ –ì—É–∞–Ω—á–∂–æ—É

–í—Å–µ–≥–¥–∞ –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º! üòä
"""

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–û–î–ï–õ–ò ---
model = None
try:
    if GEMINI_API_KEY:
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel(
            model_name='models/gemini-2.0-flash',
            system_instruction=SYSTEM_INSTRUCTION
        )
        logger.info(">>> –ú–æ–¥–µ–ª—å Gemini —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    else:
        logger.error("!!! API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
except Exception as e:
    logger.error(f"!!! –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini: {e}")

# --- –§–£–ù–ö–¶–ò–ò –†–ê–°–ß–ï–¢–ê –î–û–°–¢–ê–í–ö–ò ---
def calculate_quick_cost(weight: float, product_type: str, city: str):
    """–ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    try:
        # –¢1: –ö–∏—Ç–∞–π ‚Üí –ê–ª–º–∞—Ç—ã
        product_type_lower = product_type.lower()
        t1_rate = T1_RATES.get(product_type_lower, 2.40)
        t1_cost_usd = weight * t1_rate
        t1_cost_kzt = t1_cost_usd * EXCHANGE_RATE
        
        # –¢2: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞—Ä–∏—Ñ –¥–ª—è –≥–æ—Ä–æ–¥–∞
        city_lower = city.lower()
        if city_lower == "–∞–ª–º–∞—Ç—ã" or city_lower == "–∞–ª–º–∞—Ç–∞":
            t2_rate = T2_RATES["–∞–ª–º–∞—Ç—ã"]  # –ì–æ—Ä–æ–¥—Å–∫–æ–π —Ç–∞—Ä–∏—Ñ
            zone = "–∞–ª–º–∞—Ç—ã"
        else:
            zone = DESTINATION_ZONES.get(city_lower, 3)
            t2_rate = T2_RATES.get(zone, 250)
        
        t2_cost_kzt = weight * t2_rate
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (–¢1 + –¢2 + 20% –∫–æ–º–∏—Å—Å–∏—è)
        total_cost = (t1_cost_kzt + t2_cost_kzt) * 1.20
        
        return {
            't1_cost': t1_cost_kzt,
            't2_cost': t2_cost_kzt, 
            'total': total_cost,
            'zone': zone,
            't2_rate': t2_rate
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        return None

def calculate_detailed_cost(weight: float, product_type: str, city: str):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å —Ä–∞–∑–±–∏–≤–∫–æ–π"""
    quick_cost = calculate_quick_cost(weight, product_type, city)
    if not quick_cost:
        return "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞"
    
    t1_cost = quick_cost['t1_cost']
    t2_cost = quick_cost['t2_cost'] 
    total = quick_cost['total']
    zone = quick_cost['zone']
    t2_rate = quick_cost['t2_rate']
    
    # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –¢1
    product_type_lower = product_type.lower()
    t1_rate = T1_RATES.get(product_type_lower, 2.40)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –¢2 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥–æ—Ä–æ–¥–∞
    city_name = city.capitalize()
    if zone == "–∞–ª–º–∞—Ç—ã":
        t2_explanation = f"‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É –ê–ª–º–∞—Ç—ã –¥–æ –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞"
        zone_text = "–≥–æ—Ä–æ–¥ –ê–ª–º–∞—Ç—ã"
        comparison_text = f"üí° **–ï—Å–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑ —Å–æ —Å–∫–ª–∞–¥–∞ –≤ –ê–ª–º–∞—Ç—ã:** {t1_cost * 1.20:.0f} —Ç–µ–Ω–≥–µ"
    else:
        t2_explanation = f"‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞ –≤ {city_name}"
        zone_text = f"–ó–æ–Ω–∞ {zone}"
        comparison_text = f"üí° **–ï—Å–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑ –ê–ª–º–∞—Ç—ã:** {t1_cost * 1.20:.0f} —Ç–µ–Ω–≥–µ"
    
    response = (
        f"üìä **–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è {weight} –∫–≥ ¬´{product_type}¬ª –≤ –≥. {city_name}:**\n\n"
        f"**–¢1: –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è –¥–æ –ê–ª–º–∞—Ç—ã**\n"
        f"‚Ä¢ –î–æ —Å–∫–ª–∞–¥–∞ –≤ –ê–ª–º–∞—Ç—ã (—Å–∞–º–æ–≤—ã–≤–æ–∑)\n"
        f"‚Ä¢ ${t1_rate}/–∫–≥ √ó {weight} –∫–≥ = ${weight * t1_rate:.2f} USD\n"
        f"‚Ä¢ –ü–æ –∫—É—Ä—Å—É {EXCHANGE_RATE} —Ç–µ–Ω–≥–µ/$ = {t1_cost:.0f} —Ç–µ–Ω–≥–µ\n\n"
        f"**–¢2: –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –¥–≤–µ—Ä–∏ ({zone_text})**\n"
        f"{t2_explanation}\n"
        f"‚Ä¢ {t2_rate} —Ç–µ–Ω–≥–µ/–∫–≥ √ó {weight} –∫–≥ = {t2_cost:.0f} —Ç–µ–Ω–≥–µ\n\n"
        f"**–ö–æ–º–∏—Å—Å–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ (20%):**\n"
        f"‚Ä¢ ({t1_cost:.0f} + {t2_cost:.0f}) √ó 20% = {(t1_cost + t2_cost) * 0.20:.0f} —Ç–µ–Ω–≥–µ\n\n"
        f"------------------------------------\n"
        f"üí∞ **–ò–¢–û–ì–û —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –¥–æ –¥–≤–µ—Ä–∏:** ‚âà **{total:.0f} —Ç–µ–Ω–≥–µ**\n\n"
        f"{comparison_text}\n\n"
        f"üí° **–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ:** –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ 1% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥—Ä—É–∑–∞\n"
        f"üí≥ **–û–ø–ª–∞—Ç–∞:** –ø–æ—Å—Ç-–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏\n\n"
        f"‚ùì **–ù–µ –ø–æ–Ω—è—Ç–Ω—ã —Ç–∞—Ä–∏—Ñ—ã?** –ù–∞–ø–∏—à–∏—Ç–µ '–æ–±—ä—è—Å–Ω–∏ —Ç–∞—Ä–∏—Ñ—ã'\n\n"
        f"‚úÖ **–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?** –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω!"
    )
    return response

# --- –§–£–ù–ö–¶–ò–ò –†–ê–°–ß–ï–¢–ê –†–ê–°–¢–ê–ú–û–ñ–ö–ò ---
def calculate_customs_cost(invoice_value: float, product_type: str, weight: float = None, has_certificate: bool = False, needs_certificate: bool = False):
    """–†–∞—Å—á–µ—Ç —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
    try:
        # –ü–æ—à–ª–∏–Ω–∞
        customs_rate = CUSTOMS_RATES.get(product_type.lower(), 10) / 100
        duty_usd = invoice_value * customs_rate
        duty_kzt = duty_usd * EXCHANGE_RATE
        
        # –ù–î–° (12% –æ—Ç: —Å—Ç–æ–∏–º–æ—Å—Ç—å + –ø–æ—à–ª–∏–Ω–∞)
        vat_base_usd = invoice_value + duty_usd
        vat_kzt = vat_base_usd * 0.12 * EXCHANGE_RATE
        
        # –°–±–æ—Ä—ã
        customs_fee = CUSTOMS_FEES["–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"]
        certificate_fee = CUSTOMS_FEES["—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"] if needs_certificate else 0
        origin_cert_fee = CUSTOMS_FEES["–ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è"] * EXCHANGE_RATE if has_certificate else 0
        
        total_customs_kzt = duty_kzt + vat_kzt + customs_fee + certificate_fee + origin_cert_fee
        
        return {
            'duty_usd': duty_usd,
            'duty_kzt': duty_kzt,
            'vat_kzt': vat_kzt,
            'customs_fee': customs_fee,
            'certificate_fee': certificate_fee,
            'origin_cert_fee': origin_cert_fee,
            'total_kzt': total_customs_kzt,
            'total_usd': total_customs_kzt / EXCHANGE_RATE
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏: {e}")
        return None

def get_tnved_code(product_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –¢–ù –í–≠–î —á–µ—Ä–µ–∑ Gemini"""
    if not model:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"
    
    try:
        prompt = f"–û–ø—Ä–µ–¥–µ–ª–∏ –∫–æ–¥ –¢–ù –í–≠–î –ï–ê–≠–° –¥–ª—è —Ç–æ–≤–∞—Ä–∞: '{product_name}'. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXXXX XXX X –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –ø–æ—è—Å–Ω–µ–Ω–∏–π, —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ç–æ—á–µ–∫. –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã."
        response = model.generate_content(prompt)
        code = response.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –ø–æ—Ö–æ–∂ –Ω–∞ –∫–æ–¥ –¢–ù –í–≠–î
        if re.match(r'^\d{4,10}[\s\d]*$', code):
            return code
        else:
            return "–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –¢–ù –í–≠–î: {e}")
        return "–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"

def check_certification_requirements(product_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Gemini"""
    if not model:
        return False
    
    try:
        prompt = f"–ù—É–∂–µ–Ω –ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¢–† –¢–° –¥–ª—è —Ç–æ–≤–∞—Ä–∞: '{product_name}'? –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ '–î–ê' –∏–ª–∏ '–ù–ï–¢' –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."
        response = model.generate_content(prompt)
        return "–î–ê" in response.text.upper()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return True  # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –Ω—É–∂–µ–Ω

def get_customs_procedure():
    """–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏"""
    return """üìã **–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏:**

1. **–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**
   ‚Ä¢ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –∏–Ω–≤–æ–π—Å
   ‚Ä¢ –£–ø–∞–∫–æ–≤–æ—á–Ω—ã–π –ª–∏—Å—Ç  
   ‚Ä¢ –í–Ω–µ—à–Ω–µ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
   ‚Ä¢ –¢–æ–≤–∞—Ä–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –Ω–∞–∫–ª–∞–¥–Ω–∞—è

2. **–¢–∞–º–æ–∂–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:**
   ‚Ä¢ –¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–¥–∞ –¢–ù –í–≠–î)
   ‚Ä¢ –ù–î–° 12% (–æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ + –ø–æ—à–ª–∏–Ω–∞)
   ‚Ä¢ –¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä

3. **–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:**
   ‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
   ‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è (–¥–ª—è –ø—Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∏–π)

üí° **–ù–∞—à —Ç–∞–º–æ–∂–µ–Ω–Ω—ã–π –±—Ä–æ–∫–µ—Ä –ø–æ–º–æ–∂–µ—Ç —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º!**"""

def explain_tariffs():
    """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤ –¢1 –∏ –¢2"""
    return """üöö **–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤:**

**–¢1 - –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ —Å–∫–ª–∞–¥–∞ –≤ –ê–ª–º–∞—Ç—ã:**
‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è –¥–æ –Ω–∞—à–µ–≥–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞ –≤ –ê–ª–º–∞—Ç—ã
‚Ä¢ –í—ã –∑–∞–±–∏—Ä–∞–µ—Ç–µ –≥—Ä—É–∑ —Å–∞–º–æ–≤—ã–≤–æ–∑–æ–º —Å–æ —Å–∫–ª–∞–¥–∞
‚Ä¢ –¢–û–õ–¨–ö–û —Å–∫–ª–∞–¥ –≤ –ê–ª–º–∞—Ç—ã, –±–µ–∑ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –≥–æ—Ä–æ–¥—É

**–¢2 - –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –¥–≤–µ—Ä–∏:**
‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è + –¥–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞ –≤ –õ–Æ–ë–û–ú –≥–æ—Ä–æ–¥–µ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞
‚Ä¢ –í–∫–ª—é—á–∞—è –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ –≥–æ—Ä–æ–¥—É –ê–ª–º–∞—Ç—ã –¥–æ –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞
‚Ä¢ –ú—ã –ø—Ä–∏–≤–æ–∑–∏–º –≥—Ä—É–∑ –ø—Ä—è–º–æ –∫ –≤–∞–º

üí° **–í–∞–∂–Ω–æ:** –î–∞–∂–µ –µ—Å–ª–∏ –≤—ã –≤ –ê–ª–º–∞—Ç—ã, –Ω–æ –Ω—É–∂–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –∞–¥—Ä–µ—Å–∞ - —ç—Ç–æ –¢2

üí≥ **–û–ø–ª–∞—Ç–∞:** –ø–æ—Å—Ç-–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ (–Ω–∞–ª–∏—á–Ω—ã–µ, Kaspi, Halyk, Freedom Bank, –±–µ–∑–Ω–∞–ª)"""

def get_payment_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–æ—Å–æ–±–∞—Ö –æ–ø–ª–∞—Ç—ã"""
    return """üí≥ **–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã:**

üí∞ **–ü–æ—Å—Ç-–æ–ø–ª–∞—Ç–∞:** –í—ã –ø–ª–∞—Ç–∏—Ç–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–∑–∞ –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è –≤–∞—Å —Ñ–æ—Ä–º–∞—Ç–µ:

‚Ä¢ **–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç** –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –Ω–∞ —Å—á–µ—Ç
‚Ä¢ **–ù–∞–ª–∏—á–Ω—ã–º–∏** 
‚Ä¢ **Kaspi Bank**
‚Ä¢ **Halyk Bank** 
‚Ä¢ **Freedom Bank**

üí° –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ—Å–º–æ—Ç—Ä–∞ –≥—Ä—É–∑–∞!"""

def get_delivery_procedure():
    return """üì¶ **–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:**

1. **–ü—Ä–∏–µ–º –≥—Ä—É–∑–∞ –≤ –ö–∏—Ç–∞–µ:** –í–∞—à –≥—Ä—É–∑ –ø—Ä–∏–±—É–¥–µ—Ç –Ω–∞ –Ω–∞—à —Å–∫–ª–∞–¥ –≤ –ö–∏—Ç–∞–µ (–ò–£ –∏–ª–∏ –ì—É–∞–Ω—á–∂–æ—É)
2. **–û—Å–º–æ—Ç—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞:** –í–∑–≤–µ—à–∏–≤–∞–µ–º, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–µ–º, —É–ø–∞–∫–æ–≤—ã–≤–∞–µ–º
3. **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:** –ü—Ä–∏—Å—ã–ª–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≥—Ä—É–∑–∞
4. **–û—Ç–ø—Ä–∞–≤–∫–∞:** –î–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ –ê–ª–º–∞—Ç—ã (–¢1) –∏–ª–∏ –¥–æ –¥–≤–µ—Ä–∏ (–¢2)
5. **–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–ø–ª–∞—Ç–∞:** –ó–∞–±–∏—Ä–∞–µ—Ç–µ –≥—Ä—É–∑ –∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º

üí≥ **–û–ø–ª–∞—Ç–∞:** –ø–æ—Å—Ç-–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ (–Ω–∞–ª–∏—á–Ω—ã–µ, Kaspi, Halyk, Freedom Bank, –±–µ–∑–Ω–∞–ª)

‚úÖ **–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É?** –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω!"""

def save_application(details):
    try:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: {timestamp}\n{details}\n"
        with open("applications.txt", "a", encoding="utf-8") as f: 
            f.write("="*50 + "\n" + log_entry + "="*50 + "\n\n")
        logger.info(f"–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {details}")
    except Exception as e: 
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def get_gemini_response(user_message, context=""):
    if not model:
        return "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    
    try:
        full_prompt = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ: {user_message}\n\n–û—Ç–≤–µ—Ç:"
        response = model.generate_content(
            full_prompt,
            generation_config=GenerationConfig(
                temperature=0.7,
                max_output_tokens=1000,
            )
        )
        return response.text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Gemini: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def extract_delivery_info(text):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Å—Ç–∞–≤–∫–µ"""
    weight = None
    product_type = None
    city = None
    
    try:
        # –ü–æ–∏—Å–∫ –≤–µ—Å–∞
        weight_patterns = [
            r'(\d+(?:\.\d+)?)\s*(?:–∫–≥|kg|–∫–∏–ª–æ–≥—Ä–∞–º–º|–∫–∏–ª–æ)',
            r'–≤–µ—Å\s*[:\-]?\s*(\d+(?:\.\d+)?)',
        ]
        
        for pattern in weight_patterns:
            match = re.search(pattern, text.lower())
            if match:
                weight = float(match.group(1))
                break
        
        # –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞
        text_lower = text.lower()
        for city_name in DESTINATION_ZONES:
            if city_name in text_lower:
                city = city_name
                break
        
        # –ü–æ–∏—Å–∫ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
        product_keywords = {
            '–æ–¥–µ–∂–¥–∞': ['–æ–¥–µ–∂–¥–∞', '–∞–¥–µ–∂–¥–∞', '–æ–¥–µ–∂–¥'],
            '–ª–µ–∫–∞—Ä—Å—Ç–≤–∞': ['–ª–µ–∫–∞—Ä—Å—Ç–≤–∞', '–ª–µ–∫–∞—Ä—Å–∏–≤–∞', '–º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã'],
            '–∫–æ—Å–º–µ—Ç–∏–∫–∞': ['–∫–æ—Å–º–µ—Ç–∏–∫–∞', '–∫—Ä–µ–º', '—à–∞–º–ø—É–Ω—å', '–º–∞–∫–∏—è–∂'],
            '—Ç–µ—Ö–Ω–∏–∫–∞': ['—Ç–µ—Ö–Ω–∏–∫–∞', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–Ω–æ—É—Ç–±—É–∫', '–≥–∞–¥–∂–µ—Ç'],
            '–º–µ–±–µ–ª—å': ['–º–µ–±–µ–ª—å', '—Å—Ç–æ–ª', '—Å—Ç—É–ª', '–∫—Ä–æ–≤–∞—Ç—å'],
            '–ø–æ—Å—É–¥–∞': ['–ø–æ—Å—É–¥–∞', '—Ç–∞—Ä–µ–ª–∫–∏', '—á–∞—à–∫–∏'],
            '–æ–±—â–∏–µ —Ç–æ–≤–∞—Ä—ã': ['—Ç–æ–≤–∞—Ä—ã', '—Ç–æ–≤–∞—Ä', '—Ä–∞–∑–Ω–æ–µ', '–ø—Ä–æ—á–µ–µ']
        }
        
        for prod_type, keywords in product_keywords.items():
            if any(keyword in text_lower for keyword in keywords):
                product_type = prod_type
                break
        
        return weight, product_type, city
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, None, None

def extract_customs_info(text):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏"""
    try:
        # –ü–æ–∏—Å–∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        cost_patterns = [
            r'(\d+(?:\.\d+)?)\s*(?:usd|\$|–¥–æ–ª–ª–∞—Ä)',
            r'—Å—Ç–æ–∏–º–æ—Å\w*\s*[:\-]?\s*(\d+(?:\.\d+)?)',
            r'–Ω–∞\s*(\d+(?:\.\d+)?)\s*(?:usd|\$)',
        ]
        
        invoice_value = None
        for pattern in cost_patterns:
            match = re.search(pattern, text.lower())
            if match:
                invoice_value = float(match.group(1))
                break
        
        # –ü–æ–∏—Å–∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è
        has_certificate = any(word in text.lower() for word in ['—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –µ—Å—Ç—å', '–µ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç', '–¥–∞, –µ—Å—Ç—å', '–∏–º–µ–µ—Ç—Å—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç'])
        needs_certificate = any(word in text.lower() for word in ['–Ω—É–∂–µ–Ω —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç', '—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç', '–±–µ–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞'])
        
        return invoice_value, has_certificate, needs_certificate
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏: {e}")
        return None, False, False

def extract_contact_info(text):
    """–£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    name = None
    phone = None
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    clean_text = re.sub(r'\s+', ' ', text.strip()).lower()
    
    # –ü–æ–∏—Å–∫ –∏–º–µ–Ω–∏ (–ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ 2+ —Ä—É—Å—Å–∫–∏—Ö/–∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±—É–∫–≤)
    name_match = re.search(r'^([–∞-—èa-z]{2,})', clean_text)
    if name_match:
        name = name_match.group(1).capitalize()
    
    # –ü–æ–∏—Å–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
    phone_patterns = [
        r'(\d{10,11})',  # 87057600909
        r'(\d{3}[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2})',  # 870 576 00 909
        r'(\d{3}[\s\-]?\d{2}[\s\-]?\d{2}[\s\-]?\d{3})',  # 870 57 600 909
    ]
    
    for pattern in phone_patterns:
        phone_match = re.search(pattern, clean_text)
        if phone_match:
            phone = re.sub(r'\D', '', phone_match.group(1))
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
            if phone.startswith('8'):
                phone = '7' + phone[1:]
            elif len(phone) == 10:
                phone = '7' + phone
            break
    
    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∏ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    if name and phone and len(phone) >= 10:
        return name, phone
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–ª–µ—Ñ–æ–Ω, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–º—è –≤ —Ç–µ–∫—Å—Ç–µ
    if phone and not name:
        # –ò—â–µ–º –∏–º—è –ø–µ—Ä–µ–¥ –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –≤ –Ω–∞—á–∞–ª–µ —Ç–µ–∫—Å—Ç–∞
        name_before_comma = re.search(r'^([–∞-—èa-z]+)\s*[,]', clean_text)
        if name_before_comma:
            name = name_before_comma.group(1).capitalize()
    
    return name, phone

# --- ROUTES ---
@app.route('/')
def index(): 
    if 'delivery_data' not in session:
        session['delivery_data'] = {'weight': None, 'product_type': None, 'city': None, 'delivery_type': None}
    if 'customs_data' not in session:
        session['customs_data'] = {'invoice_value': None, 'product_type': None, 'has_certificate': False, 'needs_certificate': False}
    if 'chat_history' not in session:
        session['chat_history'] = []
    if 'waiting_for_contacts' not in session:
        session['waiting_for_contacts'] = False
    if 'waiting_for_customs' not in session:
        session['waiting_for_customs'] = False
    return render_template('index.html')

@app.route('/chat', methods=['POST'])
def chat():
    try:
        user_message = request.json.get('message', '').strip()
        if not user_message:
            return jsonify({"response": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."})
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–π
        delivery_data = session.get('delivery_data', {'weight': None, 'product_type': None, 'city': None, 'delivery_type': None})
        customs_data = session.get('customs_data', {'invoice_value': None, 'product_type': None, 'has_certificate': False, 'needs_certificate': False})
        chat_history = session.get('chat_history', [])
        waiting_for_contacts = session.get('waiting_for_contacts', False)
        waiting_for_customs = session.get('waiting_for_customs', False)
        
        chat_history.append(f"–ö–ª–∏–µ–Ω—Ç: {user_message}")
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        if user_message.lower() in GREETINGS:
            session.update({
                'delivery_data': {'weight': None, 'product_type': None, 'city': None, 'delivery_type': None},
                'customs_data': {'invoice_value': None, 'product_type': None, 'has_certificate': False, 'needs_certificate': False},
                'chat_history': [f"–ö–ª–∏–µ–Ω—Ç: {user_message}"],
                'waiting_for_contacts': False,
                'waiting_for_customs': False
            })
            return jsonify({"response": "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –≤–∞—à –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ Post Pro.\n\nüöö **–†–∞—Å—Å—á–∏—Ç–∞—é –¥–æ—Å—Ç–∞–≤–∫—É –∏–∑ –ö–∏—Ç–∞—è –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω:**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:\n\nüü¢ **–ö–ê–†–ì–û** (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞)\n‚Ä¢ –î–ª—è –ª–∏—á–Ω—ã—Ö –≤–µ—â–µ–π, –ø—Ä–æ–±–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π\n‚Ä¢ –†–∞—Å—á–µ—Ç –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º –¢1 –∏ –¢2\n‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç\n\nüîµ **–ò–ù–í–û–ô–°** (–ø–æ–ª–Ω–æ–µ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ)\n‚Ä¢ –î–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø–∞—Ä—Ç–∏–π —Å –∏–Ω–≤–æ–π—Å–æ–º\n‚Ä¢ –ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π\n‚Ä¢ –†–∞—Å—Ç–∞–º–æ–∂–∫–∞, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è, –¥–æ–∫—É–º–µ–Ω—Ç—ã\n\n**–ù–∞–ø–∏—à–∏—Ç–µ '–ö–∞—Ä–≥–æ' –∏–ª–∏ '–ò–Ω–≤–æ–π—Å'**"})
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω)
        if not delivery_data['delivery_type']:
            if any(word in user_message.lower() for word in ['–∫–∞—Ä–≥–æ', 'cargo', '–ª–∏—á–Ω—ã–µ –≤–µ—â–∏', '–ø—Ä–æ–±–Ω–∞—è –ø–∞—Ä—Ç–∏—è', '—É–ø—Ä–æ—â–µ–Ω']):
                delivery_data['delivery_type'] = 'CARGO'
                session['delivery_data'] = delivery_data
                return jsonify({"response": "üü¢ **–í–´–ë–†–ê–ù –ö–ê–†–ì–û** (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞)\n\n–†–∞—Å—á–µ—Ç –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º –¢1 –∏ –¢2\n\nüí° **–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ:**\n‚Ä¢ –í–µ—Å –≥—Ä—É–∑–∞\n‚Ä¢ –¢–∏–ø —Ç–æ–≤–∞—Ä–∞  \n‚Ä¢ –ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏\n\n**–ü—Ä–∏–º–µ—Ä:** '50 –∫–≥ –æ–¥–µ–∂–¥—ã –≤ –ê—Å—Ç–∞–Ω—É'"})
            
            elif any(word in user_message.lower() for word in ['–∏–Ω–≤–æ–π—Å', 'invoice', '–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π', '—Ä–∞—Å—Ç–∞–º–æ–∂–∫–∞', '—Ç–∞–º–æ–∂–µ–Ω', '–ø–æ–ª–Ω—ã–π']):
                delivery_data['delivery_type'] = 'INVOICE'
                session['delivery_data'] = delivery_data
                return jsonify({"response": "üîµ **–í–´–ë–†–ê–ù –ò–ù–í–û–ô–°** (–ø–æ–ª–Ω–æ–µ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ)\n\n‚Ä¢ –ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π\n‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –∫–æ–¥–∞–º–∏ –¢–ù –í–≠–î\n‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n\nüí° **–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ:**\n‚Ä¢ –í–µ—Å –≥—Ä—É–∑–∞ –∏ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞\n‚Ä¢ –ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ  \n‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –ø–æ –∏–Ω–≤–æ–π—Å—É (USD)\n\n**–ü—Ä–∏–º–µ—Ä:** '100 –∫–≥ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏ –≤ –ê–ª–º–∞—Ç—ã, —Å—Ç–æ–∏–º–æ—Å—Ç—å 5000 USD'"})
        
        # –ï—Å–ª–∏ –∂–¥–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
        if waiting_for_contacts:
            name, phone = extract_contact_info(user_message)
            
            if name and phone:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏
                details = f"–ò–º—è: {name}, –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
                if delivery_data['weight']:
                    details += f", –í–µ—Å: {delivery_data['weight']} –∫–≥"
                if delivery_data['product_type']:
                    details += f", –¢–æ–≤–∞—Ä: {delivery_data['product_type']}"
                if delivery_data['city']:
                    details += f", –ì–æ—Ä–æ–¥: {delivery_data['city']}"
                if customs_data['invoice_value']:
                    details += f", –°—Ç–æ–∏–º–æ—Å—Ç—å: {customs_data['invoice_value']} USD"
                if delivery_data['delivery_type']:
                    details += f", –¢–∏–ø: {delivery_data['delivery_type']}"
                
                save_application(details)
                
                # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
                session.update({
                    'delivery_data': {'weight': None, 'product_type': None, 'city': None, 'delivery_type': None},
                    'customs_data': {'invoice_value': None, 'product_type': None, 'has_certificate': False, 'needs_certificate': False},
                    'chat_history': [],
                    'waiting_for_contacts': False,
                    'waiting_for_customs': False
                })
                
                return jsonify({"response": "üéâ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ Post Pro! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç. üìû"})
            else:
                # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ - —É—Ç–æ—á–Ω—è–µ–º
                return jsonify({"response": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–ò–º—è, 87001234567'"})
        
        # –ï—Å–ª–∏ –∂–¥–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏ (—Ä–µ–∂–∏–º –ò–ù–í–û–ô–°)
        if waiting_for_customs or delivery_data['delivery_type'] == 'INVOICE':
            invoice_value, has_certificate, needs_certificate = extract_customs_info(user_message)
            
            if invoice_value:
                customs_data['invoice_value'] = invoice_value
                customs_data['has_certificate'] = has_certificate
                customs_data['needs_certificate'] = needs_certificate
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ –¥–æ—Å—Ç–∞–≤–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
                if delivery_data['product_type']:
                    customs_data['product_type'] = delivery_data['product_type']
                else:
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                    product_types = ['–æ–¥–µ–∂–¥–∞', '—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–∫–æ—Å–º–µ—Ç–∏–∫–∞', '—Ç–µ—Ö–Ω–∏–∫–∞', '–º–µ–±–µ–ª—å', '–∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏', '–ø–æ—Å—É–¥–∞']
                    for p_type in product_types:
                        if p_type in user_message.lower():
                            customs_data['product_type'] = p_type
                            break
                
                # –ï—Å–ª–∏ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π
                if not customs_data['product_type']:
                    customs_data['product_type'] = "–æ–±—â–∏–µ —Ç–æ–≤–∞—Ä—ã"
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –¢–ù –í–≠–î
                tnved_code = get_tnved_code(customs_data['product_type'])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω—ã –ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
                needs_certification = check_certification_requirements(customs_data['product_type'])
                
                # –†–∞—Å—á–µ—Ç —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
                customs_cost = calculate_customs_cost(
                    customs_data['invoice_value'],
                    customs_data['product_type'],
                    delivery_data['weight'] if delivery_data['weight'] else 100,
                    customs_data['has_certificate'],
                    needs_certification or customs_data['needs_certificate']
                )
                
               
