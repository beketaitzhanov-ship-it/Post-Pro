from flask import Flask, render_template, request, jsonify, session
import os
import re
import json
from datetime import datetime
import google.generativeai as genai
from google.generativeai.types import GenerationConfig
from dotenv import load_dotenv
import socket
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
GEMINI_API_KEY = os.getenv("GOOGLE_API_KEY")

app = Flask(__name__)
app.secret_key = 'postpro-secret-key-2024'
app.config['PERMANENT_SESSION_LIFETIME'] = 1800

# --- –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ---
def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ config.json."""
    try:
        with open('config.json', 'r', encoding='utf-8') as f:
            config_data = json.load(f)
            logger.info(">>> –§–∞–π–ª config.json —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
            return config_data
    except FileNotFoundError:
        logger.error("!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
    except json.JSONDecodeError:
        logger.error("!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ config.json!")
        return None
    except Exception as e:
        logger.error(f"!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ config.json: {e}")
        return None

config = load_config()

if config:
    EXCHANGE_RATE = config.get("EXCHANGE_RATE", 550)
    DESTINATION_ZONES = config.get("DESTINATION_ZONES", {})
    T1_RATES = config.get("T1_RATES", {})
    T2_RATES = config.get("T2_RATES", {})
    CUSTOMS_RATES = config.get("CUSTOMS_RATES", {})
    CUSTOMS_FEES = config.get("CUSTOMS_FEES", {})
    GREETINGS = config.get("GREETINGS", [])
else:
    # –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
    logger.error("!!! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ config.json")
    EXCHANGE_RATE, DESTINATION_ZONES, T1_RATES, T2_RATES, CUSTOMS_RATES, CUSTOMS_FEES, GREETINGS = 550, {}, {}, {}, {}, {}, []

# --- –°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢ ---
SYSTEM_INSTRUCTION = """
–¢—ã ‚Äî —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ PostPro. –¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å –∫–ª–∏–µ–Ω—Ç—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É.

***–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:***

1. **–°–ö–õ–ê–î–´ –í –ö–ò–¢–ê–ï:** –£ –Ω–∞—Å —Ç–æ–ª—å–∫–æ 2 —Å–∫–ª–∞–¥–∞ - –ò–£ –∏ –ì—É–∞–Ω—á–∂–æ—É. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç "–æ—Ç–∫—É–¥–∞ –∑–∞–±–µ—Ä–µ—Ç–µ?" - –æ—Ç–≤–µ—á–∞–π: "–£—Ç–æ—á–Ω–∏—Ç–µ —É –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, –∫–∞–∫–æ–π —Å–∫–ª–∞–¥ –µ–º—É –±–ª–∏–∂–µ - –ò–£ –∏–ª–∏ –ì—É–∞–Ω—á–∂–æ—É"

2. **–¢–ê–†–ò–§–´:**
   - –¢1: –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è –¥–æ –ê–ª–º–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–æ —Å–∫–ª–∞–¥–∞, —Å–∞–º–æ–≤—ã–≤–æ–∑)
   - –¢2: –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –¥–≤–µ—Ä–∏ –≤ –õ–Æ–ë–û–ú –≥–æ—Ä–æ–¥–µ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞, –≤–∫–ª—é—á–∞—è –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ –ê–ª–º–∞—Ç—ã

3. **–û–ü–õ–ê–¢–ê:**
   - –£ –Ω–∞—Å –ø–æ—Å—Ç-–æ–ø–ª–∞—Ç–∞: –≤—ã –ø–ª–∞—Ç–∏—Ç–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–∑–∞
   - –§–æ—Ä–º–∞—Ç—ã –æ–ø–ª–∞—Ç–∞: –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç, –Ω–∞–ª–∏—á–Ω—ã–µ, Kaspi, Halyk, Freedom Bank
   - –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –ø—Ä–æ –æ–ø–ª–∞—Ç—É - –≤—Å–µ–≥–¥–∞ –æ–±—ä—è—Å–Ω—è–π —ç—Ç—É —Å–∏—Å—Ç–µ–º—É

4. **–õ–û–ì–ò–ö–ê –î–ò–ê–õ–û–ì–ê:**
   - –°–Ω–∞—á–∞–ª–∞ –±—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç
   - –ü–æ—Ç–æ–º –ø—Ä–µ–¥–ª–∞–≥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
   - –í –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –∑–∞—è–≤–∫—É

5. **–°–ë–û–† –ó–ê–Ø–í–ö–ò:**
   - –ö–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –ø–∏—à–µ—Ç –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω - —Å–æ—Ö—Ä–∞–Ω—è–π –∑–∞—è–≤–∫—É
   - –§–æ—Ä–º–∞—Ç: [–ó–ê–Ø–í–ö–ê] –ò–º—è: [–∏–º—è], –¢–µ–ª–µ—Ñ–æ–Ω: [—Ç–µ–ª–µ—Ñ–æ–Ω]

6. **–û–ë–©–ò–ï –í–û–ü–†–û–°–´:**
   - –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ (–ø–æ–≥–æ–¥–∞, –∏–º—è –±–æ—Ç–∞ –∏ —Ç.–¥.) - –æ—Ç–≤–µ—á–∞–π –Ω–æ—Ä–º–∞–ª—å–Ω–æ
   - –ù–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–π—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–µ

7. **–ù–ï –£–ü–û–ú–ò–ù–ê–ô:** –¥—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞ –ö–∏—Ç–∞—è –∫—Ä–æ–º–µ –ò–£ –∏ –ì—É–∞–Ω—á–∂–æ—É

–í—Å–µ–≥–¥–∞ –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º! üòä
"""

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–û–î–ï–õ–ò ---
model = None
try:
    if GEMINI_API_KEY:
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel(
            model_name='models/gemini-2.0-flash',
            system_instruction=SYSTEM_INSTRUCTION
        )
        logger.info(">>> –ú–æ–¥–µ–ª—å Gemini —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    else:
        logger.error("!!! API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
except Exception as e:
    logger.error(f"!!! –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini: {e}")

# --- –§–£–ù–ö–¶–ò–ò –†–ê–°–ß–ï–¢–ê ---
def calculate_quick_cost(weight: float, product_type: str, city: str):
    """–ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    try:
        # –¢1: –ö–∏—Ç–∞–π ‚Üí –ê–ª–º–∞—Ç—ã
        product_type_lower = product_type.lower()
        t1_rate = T1_RATES.get(product_type_lower, 2.40)
        t1_cost_usd = weight * t1_rate
        t1_cost_kzt = t1_cost_usd * EXCHANGE_RATE
        
        # –¢2: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞—Ä–∏—Ñ –¥–ª—è –≥–æ—Ä–æ–¥–∞
        city_lower = city.lower()
        if city_lower == "–∞–ª–º–∞—Ç—ã" or city_lower == "–∞–ª–º–∞—Ç–∞":
            t2_rate = T2_RATES.get("–∞–ª–º–∞—Ç—ã", 120)  # –ì–æ—Ä–æ–¥—Å–∫–æ–π —Ç–∞—Ä–∏—Ñ
            zone = "–∞–ª–º–∞—Ç—ã"
        else:
            zone = DESTINATION_ZONES.get(city_lower, 3)
            t2_rate = T2_RATES.get(str(zone), 250)
        
        t2_cost_kzt = weight * t2_rate
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (–¢1 + –¢2 + 20% –∫–æ–º–∏—Å—Å–∏—è)
        total_cost = (t1_cost_kzt + t2_cost_kzt) * 1.20
        
        return {
            't1_cost': t1_cost_kzt,
            't2_cost': t2_cost_kzt, 
            'total': total_cost,
            'zone': zone,
            't2_rate': t2_rate
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        return None

def calculate_detailed_cost(weight: float, product_type: str, city: str):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å —Ä–∞–∑–±–∏–≤–∫–æ–π"""
    quick_cost = calculate_quick_cost(weight, product_type, city)
    if not quick_cost:
        return "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞"
    
    t1_cost = quick_cost['t1_cost']
    t2_cost = quick_cost['t2_cost'] 
    total = quick_cost['total']
    zone = quick_cost['zone']
    t2_rate = quick_cost['t2_rate']
    
    # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –¢1
    product_type_lower = product_type.lower()
    t1_rate = T1_RATES.get(product_type_lower, 2.40)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –¢2 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥–æ—Ä–æ–¥–∞
    city_name = city.capitalize()
    if zone == "–∞–ª–º–∞—Ç—ã":
        t2_explanation = f"‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É –ê–ª–º–∞—Ç—ã –¥–æ –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞"
        zone_text = "–≥–æ—Ä–æ–¥ –ê–ª–º–∞—Ç—ã"
        comparison_text = f"üí° **–ï—Å–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑ —Å–æ —Å–∫–ª–∞–¥–∞ –≤ –ê–ª–º–∞—Ç—ã:** {t1_cost * 1.20:.0f} —Ç–µ–Ω–≥–µ"
    else:
        t2_explanation = f"‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞ –≤ {city_name}"
        zone_text = f"–ó–æ–Ω–∞ {zone}"
        comparison_text = f"üí° **–ï—Å–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑ –ê–ª–º–∞—Ç—ã:** {t1_cost * 1.20:.0f} —Ç–µ–Ω–≥–µ"
    
    response = (
        f"üìä **–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è {weight} –∫–≥ ¬´{product_type}¬ª –≤ –≥. {city_name}:**\n\n"
        f"**–¢1: –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è –¥–æ –ê–ª–º–∞—Ç—ã**\n"
        f"‚Ä¢ –î–æ —Å–∫–ª–∞–¥–∞ –≤ –ê–ª–º–∞—Ç—ã (—Å–∞–º–æ–≤—ã–≤–æ–∑)\n"
        f"‚Ä¢ ${t1_rate}/–∫–≥ √ó {weight} –∫–≥ = ${weight * t1_rate:.2f} USD\n"
        f"‚Ä¢ –ü–æ –∫—É—Ä—Å—É {EXCHANGE_RATE} —Ç–µ–Ω–≥–µ/$ = {t1_cost:.0f} —Ç–µ–Ω–≥–µ\n\n"
        f"**–¢2: –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –¥–≤–µ—Ä–∏ ({zone_text})**\n"
        f"{t2_explanation}\n"
        f"‚Ä¢ {t2_rate} —Ç–µ–Ω–≥–µ/–∫–≥ √ó {weight} –∫–≥ = {t2_cost:.0f} —Ç–µ–Ω–≥–µ\n\n"
        f"**–ö–æ–º–∏—Å—Å–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ (20%):**\n"
        f"‚Ä¢ ({t1_cost:.0f} + {t2_cost:.0f}) √ó 20% = {(t1_cost + t2_cost) * 0.20:.0f} —Ç–µ–Ω–≥–µ\n\n"
        f"------------------------------------\n"
        f"üí∞ **–ò–¢–û–ì–û —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –¥–æ –¥–≤–µ—Ä–∏:** ‚âà **{total:.0f} —Ç–µ–Ω–≥–µ**\n\n"
        f"{comparison_text}\n\n"
        f"üí° **–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ:** –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ 1% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥—Ä—É–∑–∞\n"
        f"üí≥ **–û–ø–ª–∞—Ç–∞:** –ø–æ—Å—Ç-–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏\n\n"
        f"‚ùì **–ù–µ –ø–æ–Ω—è—Ç–Ω—ã —Ç–∞—Ä–∏—Ñ—ã?** –ù–∞–ø–∏—à–∏—Ç–µ '–æ–±—ä—è—Å–Ω–∏ —Ç–∞—Ä–∏—Ñ—ã'\n\n"
        f"‚úÖ **–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?** –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω!"
    )
    return response

def explain_tariffs():
    """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤ –¢1 –∏ –¢2"""
    return """üöö **–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤:**

**–¢1 - –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ —Å–∫–ª–∞–¥–∞ –≤ –ê–ª–º–∞—Ç—ã:**
‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è –¥–æ –Ω–∞—à–µ–≥–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞ –≤ –ê–ª–º–∞—Ç—ã
‚Ä¢ –í—ã –∑–∞–±–∏—Ä–∞–µ—Ç–µ –≥—Ä—É–∑ —Å–∞–º–æ–≤—ã–≤–æ–∑–æ–º —Å–æ —Å–∫–ª–∞–¥–∞
‚Ä¢ –¢–û–õ–¨–ö–û —Å–∫–ª–∞–¥ –≤ –ê–ª–º–∞—Ç—ã, –±–µ–∑ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –≥–æ—Ä–æ–¥—É

**–¢2 - –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –¥–≤–µ—Ä–∏:**
‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è + –¥–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞ –≤ –õ–Æ–ë–û–ú –≥–æ—Ä–æ–¥–µ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞
‚Ä¢ –í–∫–ª—é—á–∞—è –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ –≥–æ—Ä–æ–¥—É –ê–ª–º–∞—Ç—ã –¥–æ –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞
‚Ä¢ –ú—ã –ø—Ä–∏–≤–æ–∑–∏–º –≥—Ä—É–∑ –ø—Ä—è–º–æ –∫ –≤–∞–º

üí° **–í–∞–∂–Ω–æ:** –î–∞–∂–µ –µ—Å–ª–∏ –≤—ã –≤ –ê–ª–º–∞—Ç—ã, –Ω–æ –Ω—É–∂–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –∞–¥—Ä–µ—Å–∞ - —ç—Ç–æ –¢2

üí≥ **–û–ø–ª–∞—Ç–∞:** –ø–æ—Å—Ç-–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ (–Ω–∞–ª–∏—á–Ω—ã–µ, Kaspi, Halyk, Freedom Bank, –±–µ–∑–Ω–∞–ª)"""

def get_payment_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–æ—Å–æ–±–∞—Ö –æ–ø–ª–∞—Ç—ã"""
    return """üí≥ **–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã:**

üí∞ **–ü–æ—Å—Ç-–æ–ø–ª–∞—Ç–∞:** –í—ã –ø–ª–∞—Ç–∏—Ç–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–∑–∞ –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è –≤–∞—Å —Ñ–æ—Ä–º–∞—Ç–µ:

‚Ä¢ **–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç** –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –Ω–∞ —Å—á–µ—Ç
‚Ä¢ **–ù–∞–ª–∏—á–Ω—ã–º–∏** 
‚Ä¢ **Kaspi Bank**
‚Ä¢ **Halyk Bank** 
‚Ä¢ **Freedom Bank**

üí° –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ—Å–º–æ—Ç—Ä–∞ –≥—Ä—É–∑–∞!"""

def get_delivery_procedure():
    return """üì¶ **–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:**

1. **–ü—Ä–∏–µ–º –≥—Ä—É–∑–∞ –≤ –ö–∏—Ç–∞–µ:** –í–∞—à –≥—Ä—É–∑ –ø—Ä–∏–±—É–¥–µ—Ç –Ω–∞ –Ω–∞—à —Å–∫–ª–∞–¥ –≤ –ö–∏—Ç–∞–µ (–ò–£ –∏–ª–∏ –ì—É–∞–Ω—á–∂–æ—É)
2. **–û—Å–º–æ—Ç—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞:** –í–∑–≤–µ—à–∏–≤–∞–µ–º, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–µ–º, —É–ø–∞–∫–æ–≤—ã–≤–∞–µ–º
3. **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:** –ü—Ä–∏—Å—ã–ª–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≥—Ä—É–∑–∞
4. **–û—Ç–ø—Ä–∞–≤–∫–∞:** –î–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ –ê–ª–º–∞—Ç—ã (–¢1) –∏–ª–∏ –¥–æ –¥–≤–µ—Ä–∏ (–¢2)
5. **–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–ø–ª–∞—Ç–∞:** –ó–∞–±–∏—Ä–∞–µ—Ç–µ –≥—Ä—É–∑ –∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º

üí≥ **–û–ø–ª–∞—Ç–∞:** –ø–æ—Å—Ç-–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ (–Ω–∞–ª–∏—á–Ω—ã–µ, Kaspi, Halyk, Freedom Bank, –±–µ–∑–Ω–∞–ª)

‚úÖ **–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É?** –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω!"""

def save_application(details):
    try:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: {timestamp}\n{details}\n"
        with open("applications.txt", "a", encoding="utf-8") as f: 
            f.write("="*50 + "\n" + log_entry + "="*50 + "\n\n")
        logger.info(f"–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {details}")
    except Exception as e: 
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def get_gemini_response(user_message, context=""):
    if not model:
        return "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    
    try:
        full_prompt = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ: {user_message}\n\n–û—Ç–≤–µ—Ç:"
        response = model.generate_content(
            full_prompt,
            generation_config=GenerationConfig(
                temperature=0.7,
                max_output_tokens=1000,
            )
        )
        return response.text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Gemini: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def extract_delivery_info(text):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Å—Ç–∞–≤–∫–µ"""
    weight = None
    product_type = None
    city = None
    
    try:
        # –ü–æ–∏—Å–∫ –≤–µ—Å–∞
        weight_patterns = [
            r'(\d+(?:\.\d+)?)\s*(?:–∫–≥|kg|–∫–∏–ª–æ–≥—Ä–∞–º–º|–∫–∏–ª–æ)',
            r'–≤–µ—Å\s*[:\-]?\s*(\d+(?:\.\d+)?)',
        ]
        
        for pattern in weight_patterns:
            match = re.search(pattern, text.lower())
            if match:
                weight = float(match.group(1))
                break
        
        # –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞
        text_lower = text.lower()
        for city_name in DESTINATION_ZONES:
            if city_name in text_lower:
                city = city_name
                break
        
        # –ü–æ–∏—Å–∫ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
        product_keywords = {
            '–æ–¥–µ–∂–¥–∞': ['–æ–¥–µ–∂–¥–∞', '–∞–¥–µ–∂–¥–∞', '–æ–¥–µ–∂–¥'],
            '–ª–µ–∫–∞—Ä—Å—Ç–≤–∞': ['–ª–µ–∫–∞—Ä—Å—Ç–≤–∞', '–ª–µ–∫–∞—Ä—Å–∏–≤–∞', '–º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã'],
            '–∫–æ—Å–º–µ—Ç–∏–∫–∞': ['–∫–æ—Å–º–µ—Ç–∏–∫–∞', '–∫—Ä–µ–º', '—à–∞–º–ø—É–Ω—å', '–º–∞–∫–∏—è–∂'],
            '—Ç–µ—Ö–Ω–∏–∫–∞': ['—Ç–µ—Ö–Ω–∏–∫–∞', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–Ω–æ—É—Ç–±—É–∫', '–≥–∞–¥–∂–µ—Ç'],
            '–º–µ–±–µ–ª—å': ['–º–µ–±–µ–ª—å', '—Å—Ç–æ–ª', '—Å—Ç—É–ª', '–∫—Ä–æ–≤–∞—Ç—å'],
            '–ø–æ—Å—É–¥–∞': ['–ø–æ—Å—É–¥–∞', '—Ç–∞—Ä–µ–ª–∫–∏', '—á–∞—à–∫–∏'],
            '–æ–±—â–∏–µ —Ç–æ–≤–∞—Ä—ã': ['—Ç–æ–≤–∞—Ä—ã', '—Ç–æ–≤–∞—Ä', '—Ä–∞–∑–Ω–æ–µ', '–ø—Ä–æ—á–µ–µ']
        }
        
        for prod_type, keywords in product_keywords.items():
            if any(keyword in text_lower for keyword in keywords):
                product_type = prod_type
                break
        
        return weight, product_type, city
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, None, None

def extract_contact_info(text):
    """–£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    name = None
    phone = None
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    clean_text = re.sub(r'\s+', ' ', text.strip()).lower()
    
    # –ü–æ–∏—Å–∫ –∏–º–µ–Ω–∏ (–ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ 2+ —Ä—É—Å—Å–∫–∏—Ö/–∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±—É–∫–≤)
    name_match = re.search(r'^([–∞-—èa-z]{2,})', clean_text)
    if name_match:
        name = name_match.group(1).capitalize()
    
    # –ü–æ–∏—Å–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
    phone_patterns = [
        r'(\d{10,11})',  # 87057600909
        r'(\d{3}[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2})',  # 870 576 00 909
        r'(\d{3}[\s\-]?\d{2}[\s\-]?\d{2}[\s\-]?\d{3})',  # 870 57 600 909
    ]
    
    for pattern in phone_patterns:
        phone_match = re.search(pattern, clean_text)
        if phone_match:
            phone = re.sub(r'\D', '', phone_match.group(1))
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
            if phone.startswith('8'):
                phone = '7' + phone[1:]
            elif len(phone) == 10:
                phone = '7' + phone
            break
    
    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∏ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    if name and phone and len(phone) >= 10:
        return name, phone
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–ª–µ—Ñ–æ–Ω, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–º—è –≤ —Ç–µ–∫—Å—Ç–µ
    if phone and not name:
        # –ò—â–µ–º –∏–º—è –ø–µ—Ä–µ–¥ –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –≤ –Ω–∞—á–∞–ª–µ —Ç–µ–∫—Å—Ç–∞
        name_before_comma = re.search(r'^([–∞-—èa-z]+)\s*[,]', clean_text)
        if name_before_comma:
            name = name_before_comma.group(1).capitalize()
    
    return name, phone

# --- ROUTES ---
@app.route('/')
def index(): 
    if 'delivery_data' not in session:
        session['delivery_data'] = {'weight': None, 'product_type': None, 'city': None}
    if 'chat_history' not in session:
        session['chat_history'] = []
    if 'waiting_for_contacts' not in session:
        session['waiting_for_contacts'] = False
    return render_template('index.html')

@app.route('/chat', methods=['POST'])
def chat():
    try:
        user_message = request.json.get('message', '').strip()
        if not user_message:
            return jsonify({"response": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."})
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–π
        delivery_data = session.get('delivery_data', {'weight': None, 'product_type': None, 'city': None})
        chat_history = session.get('chat_history', [])
        waiting_for_contacts = session.get('waiting_for_contacts', False)
        
        chat_history.append(f"–ö–ª–∏–µ–Ω—Ç: {user_message}")
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        if user_message.lower() in GREETINGS:
            session.update({
                'delivery_data': {'weight': None, 'product_type': None, 'city': None},
                'chat_history': [f"–ö–ª–∏–µ–Ω—Ç: {user_message}"],
                'waiting_for_contacts': False
            })
            return jsonify({"response": "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Post Pro. –ü–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –∏–∑ –ö–∏—Ç–∞—è –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω! –£–∫–∞–∂–∏—Ç–µ –≤–µ—Å, —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –∏ –≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏."})
        
        # –ï—Å–ª–∏ –∂–¥–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
        if waiting_for_contacts:
            name, phone = extract_contact_info(user_message)
            
            if name and phone:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏
                details = f"–ò–º—è: {name}, –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
                if delivery_data['weight']:
                    details += f", –í–µ—Å: {delivery_data['weight']} –∫–≥"
                if delivery_data['product_type']:
                    details += f", –¢–æ–≤–∞—Ä: {delivery_data['product_type']}"
                if delivery_data['city']:
                    details += f", –ì–æ—Ä–æ–¥: {delivery_data['city']}"
                
                save_application(details)
                
                # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
                session.update({
                    'delivery_data': {'weight': None, 'product_type': None, 'city': None},
                    'chat_history': [],
                    'waiting_for_contacts': False
                })
                
                return jsonify({"response": "üéâ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ Post Pro! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç. üìû"})
            else:
                # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ - —É—Ç–æ—á–Ω—è–µ–º
                return jsonify({"response": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–ò–º—è, 87001234567'"})
        
        # –ó–∞–ø—Ä–æ—Å—ã –æ–± –æ–ø–ª–∞—Ç–µ
        if any(word in user_message.lower() for word in ['–æ–ø–ª–∞—Ç', '–ø–ª–∞—Ç–µ–∂', '–∑–∞–ø–ª–∞—Ç–∏—Ç', '–¥–µ–Ω—å–≥–∏', '–∫–∞–∫ –ø–ª–∞—Ç–∏—Ç', '–Ω–∞–ª–∏—á–Ω', '–±–µ–∑–Ω–∞–ª', 'kaspi', 'halyk', 'freedom', '–±–∞–Ω–∫']):
            return jsonify({"response": get_payment_info()})
        
        # –ó–∞–ø—Ä–æ—Å—ã –æ —Ç–∞—Ä–∏—Ñ–∞—Ö –¢1/–¢2
        if any(word in user_message.lower() for word in ['—Ç1', '—Ç2', '—Ç–∞—Ä–∏—Ñ', '—á—Ç–æ —Ç–∞–∫–æ–µ —Ç', '–æ–±—ä—è—Å–Ω–∏ —Ç–∞—Ä–∏—Ñ']):
            return jsonify({"response": explain_tariffs()})
        
        # –ó–∞–ø—Ä–æ—Å—ã –æ –∑–∞—è–≤–∫–µ
        if any(word in user_message.lower() for word in ['–∑–∞—è–≤–∫', '–æ—Å—Ç–∞–≤—å', '—Å–≤—è–∂', '–∫–æ–Ω—Ç–∞–∫—Ç', '–ø–æ–∑–≤–æ–Ω', '–º–µ–Ω–µ–¥–∂–µ—Ä']):
            session['waiting_for_contacts'] = True
            return jsonify({"response": "–û—Ç–ª–∏—á–Ω–æ! –î–ª—è —Å–≤—è–∑–∏ —É–∫–∞–∂–∏—Ç–µ:\n‚Ä¢ –í–∞—à–µ –∏–º—è\n‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: '–ê—Å–ª–∞–Ω, 87001234567'"})
        
        # –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
        if any(word in user_message.lower() for word in ['–ø—Ä–æ—Ü–µ–¥—É—Ä', '–ø—Ä–æ—Ü–µ—Å—Å', '–∫–∞–∫ –¥–æ—Å—Ç–∞–≤', '–∫–∞–∫ –ø–æ–ª—É—á']):
            return jsonify({"response": get_delivery_procedure()})
        
        # –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è
        if any(word in user_message.lower() for word in ['–Ω–∞ –∫–∞–∫–æ–º –∏–∏', '–∫–∞–∫–æ–π –∏–∏', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è']):
            return jsonify({"response": "–Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ –±–∞–∑–µ Post Pro –ò–ò! üöÄ"})
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Å—Ç–∞–≤–∫–µ
        weight, product_type, city = extract_delivery_info(user_message)
        if weight:
            delivery_data['weight'] = weight
        if product_type:
            delivery_data['product_type'] = product_type
        if city:
            delivery_data['city'] = city
        
        # –ü–†–û–í–ï–†–Ø–ï–ú - –ï–°–õ–ò –í–û–ü–†–û–° –ù–ï –û –î–û–°–¢–ê–í–ö–ï, –¢–û –ü–ï–†–ï–î–ê–ï–ú –í GEMINI
        is_delivery_question = any(word in user_message.lower() for word in [
            '–≤–µ—Å', '–∫–≥', '–≥–æ—Ä–æ–¥', '–¥–æ—Å—Ç–∞–≤–∫', '—Ç–∞—Ä–∏—Ñ', '—Å—Ç–æ–∏–º–æ—Å', '—Ä–∞—Å—á–µ—Ç', '—Ü–µ–Ω–∞',
            '—Å–∫–æ–ª—å–∫–æ', '—Å—Ç–æ–∏—Ç', '–ø–æ—Å—á–∏—Ç–∞–π', '—Ä–∞—Å—Å—á–∏—Ç–∞–π', '—Ç1', '—Ç2', '–¥–∞', 'yes'
        ])

        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ –ò –≤–æ–ø—Ä–æ—Å –æ –¥–æ—Å—Ç–∞–≤–∫–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—á–µ—Ç
        if delivery_data['weight'] and delivery_data['city'] and is_delivery_question:
            if not delivery_data['product_type']:
                delivery_data['product_type'] = "–æ–±—â–∏–µ —Ç–æ–≤–∞—Ä—ã"
            
            # –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            wants_detailed = any(word in user_message.lower() for word in [
                '–¥–µ—Ç–∞–ª—å–Ω', '–ø–æ–¥—Ä–æ–±–Ω', '—Ä–∞–∑–±–µ–π', '—Ç–∞—Ä–∏—Ñ', '–¥–∞', 'yes', '–∫–æ–Ω–µ—á–Ω–æ'
            ])
            
            if wants_detailed:
                detailed_response = calculate_detailed_cost(
                    delivery_data['weight'], 
                    delivery_data['product_type'], 
                    delivery_data['city']
                )
                session['delivery_data'] = delivery_data
                session['chat_history'] = chat_history
                return jsonify({"response": detailed_response})
            
            # –ï—Å–ª–∏ –Ω–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç
            quick_cost = calculate_quick_cost(
                delivery_data['weight'], 
                delivery_data['product_type'], 
                delivery_data['city']
            )
            
            if quick_cost:
                quick_response = (
                    f"üöö **–ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç:**\n"
                    f"‚Ä¢ {delivery_data['weight']} –∫–≥ ¬´{delivery_data['product_type']}¬ª –≤ {delivery_data['city'].capitalize()}\n"
                    f"‚Ä¢ üí∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: **~{quick_cost['total']:.0f} —Ç–µ–Ω–≥–µ**\n\n"
                    f"üìä –•–æ—Ç–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º?"
                )
                
                session['delivery_data'] = delivery_data
                session['chat_history'] = chat_history
                return jsonify({"response": quick_response})
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò
        context_lines = []
        if len(chat_history) > 0:
            context_lines.append("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:")
            for msg in chat_history[-3:]:
                context_lines.append(msg)
        
        context_lines.append("\n–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:")
        if delivery_data['weight']:
            context_lines.append(f"- –í–µ—Å: {delivery_data['weight']} –∫–≥")
        if delivery_data['product_type']:
            context_lines.append(f"- –¢–æ–≤–∞—Ä: {delivery_data['product_type']}")
        if delivery_data['city']:
            context_lines.append(f"- –ì–æ—Ä–æ–¥: {delivery_data['city']}")
        
        context = "\n".join(context_lines)
        bot_response = get_gemini_response(user_message, context)
        chat_history.append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {bot_response}")
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        if len(chat_history) > 8:
            chat_history = chat_history[-8:]
        
        session['chat_history'] = chat_history
        session['delivery_data'] = delivery_data
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        if bot_response.strip().startswith("[–ó–ê–Ø–í–ö–ê]"):
            session['waiting_for_contacts'] = True
            return jsonify({"response": "–û—Ç–ª–∏—á–Ω–æ! –î–ª—è —Å–≤—è–∑–∏ —É–∫–∞–∂–∏—Ç–µ:\n‚Ä¢ –í–∞—à–µ –∏–º—è\n‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: '–ê—Å–ª–∞–Ω, 87001234567'"})
        
        return jsonify({"response": bot_response})
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return jsonify({"response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."})

@app.route('/health')
def health_check():
    return jsonify({"status": "healthy", "timestamp": datetime.now().isoformat()})

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(debug=False, host='0.0.0.0', port=port)
