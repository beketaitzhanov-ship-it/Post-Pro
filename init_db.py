# init_db.py
import sqlite3
import os
from typing import NoReturn

def init_database() -> NoReturn:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç NoReturn –¥–ª—è —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ.
    """
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('data', exist_ok=True)
    
    # –ü–†–ê–í–ò–õ–¨–ù–´–ô –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–ø–∫–µ data
    db_path = 'data/applications.db'
    connection: sqlite3.Connection = None
    cursor: sqlite3.Cursor = None
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = sqlite3.connect(db_path)
        cursor = connection.cursor()
        
        # –í–ö–õ–Æ–ß–ê–ï–ú –ø–æ–¥–¥–µ—Ä–∂–∫—É FOREIGN KEY
        cursor.execute("PRAGMA foreign_keys = ON;")
        cursor.execute("PRAGMA encoding = 'UTF-8';")
        cursor.execute("PRAGMA journal_mode = WAL;")  # –î–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

        print("üîÑ –ù–∞—á–∏–Ω–∞—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # 1. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É applications (–Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è —Ç–∞–±–ª–∏—Ü–∞)
        applications_table = """
        CREATE TABLE IF NOT EXISTS applications (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp TEXT NOT NULL,
            name TEXT NOT NULL,
            phone TEXT NOT NULL,
            weight REAL,
            product_type TEXT,
            city TEXT
        );
        """
        cursor.execute(applications_table)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'applications' —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")

        # 2. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É orders (–æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞)
        orders_table = """
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            track_number TEXT UNIQUE NOT NULL,
            customer_name TEXT,
            customer_phone TEXT,
            weight_kg REAL,
            volume_m3 REAL,
            product_type TEXT,
            destination_city TEXT,
            created_at TEXT DEFAULT (datetime('now')),
            estimated_delivery TEXT,
            route_type TEXT DEFAULT 'guangzhou_almaty',
            current_status TEXT DEFAULT 'created'
        );
        """
        cursor.execute(orders_table)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'orders' —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")

        # 3. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É telegram_users (–Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è —Ç–∞–±–ª–∏—Ü–∞)
        telegram_users_table = """
        CREATE TABLE IF NOT EXISTS telegram_users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id INTEGER UNIQUE NOT NULL,
            username TEXT,
            full_name TEXT,
            role TEXT DEFAULT 'operator',
            is_active INTEGER DEFAULT 1 CHECK (is_active IN (0, 1)),
            created_at TEXT DEFAULT (datetime('now'))
        );
        """
        cursor.execute(telegram_users_table)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'telegram_users' —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")

        # 4. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É shipment_status (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç orders - –ü–û–°–õ–ï–î–ù–Ø–Ø!)
        status_table = """
        CREATE TABLE IF NOT EXISTS shipment_status (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            track_number TEXT NOT NULL,
            status TEXT NOT NULL,
            location TEXT,
            description TEXT,
            photos TEXT,
            coordinates TEXT,
            timestamp TEXT DEFAULT (datetime('now')),
            FOREIGN KEY (track_number) REFERENCES orders(track_number) ON DELETE CASCADE ON UPDATE CASCADE
        );
        """
        cursor.execute(status_table)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'shipment_status' —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")

        # –ö–æ–º–º–∏—Ç–∏–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        connection.commit()

        # 5. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        indexes = [
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è orders
            "CREATE INDEX IF NOT EXISTS idx_orders_track_number ON orders(track_number);",
            "CREATE INDEX IF NOT EXISTS idx_orders_status ON orders(current_status);",
            "CREATE INDEX IF NOT EXISTS idx_orders_created_at ON orders(created_at);",
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è shipment_status  
            "CREATE INDEX IF NOT EXISTS idx_shipment_status_track_number ON shipment_status(track_number);",
            "CREATE INDEX IF NOT EXISTS idx_shipment_status_timestamp ON shipment_status(timestamp);",
            "CREATE INDEX IF NOT EXISTS idx_shipment_status_status ON shipment_status(status);",
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è telegram_users
            "CREATE INDEX IF NOT EXISTS idx_telegram_users_telegram_id ON telegram_users(telegram_id);",
            "CREATE INDEX IF NOT EXISTS idx_telegram_users_role ON telegram_users(role);",
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è applications
            "CREATE INDEX IF NOT EXISTS idx_applications_timestamp ON applications(timestamp);",
            "CREATE INDEX IF NOT EXISTS idx_applications_phone ON applications(phone);"
        ]

        created_indexes = 0
        for index_sql in indexes:
            try:
                cursor.execute(index_sql)
                created_indexes += 1
            except sqlite3.Error as e:
                print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞: {e}")

        connection.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ/–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: {created_indexes}/{len(indexes)}")

        # ===== –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –ü–†–û–í–ï–†–ö–ò =====
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' 
            AND name NOT LIKE 'sqlite_%'
            ORDER BY name;
        """)
        tables = [table[0] for table in cursor.fetchall()]
        
        expected_tables = ['applications', 'orders', 'shipment_status', 'telegram_users']
        missing_tables = set(expected_tables) - set(tables)
        
        if missing_tables:
            raise Exception(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {missing_tables}")

        print("\nüìä –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        for table in sorted(tables):
            print(f"   - {table}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º FOREIGN KEY
        cursor.execute("PRAGMA foreign_keys;")
        foreign_keys_status = cursor.fetchone()[0]
        if not foreign_keys_status:
            raise Exception("FOREIGN KEY support is disabled")

        print(f"üîó –ü–æ–¥–¥–µ—Ä–∂–∫–∞ FOREIGN KEY: –í–ö–õ–Æ–ß–ï–ù–ê ‚úÖ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
        print("\nüîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü:")
        table_columns = {
            'applications': 7,
            'orders': 11, 
            'shipment_status': 8,
            'telegram_users': 6
        }
        
        for table_name, expected_columns in table_columns.items():
            cursor.execute(f"PRAGMA table_info({table_name});")
            columns = cursor.fetchall()
            actual_columns = len(columns)
            status = "‚úÖ" if actual_columns == expected_columns else f"‚ùå (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_columns})"
            print(f"   {table_name}: {actual_columns} –∫–æ–ª–æ–Ω–æ–∫ {status}")

        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        cursor.execute("PRAGMA integrity_check;")
        integrity_result = cursor.fetchone()[0]
        if integrity_result != "ok":
            raise Exception(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {integrity_result}")

        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: ‚úÖ")
        print(f"\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {db_path}")
            
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SQLite: {e}")
        if connection:
            connection.rollback()
        raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        if connection:
            connection.rollback()
        raise
    finally:
        if connection:
            connection.close()
            print("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    init_database()
